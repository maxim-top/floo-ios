/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#import <Foundation/Foundation.h>

#ifdef __cplusplus
extern "C" {
#endif

@class BMXMessageList;
@class TagList;
@class BMXConversationList;
@class BMXDeviceList;
@class BMXGroupList;
@class BMXGroupMemberList;
@class BMXGroupBannedMemberList;
@class BMXGroupSharedFileList;
@class BMXGroupAnnouncementList;
@class BMXRosterServiceApplicationList;
@class BMXGroupApplicationList;
@class BMXGroupInvitationList;
@class ListOfLongLong;
@class BMXError;
@class BMXDevice;
@class BMXBaseObject;
@class BMXSDKConfigHostConfig;
@class BMXGroupMember;
@class BMXGroupBannedMember;
@class BMXGroupSharedFile;
@class BMXGroupAnnouncement;
@class BMXGroupInvitation;
@class BMXGroupApplication;
@class BMXGroupServiceCreateGroupOptions;
@class BMXMessageAttachmentSize;
@class BMXPushUserProfileMessagePushSetting;
@class BMXRosterServiceApplication;
@class BMXUserProfileAuthQuestion;
@class BMXUserProfileMessageSetting;
@class BMXRoomCreateOptions;
@class BMXRoomEditOptions;
@class BMXRoomAllowdOptions;
@class BMXRoomModerateOptions;
@class BMXPubRoomJoinOptions;
@class BMXRoomPubConfigureOptions;
@class BMXRoomSubJoinOptions;
@class BMXRoomSubConfigureOptions;
@class BMXRoomSubSwitchOptions;
@class BMXMessageAttachment;
@class BMXMessageConfig;
@class BMXMessage;
@class BMXConversation;
@class BMXSDKConfig;
@class BMXNetworkListener;
@class BMXChatService;
@class BMXPushService;
@class BMXClient;
@class BMXFileAttachment;
@class BMXVideoConfig;
@class BMXRoomAuth;
@class BMXStream;
@class BMXVideoCanvas;
@class BMXStreamStats;
@class BMXJanusStreamInfo;
@class BMXRoomParticipant;
@class BMXJanusPublisher;
@class BMXRoomSDPInfo;
@class BMXRTCConfig;
@class BMXRTCEngine;
@class BMXRTCRoom;
@class BMXRTCService;
@class BMXRTCSession;
@class BMXRTCSignalService;
@class BMXGroup;
@class BMXGroupService;
@class BMXImageAttachment;
@class BMXLocationAttachment;
@class BMXRosterService;
@class BMXMessagePage;
@class BMXGroupMemberResultPage;
@class BMXGroupBannedMemberResultPage;
@class BMXRosterApplicationResultPage;
@class BMXGroupApplicationPage;
@class BMXGroupInvitationPage;
@class BMXMessageListList;
@class BMXRosterItem;
@class BMXRosterItemList;
@class BMXUserProfile;
@class BMXUserService;
@class BMXVideoAttachment;
@class BMXVoiceAttachment;
@class BMXPushUserProfile;
@class BMXRTCStreams;
@class BMXRTCRoomParticipants;
@class BMXRTCPublishers;
@class BMXRTCRooms;
@class RTCEngineListener;
@protocol BMXChatServiceProtocol;
@protocol BMXRTCServiceProtocol;
@protocol BMXRTCSignalServiceProtocol;
@protocol BMXRTCEngineProtocol;
@protocol BMXPushServiceProtocol;

/**
 * 错误码
 *
 * BMXErrorCode_NoError:
 *     "The operation was performed successfully without error."
 * BMXErrorCode_GeneralError:
 *     "A generic error occurred during operation execution."
 * BMXErrorCode_InvalidParam:
 *     "There are invalid parameters in the input parameters."
 * BMXErrorCode_NotFound:
 *     "The path or file does not exist."
 * BMXErrorCode_DbOperationFailed:
 *     "The local database operation failed."
 * BMXErrorCode_SignInCancelled:
 *     "The user has cancelled the login operation."
 * BMXErrorCode_SignInTimeout:
 *     "The user login operation has timed out."
 * BMXErrorCode_SignInFailed:
 *     "The user login operation has failed."
 * BMXErrorCode_UserNotLogin:
 *     "The user hasn't logged in yet."
 * BMXErrorCode_UserAlreadyLogin:
 *     "Other user has logged in."
 * BMXErrorCode_UserAuthFailed:
 *     "User authentication failed, username/id or password is incorrect."
 * BMXErrorCode_UserPermissionDenied:
 *     "The user does not have permission to perform this action."
 * BMXErrorCode_UserNotExist:
 *     "The user does not exist."
 * BMXErrorCode_UserAlreadyExist:
 *     "The user is already exist."
 * BMXErrorCode_UserFrozen:
 *     "The user has been frozen."
 * BMXErrorCode_UserBanned:
 *     "The use has been banned from sending messages."
 * BMXErrorCode_UserRemoved:
 *     "The user has been removed."
 * BMXErrorCode_UserTooManyDevice:
 *     "The use has logged into too many devices."
 * BMXErrorCode_UserPasswordChanged:
 *     "The user has changed passwords on other device."
 * BMXErrorCode_UserKickedBySameDevice:
 *     "The user is kicked out by the same device."
 * BMXErrorCode_UserKickedByOtherDevices:
 *     "The user is kicked out by other device."
 * BMXErrorCode_UserAbnormal:
 *     "The user login status is not normal, the user is advised to login again."
 * BMXErrorCode_UserCancel:
 *     "The user has cancelled the operation."
 * BMXErrorCode_UserOldPasswordNotMatch:
 *     "The old password does not match when the password is changed."
 * BMXErrorCode_UserSigningIn:
 *     "The user is signning in."
 * BMXErrorCode_PushTokenInvalid:
 *     "The push token is not valid."
 * BMXErrorCode_PushAliasBindByOtherUser:
 *     "The push alias is bound by other user."
 * BMXErrorCode_PushAliasTokenNotMatch:
 *     "The push alias does not match the token."
 * BMXErrorCode_InvalidVerificationCode:
 *     "The verification code is not valid."
 * BMXErrorCode_InvalidRequestParameter:
 *     "The request parameters are not valid."
 * BMXErrorCode_InvalidUserNameParameter:
 *     "The username parameter is not valid."
 * BMXErrorCode_MissingAccessToken:
 *     "The access token parameter is missing."
 * BMXErrorCode_CurrentUserIsInRoster:
 *     "The current user is already in the roster list."
 * BMXErrorCode_CurrentUserIsInBlocklist:
 *     "The current user is already in the blocked list."
 * BMXErrorCode_AnswerFailed:
 *     "The application does not exist or has already expired."
 * BMXErrorCode_InvalidToken:
 *     "The current token is not valid."
 * BMXErrorCode_InvalidFileSign:
 *     "The current file signature is not valid."
 * BMXErrorCode_InvalidFileObjectType:
 *     "The current file object type is not valid."
 * BMXErrorCode_InvalidFileUploadToType:
 *     "The to type of the uploaded file is not valid."
 * BMXErrorCode_InvalidFileDownloadUrl:
 *     "The file download url is not valid."
 * BMXErrorCode_MessageInvalid:
 *     "The current message format is not valid."
 * BMXErrorCode_MessageOutRecallTime:
 *     "The current message has exceeded the allowed recall time."
 * BMXErrorCode_MessageRecallDisabled:
 *     "The current message is not recallable."
 * BMXErrorCode_MessageCensored:
 *     "The current message include censored content."
 * BMXErrorCode_MessageInvalidType:
 *     "This operation is not supported by the current message type."
 * BMXErrorCode_MessageBadArg:
 *     "The current message contains illegal characters."
 * BMXErrorCode_MessageRateLimitExceeded:
 *     "The message sending frequency has reached the limit."
 * BMXErrorCode_RosterNotFriend:
 *     "The current roster is not a friend."
 * BMXErrorCode_RosterBlockListExist:
 *     "The current roster is already on the blocklist."
 * BMXErrorCode_RosterRejectApplication:
 *     "The current user does not accept any application."
 * BMXErrorCode_RosterHasDeletedFromSystem:
 *     "The current roster has been deleted from the system."
 * BMXErrorCode_GroupServerDbError:
 *     "An error occurred in the server database."
 * BMXErrorCode_GroupNotExist:
 *     "The Specified group not found."
 * BMXErrorCode_GroupNotMemberFound:
 *     "The user is not in the specified group."
 * BMXErrorCode_GroupMsgNotifyTypeUnknown:
 *     "The group message notification type is unknown."
 * BMXErrorCode_GroupOwnerCannotLeave:
 *     "The group owner cannot leave the group."
 * BMXErrorCode_GroupTransferNotAllowed:
 *     "Group owners can only be transferred to group members. The currently specified user is not a group member."
 * BMXErrorCode_GroupRecoveryMode:
 *     "Group is recovery mode."
 * BMXErrorCode_GroupExceedLimitGlobal:
 *     "The number of global groups reaches the limit."
 * BMXErrorCode_GroupExceedLimitUserCreate:
 *     "The number of incoming members reached the limit when the group was created."
 * BMXErrorCode_GroupExceedLimitUserJoin:
 *     "The number of group members has reached the limit."
 * BMXErrorCode_GroupCapacityExceedLimit:
 *     "The maximum group capacity is limited."
 * BMXErrorCode_GroupMemberPermissionRequired:
 *     "This operation needs group member permission."
 * BMXErrorCode_GroupAdminPermissionRequired:
 *     "This operation needs group admin permission."
 * BMXErrorCode_GroupOwnerPermissionRequired:
 *     "This operation needs group owner permission."
 * BMXErrorCode_GroupApplicationExpiredOrHandled:
 *     "The current group application has expired or be handled."
 * BMXErrorCode_GroupInvitationExpiredOrHandled:
 *     "The current group invitation  has expired or be handled."
 * BMXErrorCode_GroupKickTooManyTimes:
 *     "The current user has been kicked more than 3 times."
 * BMXErrorCode_GroupMemberExist:
 *     "The current user is already in the group."
 * BMXErrorCode_GroupBlockListExist:
 *     "The current user is already in group blocklist."
 * BMXErrorCode_GroupAnnouncementNotFound:
 *     "The current group announcement with the specified id was not found."
 * BMXErrorCode_GroupAnnouncementForbidden:
 *     "Group announcement has been forbidden by system admin."
 * BMXErrorCode_GroupSharedFileNotFound:
 *     "Group shared file is not found."
 * BMXErrorCode_GroupSharedFileOperateNotAllowed:
 *     "Do not have permission to operate group shared files."
 * BMXErrorCode_GroupMemberBanned:
 *     "Group banned member to send message."
 * BMXErrorCode_ServerNotReachable:
 *     "The current server not reachable."
 * BMXErrorCode_ServerUnknownError:
 *     "An unknown error occurred on the server."
 * BMXErrorCode_ServerInvalid:
 *     "The current server host is not valid."
 * BMXErrorCode_ServerDecryptionFailed:
 *     "A decryption failed error occurred on the server."
 * BMXErrorCode_ServerEncryptMethodUnsupported:
 *     "The server does not currently support the specified encryption method."
 * BMXErrorCode_ServerBusy:
 *     "The server is currently busy."
 * BMXErrorCode_ServerNeedRetry:
 *     "The server needs to retry."
 * BMXErrorCode_ServerTimeOut:
 *     "A timeout error occurred on the server."
 * BMXErrorCode_ServerConnectFailed:
 *     "A connection failure error occurred on the server."
 * BMXErrorCode_ServerDNSFailed:
 *     "The current server failed to obtain the dns list."
 * BMXErrorCode_ServerNeedReconnected:
 *     "The current server has changed and needs to be reconnected."
 * BMXErrorCode_ServerFileUploadUnknownError:
 *     "An unknown file upload error occurred on the server."
 * BMXErrorCode_ServerFileDownloadUnknownError:
 *     "An unknown file download error occurred on the server."
 * BMXErrorCode_ServerInvalidLicense:
 *     "An invalid license error occurred on the server."
 * BMXErrorCode_ServerLicenseLimit:
 *     "A license limit error occurred on the server."
 * BMXErrorCode_ServerAppFrozen:
 *     "An app freeze error occurred on the server."
 * BMXErrorCode_ServerTooManyRequest:
 *     "The server is being accessed too many times."
 * BMXErrorCode_ServerNotAllowOpenRegister:
 *     "The server is not allowed open registration."
 * BMXErrorCode_ServerFireplaceUnknownError:
 *     "An unknown error occurred on the fireplace server."
 * BMXErrorCode_ServerResponseInvalid:
 *     "The current response returned by the server is not valid."
 * BMXErrorCode_ServerInvalidUploadUrl:
 *     "The current upload server url is not valid."
 * BMXErrorCode_ServerAppLicenseInvalid:
 *     "The current server app license is not valid."
 * BMXErrorCode_ServerAppLicenseExpired:
 *     "The current server app license has expired."
 * BMXErrorCode_ServerAppLicenseExceedLimit:
 *     "The current server app license has reached its limit."
 * BMXErrorCode_ServerAppIdMissing:
 *     "The current server appid is missing."
 * BMXErrorCode_ServerAppIdInvalid:
 *     "The current server appid is not valid."
 * BMXErrorCode_ServerAppSignInvalid:
 *     "The current server app signature is not valid."
 * BMXErrorCode_ServerAppNotifierNotExist:
 *     "The current server app notifier not exist."
 * BMXErrorCode_ServerNoClusterInfoForClusterId:
 *     "The specified cluster id has no cluster information."
 * BMXErrorCode_ServerFileDownloadFailure:
 *     "A download error occurred on the server."
 * BMXErrorCode_ServerAppStatusNotNormal:
 *     "The current status of the server app is not normal."
 * BMXErrorCode_ServerPlatformNotAllowed:
 *     "The server does not support the currently logged in device platform."
 * BMXErrorCode_ServerCannotCreateDeviceSn:
 *     "The server cannot generate the serial number of the currently logged in device."
 * BMXErrorCode_ServerRtcNotOpen:
 *     "The RTC service is not open."
 */
typedef NS_ENUM(NSInteger, BMXErrorCode) {
    BMXErrorCode_NoError,
    BMXErrorCode_GeneralError,
    BMXErrorCode_InvalidParam,
    BMXErrorCode_NotFound,
    BMXErrorCode_DbOperationFailed,
    BMXErrorCode_SignInCancelled,
    BMXErrorCode_SignInTimeout,
    BMXErrorCode_SignInFailed,
    BMXErrorCode_UserNotLogin = 100,
    BMXErrorCode_UserAlreadyLogin,
    BMXErrorCode_UserAuthFailed,
    BMXErrorCode_UserPermissionDenied,
    BMXErrorCode_UserNotExist,
    BMXErrorCode_UserAlreadyExist,
    BMXErrorCode_UserFrozen,
    BMXErrorCode_UserBanned,
    BMXErrorCode_UserRemoved,
    BMXErrorCode_UserTooManyDevice,
    BMXErrorCode_UserPasswordChanged,
    BMXErrorCode_UserKickedBySameDevice,
    BMXErrorCode_UserKickedByOtherDevices,
    BMXErrorCode_UserAbnormal,
    BMXErrorCode_UserCancel,
    BMXErrorCode_UserOldPasswordNotMatch,
    BMXErrorCode_UserSigningIn,
    BMXErrorCode_PushTokenInvalid = 200,
    BMXErrorCode_PushAliasBindByOtherUser,
    BMXErrorCode_PushAliasTokenNotMatch,
    BMXErrorCode_InvalidVerificationCode = 300,
    BMXErrorCode_InvalidRequestParameter,
    BMXErrorCode_InvalidUserNameParameter,
    BMXErrorCode_MissingAccessToken,
    BMXErrorCode_CurrentUserIsInRoster,
    BMXErrorCode_CurrentUserIsInBlocklist,
    BMXErrorCode_AnswerFailed,
    BMXErrorCode_InvalidToken,
    BMXErrorCode_InvalidFileSign,
    BMXErrorCode_InvalidFileObjectType,
    BMXErrorCode_InvalidFileUploadToType,
    BMXErrorCode_InvalidFileDownloadUrl,
    BMXErrorCode_MessageInvalid = 400,
    BMXErrorCode_MessageOutRecallTime,
    BMXErrorCode_MessageRecallDisabled,
    BMXErrorCode_MessageCensored,
    BMXErrorCode_MessageInvalidType,
    BMXErrorCode_MessageBadArg,
    BMXErrorCode_MessageRateLimitExceeded,
    BMXErrorCode_RosterNotFriend = 500,
    BMXErrorCode_RosterBlockListExist,
    BMXErrorCode_RosterRejectApplication,
    BMXErrorCode_RosterHasDeletedFromSystem,
    BMXErrorCode_GroupServerDbError = 600,
    BMXErrorCode_GroupNotExist,
    BMXErrorCode_GroupNotMemberFound,
    BMXErrorCode_GroupMsgNotifyTypeUnknown,
    BMXErrorCode_GroupOwnerCannotLeave,
    BMXErrorCode_GroupTransferNotAllowed,
    BMXErrorCode_GroupRecoveryMode,
    BMXErrorCode_GroupExceedLimitGlobal,
    BMXErrorCode_GroupExceedLimitUserCreate,
    BMXErrorCode_GroupExceedLimitUserJoin,
    BMXErrorCode_GroupCapacityExceedLimit,
    BMXErrorCode_GroupMemberPermissionRequired,
    BMXErrorCode_GroupAdminPermissionRequired,
    BMXErrorCode_GroupOwnerPermissionRequired,
    BMXErrorCode_GroupApplicationExpiredOrHandled,
    BMXErrorCode_GroupInvitationExpiredOrHandled,
    BMXErrorCode_GroupKickTooManyTimes,
    BMXErrorCode_GroupMemberExist,
    BMXErrorCode_GroupBlockListExist,
    BMXErrorCode_GroupAnnouncementNotFound,
    BMXErrorCode_GroupAnnouncementForbidden,
    BMXErrorCode_GroupSharedFileNotFound,
    BMXErrorCode_GroupSharedFileOperateNotAllowed,
    BMXErrorCode_GroupMemberBanned,
    BMXErrorCode_ServerNotReachable = 700,
    BMXErrorCode_ServerUnknownError,
    BMXErrorCode_ServerInvalid,
    BMXErrorCode_ServerDecryptionFailed,
    BMXErrorCode_ServerEncryptMethodUnsupported,
    BMXErrorCode_ServerBusy,
    BMXErrorCode_ServerNeedRetry,
    BMXErrorCode_ServerTimeOut,
    BMXErrorCode_ServerConnectFailed,
    BMXErrorCode_ServerDNSFailed,
    BMXErrorCode_ServerNeedReconnected,
    BMXErrorCode_ServerFileUploadUnknownError,
    BMXErrorCode_ServerFileDownloadUnknownError,
    BMXErrorCode_ServerInvalidLicense,
    BMXErrorCode_ServerLicenseLimit,
    BMXErrorCode_ServerAppFrozen,
    BMXErrorCode_ServerTooManyRequest,
    BMXErrorCode_ServerNotAllowOpenRegister,
    BMXErrorCode_ServerFireplaceUnknownError,
    BMXErrorCode_ServerResponseInvalid,
    BMXErrorCode_ServerInvalidUploadUrl,
    BMXErrorCode_ServerAppLicenseInvalid,
    BMXErrorCode_ServerAppLicenseExpired,
    BMXErrorCode_ServerAppLicenseExceedLimit,
    BMXErrorCode_ServerAppIdMissing,
    BMXErrorCode_ServerAppIdInvalid,
    BMXErrorCode_ServerAppSignInvalid,
    BMXErrorCode_ServerAppNotifierNotExist,
    BMXErrorCode_ServerNoClusterInfoForClusterId,
    BMXErrorCode_ServerFileDownloadFailure,
    BMXErrorCode_ServerAppStatusNotNormal,
    BMXErrorCode_ServerPlatformNotAllowed,
    BMXErrorCode_ServerCannotCreateDeviceSn,
    BMXErrorCode_ServerRtcNotOpen
};

/**
 * 客户端平台类型
 */
typedef NS_ENUM(NSInteger, BMXClientType) {
    BMXClientType_Unknown,  /// 未知客户端类型
    BMXClientType_iOS,      /// IOS端
    BMXClientType_Android,  /// Android端
    BMXClientType_Windows,  /// Windows PC 端
    BMXClientType_macOS,    /// Mac PC 端
    BMXClientType_Linux,    /// Linux PC 端
    BMXClientType_Web       /// Web端
};

/**
 * 网络连接类型
 */
typedef NS_ENUM(NSInteger, BMXNetworkType) {
    BMXNetworkType_Mobile,  /// 移动网络
    BMXNetworkType_Wifi,    /// Wifi
    BMXNetworkType_Cable,   /// 有线电视电缆
    BMXNetworkType_None     /// 未知类型
};

/**
 * 连接状态
 */
typedef NS_ENUM(NSInteger, BMXConnectStatus) {
    BMXConnectStatus_Disconnected,  /// 未连接状态
    BMXConnectStatus_Connected      /// 已连接状态
};

/**
 * 登录状态
 */
typedef NS_ENUM(NSInteger, BMXSignInStatus) {
    BMXSignInStatus_SignOut,    /// 未登录状态
    BMXSignInStatus_SignIn,     /// 登录状态
	BMXSignInStatus_SigningIn   /// 登录中
};

/**
 * 日志级别
 */
typedef NS_ENUM(NSInteger, BMXLogLevel) {
    BMXLogLevel_Error,  /// 错误级别
    BMXLogLevel_Warning,/// 警告级别
    BMXLogLevel_Debug   /// 调试级别
};

/**
 * 推送提供商
 */
typedef NS_ENUM(NSInteger, BMXPushProviderType) {
    BMXPushProviderType_Unknown,/// 未知客户端类型
    BMXPushProviderType_APNS,   /// 苹果 APNS
    BMXPushProviderType_HuaWei, /// 华为
    BMXPushProviderType_XiaoMi, /// 小米
    BMXPushProviderType_MeiZu,  /// 魅族
    BMXPushProviderType_VIVO,   /// VIVO
    BMXPushProviderType_OPPS,   /// OPPO
    BMXPushProviderType_FCM     /// FCM
};

/**
 * 推送环境
 */
typedef NS_ENUM(NSInteger, BMXPushEnvironmentType) {
    BMXPushEnvironmentType_Development, /// 开发环境
    BMXPushEnvironmentType_Production   /// 生产环境
};

/**
 * Allowed操作执行的操作类型
 */
typedef NS_ENUM(NSInteger, AllowedAction) {
    EnableAction,   /// 允许操作
    DisableAction,  /// 禁止操作
    AddAction,      /// 添加操作
    RemoveAction    /// 删除操作
};

/**
 * 附件类型
 */
typedef NS_ENUM(NSInteger, BMXMessageAttachment_Type) {
    BMXMessageAttachment_Type_Image,    /// 图片
    BMXMessageAttachment_Type_Voice,    /// 语音
    BMXMessageAttachment_Type_Video,    /// 视频片段
    BMXMessageAttachment_Type_File,     /// 文件
    BMXMessageAttachment_Type_Location, /// 位置
    BMXMessageAttachment_Type_Command,  /// 命令消息
    BMXMessageAttachment_Type_Forward   /// 转发消息
};

/**
 * 附件下载状态
 */
typedef NS_ENUM(NSInteger, BMXMessageAttachment_DownloadStatus) {
    BMXMessageAttachment_DownloadStatus_Downloaing, /// 下载中
    BMXMessageAttachment_DownloadStatus_Successed,  /// 下载成功
    BMXMessageAttachment_DownloadStatus_Failed,     /// 下载失败
    BMXMessageAttachment_DownloadStatus_NotStart,   /// 下载尚未开始
    BMXMessageAttachment_DownloadStatus_Canceled    /// 下载被取消
};

/**
 * 当前读取的Badge数字的操作类型
 */
typedef NS_ENUM(NSInteger, BMXMessageConfig_BadgeCountType) {
    BMXMessageConfig_BadgeCountType_Change, /// 读取Badge计数的操作类型为增加或减少。正数为增加负数为减少
    BMXMessageConfig_BadgeCountType_Set     /// 设置Badge的计数为当前的计数值
};

/**
 * RTC通话类型
 */
typedef NS_ENUM(NSInteger, BMXMessageConfig_RTCCallType) {
    BMXMessageConfig_RTCCallType_AudioCall, /// 语音通话
    BMXMessageConfig_RTCCallType_VideoCall  /// 视频通话
};

/**
 * RTC通话房间类型
 */
typedef NS_ENUM(NSInteger, BMXMessageConfig_RTCRoomType) {
    BMXMessageConfig_RTCRoomType_Communication, /// 会议模式
    BMXMessageConfig_RTCRoomType_Broadcast      /// 直播模式
};

/**
 * 消息投递状态
 */
typedef NS_ENUM(NSInteger, BMXMessage_DeliveryStatus) {
    BMXMessage_DeliveryStatus_New,          /// 新创建消息
    BMXMessage_DeliveryStatus_Delivering,   /// 消息投递中
    BMXMessage_DeliveryStatus_Deliveried,   /// 消息已投递
    BMXMessage_DeliveryStatus_Failed,       /// 消息投递失败
    BMXMessage_DeliveryStatus_Recalled      /// 消息已撤回
};

/**
 * 消息类型
 */
typedef NS_ENUM(NSInteger, BMXMessage_MessageType) {
    BMXMessage_MessageType_Single,  /// 单聊消息
    BMXMessage_MessageType_Group,   /// 群聊消息
    BMXMessage_MessageType_System   /// 系统消息
};

/**
 *  消息内容类型
 */
typedef NS_ENUM(NSInteger, BMXMessage_ContentType) {
    BMXMessage_ContentType_Text,    /// 文本消息
    BMXMessage_ContentType_Image,   /// 图片消息
    BMXMessage_ContentType_Voice,   /// 语音消息
    BMXMessage_ContentType_Video,   /// 视频片段消息
    BMXMessage_ContentType_File,    /// 文件消息
    BMXMessage_ContentType_Location,/// 位置消息
    BMXMessage_ContentType_Command, /// 命令消息
    BMXMessage_ContentType_Forward, /// 转发消息
    BMXMessage_ContentType_RTC      /// 音视频消息
};

/**
 * 消息投递质量
 */
typedef NS_ENUM(NSInteger, BMXMessage_DeliveryQos) {
    BMXMessage_DeliveryQos_AtLastOnce,  /// 最少投递一次
    BMXMessage_DeliveryQos_AtMostOnce,  /// 最多投递一次
    BMXMessage_DeliveryQos_ExactlyOnce  /// 仅投递一次
};

/**
 * 会话类型
 */
typedef NS_ENUM(NSInteger, BMXConversation_Type) {
    BMXConversation_Type_Single,/// 单聊
    BMXConversation_Type_Group, /// 群聊
    BMXConversation_Type_System /// 系统通知
};

/**
 * 消息搜索方向
 */
typedef NS_ENUM(NSInteger, BMXConversation_Direction) {
    BMXConversation_Direction_Up,   /// 取更旧消息
    BMXConversation_Direction_Down  /// 取更新消息
};

/**
 * 缩略图生成策略
 */
typedef NS_ENUM(NSInteger, BMXChatService_ThumbnailStrategy) {
    BMXChatService_ThumbnailStrategy_ThirdpartyServerCreate,/// 第三方服务器生成
    BMXChatService_ThumbnailStrategy_LocalServerCreate      /// 本地服务器生成
};

/**
 * push sdk状态
 */
typedef NS_ENUM(NSInteger, BMXPushService_PushSdkStatus) {
    BMXPushService_PushSdkStatus_Starting,  /// 正在启动
    BMXPushService_PushSdkStatus_Started,   /// 启动，在线
    BMXPushService_PushSdkStatus_Stoped,    /// 停止
    BMXPushService_PushSdkStatus_Offline    /// 离线
};

/**
 * 本地推送消息搜索方向
 */
typedef NS_ENUM(NSInteger, BMXPushService_PushDirection) {
    BMXPushService_PushDirection_Up,    /// 取更旧消息
    BMXPushService_PushDirection_Down   /// 取更新消息
};

/**
 * RTC客户端类型
 */
typedef NS_ENUM(NSInteger, BMXSDKType) {
    BMXSDKType_BMXRTC,  /// BMX
    BMXSDKType_UCloudRTC/// UCloud
};

/**
 * 音视频SDK模式
 */
typedef NS_ENUM(NSInteger, BMXSDKMode) {
    BMXSDKMode_Normal,  ///正常模式
    BMXSDKMode_Test     ///测试模式
};

/**
 * @brief 房间类型
 */
typedef NS_ENUM(NSInteger, BMXRoomType) {
    BMXRoomType_Communication,  /// 会议模式
    BMXRoomType_Broadcast       /// 直播模式
};

/**
 * @brief 角色模式
 */
typedef NS_ENUM(NSInteger, BMXStreamRole) {
    BMXStreamRole_Publish,  /// 推流发布角色
    BMXStreamRole_Subscribe,/// 拉流订阅角色
    BMXStreamRole_Both      /// 两者都有
};

/**
 * @brief 视频编码类型
 */
typedef NS_ENUM(NSInteger, BMXVideoCodec) {
    BMXVideoCodec_VP8,  ///VP8
    BMXVideoCodec_H264  ///H264
};

/**
 * @brief 视频分辨率
 */
typedef NS_ENUM(NSInteger, BMXVideoProfile) {
    BMXVideoProfile_None,           ///未定义
    BMXVideoProfile_Profile_240_180,///240*180分辨率
    BMXVideoProfile_Profile_320_180,
    BMXVideoProfile_Profile_320_240,
    BMXVideoProfile_Profile_480_360,
    BMXVideoProfile_Profile_640_360,
    BMXVideoProfile_Profile_640_480,
    BMXVideoProfile_Profile_960_720,
    BMXVideoProfile_Profile_1280_720,
    BMXVideoProfile_Profile_1920_1080
};

/**
 * @brief 音频分辨率
 */
typedef NS_ENUM(NSInteger, BMXAudioProfile) {
    BMXAudioProfile_Default,        ///默认值，单声道，32k码率
    BMXAudioProfile_Stand,          /// 单声道，64k码率
    BMXAudioProfile_Stand_Stereo,   /// 双声道，标准立体声，80k码率
    BMXAudioProfile_Hight,          /// 单声道，高音质，96k码率
    BMXAudioProfile_Hight_Stereo    /// 双声道，高音质，128k码率
};

/**
 * @brief 视频源类型
 */
typedef NS_ENUM(NSInteger, BMXVideoMediaType) {
    BMXVideoMediaType_None,     /// 无视频源
    BMXVideoMediaType_Camera,   /// 摄像头
    BMXVideoMediaType_Screen    /// 屏幕
};

/**
 * @brief 音视频轨道类型
 */
typedef NS_ENUM(NSInteger, BMXTrackType) {
    BMXTrackType_Audio, ///音频流
    BMXTrackType_Video  ///视频流
};

/**
 * @brief 渲染模式
 */
typedef NS_ENUM(NSInteger, BMXRenderMode) {
    BMXRenderMode_Default,  /// 默认（平铺）
    BMXRenderMode_Fit,      /// 保持比例
    BMXRenderMode_Fill      /// 拉伸
};

/**
 * @brief 镜像模式
 */
typedef NS_ENUM(NSInteger, BMXMirrorMode) {
    BMXMirrorMode_Default,  /// 默认模式
    BMXMirrorMode_Enable,   /// 打开镜像模式
    BMXMirrorMode_Disable   /// 关闭镜像模式
};

/**
 * @brief SDP类型
 */
typedef NS_ENUM(NSInteger, BMXRoomSDPType) {
    BMXRoomSDPType_Offer,   /// 请求
    BMXRoomSDPType_Answer   /// 应答
};

/**
 * @brief attach 或 detach操作的handler类型
 */
typedef NS_ENUM(NSInteger, BMXRTCSignalService_HandlerType) {
    BMXRTCSignalService_publishType,    ///attachSession类型为发布者。服务器返回发布者handler
    BMXRTCSignalService_subscribeType   ///attachSession类型为订阅者。服务器返回订阅者handler。
};

/**
 * @brief Allowed操作执行的操作类型
 */
typedef NS_ENUM(NSInteger, BMXRTCSignalService_AllowedAction) {
    BMXRTCSignalService_EnableAction,   /// 允许操作
    BMXRTCSignalService_DisableAction,  /// 禁止操作
    BMXRTCSignalService_AddAction,      /// 添加操作
    BMXRTCSignalService_RemoveAction    /// 删除操作
};

/**
 * @brief 群邀请状态
 */
typedef NS_ENUM(NSInteger, BMXGroup_InvitationStatus) {
    BMXGroup_InvitationStatus_Pending,  /// 请求待处理
    BMXGroup_InvitationStatus_Accepted, /// 请求已接受
    BMXGroup_InvitationStatus_Declined  /// 请求已拒绝
};

/**
 * @brief 群申请状态
 */
typedef NS_ENUM(NSInteger, BMXGroup_ApplicationStatus) {
    BMXGroup_ApplicationStatus_Pending, /// 请求待处理
    BMXGroup_ApplicationStatus_Accepted,/// 请求已接受
    BMXGroup_ApplicationStatus_Declined /// 请求已拒绝
};

/**
 * @brief 消息通知类型
 */
typedef NS_ENUM(NSInteger, BMXGroup_MsgPushMode) {
    BMXGroup_MsgPushMode_All,       /// 通知所有群消息
    BMXGroup_MsgPushMode_None,      /// 所有消息都不通知
    BMXGroup_MsgPushMode_AdminOrAt, /// 只通知管理员或者被 @的消息
    BMXGroup_MsgPushMode_Admin,     /// 只通知知管理员消息
    BMXGroup_MsgPushMode_At         /// 只通知被 @消息
};

/**
 * @brief 群信息修改模式
 */
typedef NS_ENUM(NSInteger, BMXGroup_ModifyMode) {
    BMXGroup_ModifyMode_AdminOnly,  /// 只有管理员可以
    BMXGroup_ModifyMode_Open        /// 所有群成员都可以修改
};

/**
 * @brief 进群验证方式
 */
typedef NS_ENUM(NSInteger, BMXGroup_JoinAuthMode) {
    BMXGroup_JoinAuthMode_Open,         /// 无需验证
    BMXGroup_JoinAuthMode_NeedApproval, /// 需要管理员批准
    BMXGroup_JoinAuthMode_RejectAll     /// 拒绝所有申请
};

/**
 * @brief 邀请入群模式
 */
typedef NS_ENUM(NSInteger, BMXGroup_InviteMode) {
    BMXGroup_InviteMode_AdminOnly,  /// 只有管理员可以邀请他人进群
    BMXGroup_InviteMode_Open        /// 所有人都可以邀请他人进群
};

/**
 * @brief 群组信息更新类型
 */
typedef NS_ENUM(NSInteger, BMXGroup_UpdateInfoType) {
    BMXGroup_UpdateInfoType_UnKnown,        /// 默认初始化值
    BMXGroup_UpdateInfoType_Name,           /// 修改群名称
    BMXGroup_UpdateInfoType_Description,    /// 修改群描述
    BMXGroup_UpdateInfoType_Avatar,         /// 修改群头像
    BMXGroup_UpdateInfoType_Owner,          /// 修改群主
    BMXGroup_UpdateInfoType_Ext,            /// 修改群扩展
    BMXGroup_UpdateInfoType_NickName,       /// 群成员修改昵称
    BMXGroup_UpdateInfoType_ModifyMode,     /// 修改群信息模式
    BMXGroup_UpdateInfoType_JoinAuthMode,   /// 修改进群验证方式
    BMXGroup_UpdateInfoType_InviteMode,     /// 修改邀请入群模式
    BMXGroup_UpdateInfoType_MsgPushMode,    /// 修改群消息推送类型
    BMXGroup_UpdateInfoType_MsgMuteMode,    /// 修改是否提醒消息
    BMXGroup_UpdateInfoType_ReadAckMode,    /// 是否开启群消息已读功能
    BMXGroup_UpdateInfoType_HistoryVisibleMode,/// 新群成员是否可见群历史聊天记录
    BMXGroup_UpdateInfoType_BanExpireTime   /// 群组全员禁言到期时间
};

/**
 * @brief 群组状态
 */
typedef NS_ENUM(NSInteger, BMXGroup_GroupStatus) {
    BMXGroup_GroupStatus_Normal,    /// 群组状态正常
    BMXGroup_GroupStatus_Destroyed  /// 群组已销毁
};

/**
 * @brief 群组消息屏蔽模式
 */
typedef NS_ENUM(NSInteger, BMXGroup_MsgMuteMode) {
    BMXGroup_MsgMuteMode_None,              /// 不屏蔽
    BMXGroup_MsgMuteMode_MuteNotification,  /// 屏蔽本地消息通知
    BMXGroup_MsgMuteMode_MuteChat           /// 屏蔽消息，不接收消息
};

/**
 * @brief 群成员角色
 */
typedef NS_ENUM(NSInteger, BMXGroup_MemberRoleType) {
    BMXGroup_MemberRoleType_GroupMember,    /// 群成员
    BMXGroup_MemberRoleType_GroupAdmin,     /// 群管理员
    BMXGroup_MemberRoleType_GroupOwner,     /// 群主
    BMXGroup_MemberRoleType_NotGroupMember  /// 非群成员
};

/**
 * @brief 群类型
 */
typedef NS_ENUM(NSInteger, BMXGroup_GroupType) {
    BMXGroup_GroupType_Private, /// 私有群组
    BMXGroup_GroupType_Public,  /// 公开群组(现在暂时没有开放次类型群组)
    BMXGroup_GroupType_Chatroom /// 聊天室
};

/**
 * @brief 入群申请状态
 */
typedef NS_ENUM(NSInteger, BMXRosterService_ApplicationStatus) {
    BMXRosterService_ApplicationStatus_Pending, /// 请求待处理
    BMXRosterService_ApplicationStatus_Accepted,/// 请求已接受
    BMXRosterService_ApplicationStatus_Declined /// 请求已拒绝
};

/**
 * @brief 好友关系
 */
typedef NS_ENUM(NSInteger, BMXRosterItem_RosterRelation) {
    BMXRosterItem_RosterRelation_Friend,    /// 好友
    BMXRosterItem_RosterRelation_Deleted,   /// 已删除
    BMXRosterItem_RosterRelation_Stranger,  /// 陌生人
    BMXRosterItem_RosterRelation_Blocked    /// 被加入黑名单
};

/**
 * @brief roster 被申请加好友时的验证方式
 */
typedef NS_ENUM(NSInteger, BMXRosterItem_AddFriendAuthMode) {
    BMXRosterItem_AddFriendAuthMode_Open,           /// 无需验证，任何人可以加为好友
    BMXRosterItem_AddFriendAuthMode_NeedApproval,   /// 需要同意方可加为好友
    BMXRosterItem_AddFriendAuthMode_AnswerQuestion, /// 需要回答问题正确方可加为好友
    BMXRosterItem_AddFriendAuthMode_RejectAll       /// 拒绝所有加好友申请
};

/**
 * @brief 对方申请加好友时的验证方式
 */
typedef NS_ENUM(NSInteger, BMXUserProfile_AddFriendAuthMode) {
    BMXUserProfile_AddFriendAuthMode_Open,          /// 无需验证，任何人可以加为好友
    BMXUserProfile_AddFriendAuthMode_NeedApproval,  /// 需要同意方可加为好友
    BMXUserProfile_AddFriendAuthMode_AnswerQuestion,/// 需要回答问题正确方可加为好友
    BMXUserProfile_AddFriendAuthMode_RejectAll      /// 拒绝所有加好友申请
};

/**
 * @brief 用户类型
 */
typedef NS_ENUM(NSInteger, BMXUserProfile_UserCategory) {
    BMXUserProfile_UserCategory_Normal, /// 普通用户
    BMXUserProfile_UserCategory_Advanced/// 高级用户
};

NSString* ObjcGetErrorMessage(BMXErrorCode errorCode);

@interface BMXMessageList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXMessage*)x;
- (BMXMessage*)get:(int)i;
- (void)set:(int)i val:(BMXMessage*)val;
- (void)dealloc;
@end

@interface TagList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(NSString*)x;
- (NSString*)get:(int)i;
- (void)set:(int)i val:(NSString*)val;
- (void)dealloc;
@end

@interface BMXConversationList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXConversation*)x;
- (BMXConversation*)get:(int)i;
- (void)set:(int)i val:(BMXConversation*)val;
- (void)dealloc;
@end

@interface BMXDeviceList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXDevice*)x;
- (BMXDevice*)get:(int)i;
- (void)set:(int)i val:(BMXDevice*)val;
- (void)dealloc;
@end

@interface BMXGroupList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXGroup*)x;
- (BMXGroup*)get:(int)i;
- (void)set:(int)i val:(BMXGroup*)val;
- (void)dealloc;
@end

@interface BMXGroupMemberList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXGroupMember*)x;
- (BMXGroupMember*)get:(int)i;
- (void)set:(int)i val:(BMXGroupMember*)val;
- (void)dealloc;
@end

@interface BMXGroupBannedMemberList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXGroupBannedMember*)x;
- (BMXGroupBannedMember*)get:(int)i;
- (void)set:(int)i val:(BMXGroupBannedMember*)val;
- (void)dealloc;
@end

@interface BMXGroupSharedFileList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXGroupSharedFile*)x;
- (BMXGroupSharedFile*)get:(int)i;
- (void)set:(int)i val:(BMXGroupSharedFile*)val;
- (void)dealloc;
@end

@interface BMXGroupAnnouncementList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXGroupAnnouncement*)x;
- (BMXGroupAnnouncement*)get:(int)i;
- (void)set:(int)i val:(BMXGroupAnnouncement*)val;
- (void)dealloc;
@end

@interface BMXRosterServiceApplicationList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXRosterServiceApplication*)x;
- (BMXRosterServiceApplication*)get:(int)i;
- (void)set:(int)i val:(BMXRosterServiceApplication*)val;
- (void)dealloc;
@end

@interface BMXGroupApplicationList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXGroupApplication*)x;
- (BMXGroupApplication*)get:(int)i;
- (void)set:(int)i val:(BMXGroupApplication*)val;
- (void)dealloc;
@end

@interface BMXGroupInvitationList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXGroupInvitation*)x;
- (BMXGroupInvitation*)get:(int)i;
- (void)set:(int)i val:(BMXGroupInvitation*)val;
- (void)dealloc;
@end

@interface ListOfLongLong : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(long long *)x;
- (long long *)get:(int)i;
- (void)set:(int)i val:(long long *)val;
- (void)dealloc;
@end

@interface BMXError : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
+ (instancetype)errorCode:(BMXErrorCode)code;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)initWithErrorCode:(BMXErrorCode)errorCode;
- (BMXErrorCode)errorCode;
- (NSString*)description;
- (void)dealloc;
@end

/**
 * @interface 设备信息
 */
@interface BMXDevice : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
/**
 * @brief 设备序列号
 * @return int
 */
- (int)deviceSN;
/**
 * @brief 用户id
 * @return long long
 */
- (long long)userId;
/**
 * @brief 软件平台
 * @return int
 */
- (int)platform;
/**
 * @brief 用户代理信息
 * @return NSString
 */
- (NSString*)userAgent;
/**
 * @brief 设置用户代理信息
 * @param userAgent 用户代理信息
 */
- (void)setUserAgent:(NSString*)userAgent;
/**
 * @brief 是否是当前设备
 * @return BOOL
 */
- (BOOL)isCurrentDevice;
- (void)dealloc;
@end

@interface BMXBaseObject : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)dealloc;
@end

/**
 * @interface SDK设置管理
 */
@interface BMXSDKConfigHostConfig : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
/**
 * @brief 构造函数
 * @param im Fireplace 服务器地址
 * @param port Fireplace 服务器端口
 * @param rest Ratel 服务基地址
 */
- (id)initWithIm:(NSString*)im port:(int)port rest:(NSString*)rest;
- (void)setImHost:(NSString*)value;
- (NSString*)getImHost;
- (void)setImPort:(int)value;
- (int)getImPort;
- (void)setRestHost:(NSString*)value;
- (NSString*)getRestHost;
- (void)dealloc;
@end

/**
 * @interface 群成员
 */
@interface BMXGroupMember : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)initWithUid:(long long)uid nickname:(NSString*)nickname createTime:(long long)createTime;
- (void)setMUid:(long long)value;
- (long long)getMUid;
- (void)setMGroupNickname:(NSString*)value;
- (NSString*)getMGroupNickname;
- (void)setMCreateTime:(long long)value;
- (long long)getMCreateTime;
- (void)dealloc;
@end

/**
 * @interface 群禁言成员
 */
@interface BMXGroupBannedMember : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setMUid:(long long)value;
- (long long)getMUid;
- (void)setMGroupNickname:(NSString*)value;
- (NSString*)getMGroupNickname;
- (void)setMCreateTime:(long long)value;
- (long long)getMCreateTime;
- (void)setMExpired:(long long)value;
- (long long)getMExpired;
- (void)dealloc;
@end

/**
 * @interface 群共享文件
 */
@interface BMXGroupSharedFile : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setMFileId:(long long)value;
- (long long)getMFileId;
- (void)setMGroupId:(long long)value;
- (long long)getMGroupId;
- (void)setMUploader:(long long)value;
- (long long)getMUploader;
- (void)setMSize:(int)value;
- (int)getMSize;
- (void)setMCreateTime:(long long)value;
- (long long)getMCreateTime;
- (void)setMUpdateTime:(long long)value;
- (long long)getMUpdateTime;
- (void)setMRatelUrl:(NSString*)value;
- (NSString*)getMRatelUrl;
- (void)setMUrl:(NSString*)value;
- (NSString*)getMUrl;
- (void)setMPath:(NSString*)value;
- (NSString*)getMPath;
- (void)setMDisplayName:(NSString*)value;
- (NSString*)getMDisplayName;
- (void)setMType:(NSString*)value;
- (NSString*)getMType;
- (void)dealloc;
@end

/**
 * @interface 群公告
 */
@interface BMXGroupAnnouncement : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setMTitle:(NSString*)value;
- (NSString*)getMTitle;
- (void)setMContent:(NSString*)value;
- (NSString*)getMContent;
- (void)setMAuthor:(long long)value;
- (long long)getMAuthor;
- (void)setMCreateTime:(long long)value;
- (long long)getMCreateTime;
- (void)setMId:(long long)value;
- (long long)getMId;
- (void)dealloc;
@end

/**
 * @interface 群邀请
 */
@interface BMXGroupInvitation : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setMGroupId:(long long)value;
- (long long)getMGroupId;
- (void)setMInviterId:(long long)value;
- (long long)getMInviterId;
- (void)setMReason:(NSString*)value;
- (NSString*)getMReason;
- (void)setMStatus:(BMXGroup_InvitationStatus)value;
- (BMXGroup_InvitationStatus)getMStatus;
- (void)setMExpired:(long long)value;
- (long long)getMExpired;
- (void)dealloc;
@end

/**
 * @interface 群申请
 */
@interface BMXGroupApplication : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setMGroupId:(long long)value;
- (long long)getMGroupId;
- (void)setMApplicationId:(long long)value;
- (long long)getMApplicationId;
- (void)setMReason:(NSString*)value;
- (NSString*)getMReason;
- (void)setMStatus:(BMXGroup_ApplicationStatus)value;
- (BMXGroup_ApplicationStatus)getMStatus;
- (void)setMExpired:(long long)value;
- (long long)getMExpired;
- (void)dealloc;
@end

/**
 * @interface 创建群组选项
 */
@interface BMXGroupServiceCreateGroupOptions : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithName:(NSString*)name description:(NSString*)description isPublic:(BOOL)isPublic isChatroom:(BOOL)isChatroom;
- (id)initWithName:(NSString*)name description:(NSString*)description isPublic:(BOOL)isPublic;
- (id)initWithName:(NSString*)name description:(NSString*)description;
- (void)setMName:(NSString*)value;
- (NSString*)getMName;
- (void)setMDescription:(NSString*)value;
- (NSString*)getMDescription;
- (void)setMIsPublic:(BOOL)value;
- (BOOL)getMIsPublic;
- (void)setMIsChatroom:(BOOL)value;
- (BOOL)getMIsChatroom;
- (void)setMMessage:(NSString*)value;
- (NSString*)getMMessage;
- (void)setMMembers:(ListOfLongLong*)value;
- (ListOfLongLong*)getMMembers;
- (void)dealloc;
@end

/**
 * @interface 图片/视频大小
 */
@interface BMXMessageAttachmentSize : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)initWithWidth:(double)width height:(double)height;
- (id)initWithWidth:(double)width;
- (id)init;
- (void)setMWidth:(double)value;
- (double)getMWidth;
- (void)setMHeight:(double)value;
- (double)getMHeight;
- (void)dealloc;
@end

/**
 * @interface Push用户Profile
 * mPushEnabled 当APP未打开时是否允许推送
 * mSilenceStartTime 推送静默起始时间
 * mSilenceEndTime 推送静默结束时间
 * mPushStartTime 允许推送起始时间
 * mPushEndTime 允许推送结束时间
 */
@interface BMXPushUserProfileMessagePushSetting : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setMPushEnabled:(BOOL)value;
- (BOOL)getMPushEnabled;
- (void)setMSilenceStartTime:(int)value;
- (int)getMSilenceStartTime;
- (void)setMSilenceEndTime:(int)value;
- (int)getMSilenceEndTime;
- (void)setMPushStartTime:(int)value;
- (int)getMPushStartTime;
- (void)setMPushEndTime:(int)value;
- (int)getMPushEndTime;
- (void)dealloc;
@end

/**
 * @interface 好友申请
 */
@interface BMXRosterServiceApplication : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setMRosterId:(long long)value;
- (long long)getMRosterId;
- (void)setMReason:(NSString*)value;
- (NSString*)getMReason;
- (void)setMStatus:(BMXRosterService_ApplicationStatus)value;
- (BMXRosterService_ApplicationStatus)getMStatus;
- (void)setMExpire:(long long)value;
- (long long)getMExpire;
- (void)dealloc;
@end

/**
 * @interface 添加好友时的校验问题
 */
@interface BMXUserProfileAuthQuestion : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setMQuestion:(NSString*)value;
- (NSString*)getMQuestion;
- (void)setMAnswer:(NSString*)value;
- (NSString*)getMAnswer;
- (void)dealloc;
@end

/**
 * @interface 用户消息设置
 * mPushEnabled   当APP未打开时是否允许推送
 * mPushDetail 是否推送消息详情
 * mPushNickname 对方收到推送消息时显示的名称
 * mNotificationSound 收到消息时是否通过声音提醒
 * mNotificationVibrate 收到消息时是否通过震动提醒
 * mAutoDownloadAttachment 收到消息时是否自动下载缩略图或者语音
 * mSilenceStartTime 推送静默起始时间
 * mSilenceEndTime 推送静默结束时间
 * mPushStartTime 允许推送起始时间
 * mPushEndTime 允许推送结束时间
 */
@interface BMXUserProfileMessageSetting : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setMPushEnabled:(BOOL)value;
- (BOOL)getMPushEnabled;
- (void)setMPushDetail:(BOOL)value;
- (BOOL)getMPushDetail;
- (void)setMPushNickname:(NSString*)value;
- (NSString*)getMPushNickname;
- (void)setMNotificationSound:(BOOL)value;
- (BOOL)getMNotificationSound;
- (void)setMNotificationVibrate:(BOOL)value;
- (BOOL)getMNotificationVibrate;
- (void)setMAutoDownloadAttachment:(BOOL)value;
- (BOOL)getMAutoDownloadAttachment;
- (void)setMSilenceStartTime:(int)value;
- (int)getMSilenceStartTime;
- (void)setMSilenceEndTime:(int)value;
- (int)getMSilenceEndTime;
- (void)setMPushStartTime:(int)value;
- (int)getMPushStartTime;
- (void)setMPushEndTime:(int)value;
- (int)getMPushEndTime;
- (void)dealloc;
@end

/**
 * @interface 创建房间参数信息
 * mRoomId 房间ID
 * mDescription 房间描述
 * mSecret 修改或者删除房间需要的密钥
 * mPin 加密房间的pin码
 * mIsPermanent 是否是永久存在的房间(默认false)
 * mIsPrivate 是否是私有的不可在列表中展示的（默认true）
 */
@interface BMXRoomCreateOptions : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)initWithRoomId:(int)roomId description:(NSString*)description secret:(NSString*)secret pin:(NSString*)pin isPermanent:(BOOL)isPermanent isPrivate:(BOOL)isPrivate;
- (id)initWithRoomId:(int)roomId description:(NSString*)description secret:(NSString*)secret pin:(NSString*)pin isPermanent:(BOOL)isPermanent;
- (id)initWithRoomId:(int)roomId description:(NSString*)description secret:(NSString*)secret pin:(NSString*)pin;
- (id)initWithRoomId:(int)roomId description:(NSString*)description secret:(NSString*)secret;
- (id)initWithRoomId:(int)roomId description:(NSString*)description;
- (id)initWithRoomId:(int)roomId;
- (id)init;
- (void)setMRoomId:(long long)value;
- (long long)getMRoomId;
- (void)setMDescription:(NSString*)value;
- (NSString*)getMDescription;
- (void)setMSecret:(NSString*)value;
- (NSString*)getMSecret;
- (void)setMPin:(NSString*)value;
- (NSString*)getMPin;
- (void)setMIsPermanent:(BOOL)value;
- (BOOL)getMIsPermanent;
- (void)setMIsPrivate:(BOOL)value;
- (BOOL)getMIsPrivate;
- (void)dealloc;
@end

/**
 * @interface 编辑房间参数信息
 * mNewDescription 新修改房间描述
 * mNewSecret 新修改房间属性所需密钥
 * mNewPin 新pin码
 * mNewIsPermanent 修改的是否是永久存在的房间属性(默认false)
 * mNewIsPrivate 修改的是否是私有的不可在列表中展示的属性（默认true）
 */
@interface BMXRoomEditOptions : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)initWithNewDescription:(NSString*)newDescription newSecret:(NSString*)newSecret newPin:(NSString*)newPin newIsPermanent:(BOOL)newIsPermanent newIsPrivate:(BOOL)newIsPrivate;
- (id)initWithNewDescription:(NSString*)newDescription newSecret:(NSString*)newSecret newPin:(NSString*)newPin newIsPermanent:(BOOL)newIsPermanent;
- (id)initWithNewDescription:(NSString*)newDescription newSecret:(NSString*)newSecret newPin:(NSString*)newPin;
- (id)initWithNewDescription:(NSString*)newDescription newSecret:(NSString*)newSecret;
- (id)initWithNewDescription:(NSString*)newDescription;
- (id)init;
- (void)setMNewDescription:(NSString*)value;
- (NSString*)getMNewDescription;
- (void)setMNewSecret:(NSString*)value;
- (NSString*)getMNewSecret;
- (void)setMNewPin:(NSString*)value;
- (NSString*)getMNewPin;
- (void)setMNewIsPermanent:(BOOL)value;
- (BOOL)getMNewIsPermanent;
- (void)setMNewIsPrivate:(BOOL)value;
- (BOOL)getMNewIsPrivate;
- (void)dealloc;
@end

/**
 * @interface allow操作参数
 * action 操作类型
 * tokens token 列表
 */
@interface BMXRoomAllowdOptions : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setAction:(AllowedAction)value;
- (AllowedAction)getAction;
- (void)setTokens:(TagList*)value;
- (TagList*)getTokens;
- (void)dealloc;
@end

/**
 * @interface modeate操作类型，主要用于房间管理员禁言/解禁其他参与者操作。
 * mUserId 操作用户id
 * mMuteAudio 是否禁音频
 * mMuteVideo 是否禁视频
 * mMuteData 是否禁数据
 */
@interface BMXRoomModerateOptions : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithUserId:(long long)userId muteAudio:(BOOL)muteAudio muteVideo:(BOOL)muteVideo muteData:(BOOL)muteData;
- (id)initWithUserId:(long long)userId muteAudio:(BOOL)muteAudio muteVideo:(BOOL)muteVideo;
- (id)initWithUserId:(long long)userId muteAudio:(BOOL)muteAudio;
- (id)initWithUserId:(long long)userId;
- (void)setMUserId:(long long)value;
- (long long)getMUserId;
- (void)setMMuteAudio:(BOOL)value;
- (BOOL)getMMuteAudio;
- (void)setMMuteVideo:(BOOL)value;
- (BOOL)getMMuteVideo;
- (void)setMMuteData:(BOOL)value;
- (BOOL)getMMuteData;
- (void)dealloc;
@end

/**
 * @interface 发布模式加入房间的参数
 * mUserId 用户id
 * mRoomId 准备加入的roomId
 * mRoomPin 准备加入的room的pin，可选
 * mDescription 用户描述，可选
 * mToken 用户token，可选
 */
@interface BMXPubRoomJoinOptions : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithUserId:(long long)userId roomId:(long long)roomId pin:(NSString*)pin description:(NSString*)description token:(NSString*)token;
- (id)initWithUserId:(long long)userId roomId:(long long)roomId pin:(NSString*)pin description:(NSString*)description;
- (id)initWithUserId:(long long)userId roomId:(long long)roomId pin:(NSString*)pin;
- (id)initWithUserId:(long long)userId roomId:(long long)roomId;
- (void)setMUserId:(long long)value;
- (long long)getMUserId;
- (void)setMRoomId:(long long)value;
- (long long)getMRoomId;
- (void)setMRoomPin:(NSString*)value;
- (NSString*)getMRoomPin;
- (void)setMDescription:(NSString*)value;
- (NSString*)getMDescription;
- (void)setMToken:(NSString*)value;
- (NSString*)getMToken;
- (void)dealloc;
@end

/**
 * @interface 房间配置参数
 * mEnableAudio 是否启用音频
 * mEnableVideo 是否启用视频
 * mEnableData 是否启用数据
 * mDisplay 用户描述
 * mWidth 视频宽度
 * mHeight 视频高度
 * mBitrate 视频帧率
 */
@interface BMXRoomPubConfigureOptions : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo width:(int)width height:(int)height bitrate:(int)bitrate enableData:(BOOL)enableData display:(NSString*)display;
- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo width:(int)width height:(int)height bitrate:(int)bitrate enableData:(BOOL)enableData;
- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo width:(int)width height:(int)height bitrate:(int)bitrate;
- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo width:(int)width height:(int)height;
- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo width:(int)width;
- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo;
- (id)initWithEnableAudio:(BOOL)enableAudio;
- (id)init;
- (void)setMEnableAudio:(BOOL)value;
- (BOOL)getMEnableAudio;
- (void)setMEnableVideo:(BOOL)value;
- (BOOL)getMEnableVideo;
- (void)setMEnableData:(BOOL)value;
- (BOOL)getMEnableData;
- (void)setMDisplay:(NSString*)value;
- (NSString*)getMDisplay;
- (void)setMWidth:(int)value;
- (int)getMWidth;
- (void)setMHeight:(int)value;
- (int)getMHeight;
- (void)setMBitrate:(int)value;
- (int)getMBitrate;
- (void)dealloc;
@end

/**
 * @interface 订阅模式加入房间参数信息
 */
@interface BMXRoomSubJoinOptions : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams privateId:(long long)privateId enableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo enableData:(BOOL)enableData autoClosePc:(BOOL)autoClosePc;
- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams privateId:(long long)privateId enableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo enableData:(BOOL)enableData;
- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams privateId:(long long)privateId enableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo;
- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams privateId:(long long)privateId enableAudio:(BOOL)enableAudio;
- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams privateId:(long long)privateId;
- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams;
- (void)setMUserId:(long long)value;
- (long long)getMUserId;
- (void)setMRoomId:(long long)value;
- (long long)getMRoomId;
- (void)setMRoomPin:(NSString*)value;
- (NSString*)getMRoomPin;
- (void)setMDescription:(NSString*)value;
- (NSString*)getMDescription;
- (void)setMToken:(NSString*)value;
- (NSString*)getMToken;
- (void)setMPrivateId:(long long)value;
- (long long)getMPrivateId;
- (void)setMEnableAudio:(BOOL)value;
- (BOOL)getMEnableAudio;
- (void)setMEnableVideo:(BOOL)value;
- (BOOL)getMEnableVideo;
- (void)setMEnableData:(BOOL)value;
- (BOOL)getMEnableData;
- (void)setMAutoClosePc:(BOOL)value;
- (BOOL)getMAutoClosePc;
- (void)setStreams:(BMXRTCStreams*)value;
- (BMXRTCStreams*)getStreams;
- (void)dealloc;
@end

/**
 * @interface 订阅模式更新房间参数信息
 * mEnableAudio 是否启用音频
 * mEnableVideo 是否启用视频
 * mEnableData 是否启用数据
 */
@interface BMXRoomSubConfigureOptions : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo enableData:(BOOL)enableData;
- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo;
- (id)initWithEnableAudio:(BOOL)enableAudio;
- (id)init;
- (void)setMEnableAudio:(BOOL)value;
- (BOOL)getMEnableAudio;
- (void)setMEnableVideo:(BOOL)value;
- (BOOL)getMEnableVideo;
- (void)setMEnableData:(BOOL)value;
- (BOOL)getMEnableData;
- (void)dealloc;
@end

/**
 * @interface 订阅模式切换媒体源
 * mFeedId 发布者的ID
 * mEnableAudio 是否启用音频
 * mEnableVideo 是否启用视频
 * mEnableData 是否启用数据
 */
@interface BMXRoomSubSwitchOptions : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithFeedId:(long long)feedId enableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo enableData:(BOOL)enableData;
- (id)initWithFeedId:(long long)feedId enableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo;
- (id)initWithFeedId:(long long)feedId enableAudio:(BOOL)enableAudio;
- (id)initWithFeedId:(long long)feedId;
- (void)setMFeedId:(long long)value;
- (long long)getMFeedId;
- (void)setMEnableAudio:(BOOL)value;
- (BOOL)getMEnableAudio;
- (void)setMEnableVideo:(BOOL)value;
- (BOOL)getMEnableVideo;
- (void)setMEnableData:(BOOL)value;
- (BOOL)getMEnableData;
- (void)dealloc;
@end

/**
 * @interface 消息附件
 */
@interface BMXMessageAttachment : BMXBaseObject
/**
 * @brief 附件类型
 * @return Type
 */
- (BMXMessageAttachment_Type)type;
- (BMXMessageAttachment*)clone;
- (void)dealloc;
@end

/**
 * @interface 消息配置
 */
@interface BMXMessageConfig : BMXBaseObject
/**
 * @brief 设置是否@全员
 * @param mentionAll
 */
- (void)setMentionAll:(BOOL)mentionAll;
/**
 * @brief 获取是否@全员
 * @return BOOL
 */
- (BOOL)getMentionAll;
/**
 * @brief 设置通知成员id列表
 * @param mentionList
 */
- (void)setMentionList:(ListOfLongLong*)mentionList;
/**
 * @brief 获取@成员列表
 * @return ListOfLongLong
 */
- (ListOfLongLong*)getMentionList;
/**
 * @brief 设置@消息
 * @param mentionedMessage
 */
- (void)setMentionedMessage:(NSString*)mentionedMessage;
/**
 * @brief 获取@消息
 * @return NSString
 */
- (NSString*)getMentionedMessage;
/**
 * @brief 设置推送消息
 * @param pushMessage
 */
- (void)setPushMessage:(NSString*)pushMessage;
/**
 * @brief 获取推送消息
 * @return NSString
 */
- (NSString*)getPushMessage;
/**
 * @brief 设置发送者昵称
 * @param senderNickname
 */
- (void)setSenderNickname:(NSString*)senderNickname;
/**
 * @brief 获取发送者昵称
 * @return NSString
 */
- (NSString*)getSenderNickname;
/**
 * @brief 设置需要群已读消息的群成员id列表
 * @param groupMemberList
 */
- (void)setGroupMemberList:(ListOfLongLong*)groupMemberList;
/**
 * @brief 获取需要群已读消息的群成员id列表
 * @return ListOfLongLong
 */
- (ListOfLongLong*)getGroupMemberList;
/**
 * @brief 添加群已读消息的群成员id列表成员
 */
- (void)addGroupMemberWithMemberId:(long long)memberId;
/**
 * @brief 清除需要群已读消息的群成员id列表成员
 * @return ListOfLongLong
 */
- (void)removeGroupMemberWithMemberId:(long long)memberId;
/**
 * @brief 清空群已读消息的群成员id列表
 */
- (void)clearGroupMemberList;
/**
 * @brief 设置IOS系统配置信息
 * @param iosConfig
 */
- (void)setIOSConfig:(NSString*)iosConfig;
/**
 * @brief 获取IOS系统配置信息
 * @return NSString
 */
- (NSString*)getIOSConfig;
/**
 * @brief 设置Android系统配置信息
 * @param androidConfig
 */
- (void)setAndroidConfig:(NSString*)androidConfig;
/**
 * @brief 获取Android系统配置信息
 * @return NSString
 */
- (NSString*)getAndroidConfig;
/**
 * @brief 设置推送显示开始时间
 * @param beginTime
 */
- (void)setPushShowBeginTime:(int)beginTime;
/**
 * @brief 获取推送显示开始时间
 * @return int
 */
- (int)getPushShowBeginTime;
/**
 * @brief 设置推送显示结束时间
 * @param endTime
 */
- (void)setPushShowEndTime:(int)endTime;
/**
 * @brief 获取推送显示结束时间
 * @return int
 */
- (int)getPushShowEndTime;
/**
 * @brief 设置推送标题
 * @param pushTitle
 */
- (void)setPushTitle:(NSString*)pushTitle;
/**
 * @brief 获取推送标题
 * @return NSString
 */
- (NSString*)getPushTitle;
/**
 * @brief 设置推送标题多语言键名
 * @param pushTitleLocKey
 */
- (void)setPushTitleLocKey:(NSString*)pushTitleLocKey;
/**
 * @brief 获取推送标题多语言键名
 * @return NSString
 */
- (NSString*)getPushTitleLocKey;
/**
 * @brief 设置推送标题多语言参数
 * @param pushTitleLocArgs
 */
- (void)setPushTitleLocArgs:(NSString*)pushTitleLocArgs;
/**
 * @brief 获取推送标题多语言参数
 * @return NSString
 */
- (NSString*)getPushTitleLocArgs;
/**
 * @brief 设置推送正文多语言键名
 * @param pushMessageLocKey
 */
- (void)setPushMessageLocKey:(NSString*)pushMessageLocKey;
/**
 * @brief 获取推送正文多语言键名
 * @return NSString
 */
- (NSString*)getPushMessageLocKey;
/**
 * @brief 设置推送正文多语言参数
 * @param pushMessageLocArgs
 */
- (void)setPushMessageLocArgs:(NSString*)pushMessageLocArgs;
/**
 * @brief 获取推送正文多语言参数
 * @return NSString
 */
- (NSString*)getPushMessageLocArgs;
/**
 * @brief 获取当前的推送消息是否是静默消息
 * @return BOOL
 */
- (BOOL)isSilence;
/**
 * @brief 获取当前的推送消息中badge计数
 * @return BadgeCountType
 */
- (BMXMessageConfig_BadgeCountType)getBadgeCountType;
/**
 * @brief 获取当前的推送消息中badge计数
 * @return int
 */
- (int)getBadgeCount:(int)count;
/**
 * @brief 设置用户名
 * @param username
 */
- (void)setUsername:(NSString*)username;
/**
 * @brief 获得用户名
 * @return NSString
 */
- (NSString*)getUsername;
/**
 * @brief 设置呼叫消息信息
 * @param calltype 通话类型（语音电话、视频电话）
 * @param roomId 房间id
 * @param initiator 发起者id
 * @param roomType 房间类型（会议模式，直播模式）
 * @param pin 加入房间的pin码
 */
- (void)setRTCCallInfo:(BMXMessageConfig_RTCCallType)calltype roomId:(long long)roomId initiator:(long long)initiator roomType:(BMXMessageConfig_RTCRoomType)roomType pin:(NSString*)pin;
/**
 * @brief 设置接通消息信息
 * @param callId 通话id
 */
- (void)setRTCPickupInfo:(NSString*)callId;
/**
 * @brief 设置挂断消息信息
 * @param callId 通话id
 */
- (void)setRTCHangupInfo:(NSString*)callId peerDrop:(BOOL)peerDrop;
/**
 * @brief 获得RTC相关操作类型信息（呼叫、接通、挂断等）。
 * @return int
 */
- (NSString*)getRTCAction;
/**
 * @brief 获得RTC相关通话类型（音频通话、视频通话类型）。
 * @return RTCCallType
 */
- (BMXMessageConfig_RTCCallType)getRTCCallType;
/**
 * @brief 获得RTC相关房间id信息。
 * @return long long
 */
- (long long)getRTCRoomId;
/**
 * @brief 获得RTC相关发起者id信息。
 * @return long long
 */
- (long long)getRTCInitiator;
/**
 * @brief 获得RTC相关callId信息。
 * @return NSString
 */
- (NSString*)getRTCCallId;
/**
 * @brief 获得RTC相关房间类型信息。
 * @return BMXMessageConfig_RTCRoomType
 */
- (BMXMessageConfig_RTCRoomType)getRTCRoomType;
/**
 * @brief 获得RTC相关pin码信息。
 * @return NSString
 */
- (NSString*)getRTCPin;
/**
 * @brief 是否对方异常退出。
 * @return BOOL
 */
- (BOOL)isPeerDrop;
/**
 * @brief 序列化操作
 * @return NSString
 */
- (NSString*)serialize;
+ (BMXMessageConfig*)createMessageConfigWithMentionAll:(BOOL)mentionAll;
- (void)dealloc;
@end

/**
 * @interface 消息
 */
@interface BMXMessage : BMXBaseObject
/**
 * @brief 消息唯一ID
 * @return long long
 */
- (long long)msgId;
/**
 * @brief 消息客户端ID,仅在消息发送端存在
 * @return long long
 */
- (long long)clientMsgId;
/**
 * @brief 消息发送方ID
 * @return long long
 */
- (long long)fromId;
/**
 * @brief 消息接收方ID
 * @return long long
 */
- (long long)toId;
/**
 * @brief 消息类型
 * @return BMXMessage_MessageType
 */
- (BMXMessage_MessageType)type;
/**
 * @brief 消息所属会话ID
 * @return long long
 */
- (long long)conversationId;
/**
 * @brief 消息投递状态
 * @return BMXMessage_DeliveryStatus
 */
- (BMXMessage_DeliveryStatus)deliveryStatus;
/**
 * @brief 设置消息投递状态
 */
- (void)setDeliveryStatus:(BMXMessage_DeliveryStatus)arg1;
/**
 * @brief 消息时间戳（服务端收到时的时间）
 * @return long long
 */
- (long long)serverTimestamp;
/**
 * @brief 设置时间戳（服务端收到时的时间）
 */
- (void)setServerTimestamp:(long long)arg1;
/**
 * @brief 本地时间戳（消息创建或者收到时的本地时间）
 * @return long long
 */
- (long long)clientTimestamp;
/**
 * @brief 设置消息本地时间戳
 */
- (void)setClientTimestamp:(long long)arg1;
/**
 * @brief 语音或者视频消息是否播放过，仅对收到的音视频消息有效
 * @return BOOL
 */
- (BOOL)isPlayed;
/**
 * @brief 设置语音或者视频消息是否播放过，仅对收到的音视频消息有效
 */
- (void)setIsPlayed:(BOOL)arg1;
/**
 * @brief 对于发送方表示是否收到了已播放回执，对于接收方表示是否发送了已播放回执
 * @return BOOL
 */
- (BOOL)isPlayAcked;
/**
 * @brief 设置已播放回执
 */
- (void)setIsPlayAcked:(BOOL)arg1;
/**
 * @brief 是否接收的消息
 * @return BOOL
 */
- (BOOL)isReceiveMsg;
/**
 * @brief 设置是否接收的消息
 */
- (void)setIsReceiveMsg:(BOOL)arg1;
/**
 * @brief 消息是否已读标志
 * @return BOOL
 */
- (BOOL)isRead;
/**
 * @brief 消息是否已读标志
 */
- (void)setIsRead:(BOOL)arg1;
/**
 * @brief 对于发送方表示是否收到了已读回执，对于接收方表示是否发送了已读回执
 * @return BOOL
 */
- (BOOL)isReadAcked;
/**
 * @brief 设置已读回执
 */
- (void)setIsReadAcked:(BOOL)arg1;
/**
 * @brief 对于发送方表示消息是否已投递到对方，对于接收方表示是否发送了消息已到达回执
 * @return BOOL
 */
- (BOOL)isDeliveryAcked;
/**
 * @brief 设置投递回执
 */
- (void)setIsDeliveryAcked:(BOOL)arg1;
/**
 * @brief 消息文本内容
 * @return NSString
 */
- (NSString*)content;
/**
 * @brief 消息文本内容
 * @param content 消息文本内容
 */
- (void)setContent:(NSString*)content;
/**
 * @brief 消息内容类型，如果带附件就表示附件类型，不带附件就是文本类型
 * @return ContentType
 */
- (BMXMessage_ContentType)contentType;
/**
 * @brief 消息附件，BMXMessage拥有附件的所有权，负责释放
 * @return BMXMessageAttachment
 */
- (BMXMessageAttachment*)attachment;
/**
 * @brief 消息的配置信息
 * @return BMXMessageConfig
 */
- (BMXMessageConfig*)config;
/**
 * @brief 设置消息配置信息
 */
- (void)setConfig:(BMXMessageConfig*)arg1;
/**
 * @brief 消息扩展信息
 * @return NSString
 */
- (NSString*)extension;
/**
 * @brief 设置消息扩展信息
 */
- (void)setExtension:(NSString*)arg1;
/**
 * @brief 消息投递QOS
 * @return BMXMessage_DeliveryQos
 */
- (BMXMessage_DeliveryQos)deliveryQos;
/**
 * @brief 设置消息投递QOS
 * @param qos 消息投递QOS
 */
- (void)setDeliveryQos:(BMXMessage_DeliveryQos)qos;
/**
 * @brief 消息发送者的显示名称
 * @return NSString
 */
- (NSString*)senderName;
/**
 * @brief 设置消息的发送者显示名称
 * @param senderName 消息文本内容
 */
- (void)setSenderName:(NSString*)senderName;
/**
 * @brief 群消息已读AckCount数目
 * @return int
 */
- (int)groupAckCount;
/**
 * @brief 设置消息已读groupAckCount数目(SDK 内部调用接口，上层不应该调用)
 * @param count 设置群消息已读数目
 */
- (void)setGroupAckCount:(int)count;
/**
 * @brief 群消息未读AckCount数目
 * @return int
 */
- (int)groupAckUnreadCount;
/**
 * @brief 设置消息未读groupAckCount数目(SDK 内部调用接口，上层不应该调用)
 * @param count 设置群消息未读数目
 */
- (void)setGroupAckUnreadCount:(int)count;
/**
 * @brief 群消息是否全部已读
 * @return BOOL
 */
- (BOOL)groupAckReadAll;
/**
 * @brief 群消息已播放AckCount数目（仅用于音频/视频附件消息）
 * @return int
 */
- (int)groupPlayAckCount;
/**
 * @brief 设置消息已播放groupAckCount数目(SDK 内部调用接口，上层不应该调用)（仅用于音频/视频附件消息）
 * @param count 设置群消息已读数目
 */
- (void)setGroupPlayAckCount:(int)count;
/**
 * @brief 群消息未播放AckCount数目（仅用于音频/视频附件消息）
 * @return int
 */
- (int)groupPlayAckUnreadCount;
/**
 * @brief 设置消息未播放groupAckCount数目(SDK 内部调用接口，上层不应该调用)（仅用于音频/视频附件消息）
 * @param count 设置群消息未播放数目
 */
- (void)setGroupPlayAckUnreadCount:(int)count;
/**
 * @brief 群消息是否全部已播放
 * @return BOOL
 */
- (BOOL)groupPlayAckReadAll;
/**
 * @brief 设置消息的扩散优先级，默认为0。0表示扩散，数字越小扩散的越多。
 * @brief 取值范围0-10。普通人在聊天室发送的消息级别默认为5，可以丢弃。管理员默认为0不会丢弃。其它值可以根据业务自行设置。
 * @param priority 优先级
 */
- (void)setPriority:(int)priority;
/**
 * @brief 消息的扩散优先级
 * @return int
 */
- (int)priority;
/**
 * @brief 设置消息是否为推送消息。
 */
- (void)setPushMessageMode:(BOOL)arg1;
/**
 * @brief 消息是否是推送消息
 * @return BOOL
 */
- (BOOL)isPushMessage;

/**
 * @brief 设置追加内容
 * @param appendContent 消息追加内容
 */
- (void)setAppendedContent:(NSString*)appendContent;

/**
 * @brief 消息追加内容
 * @return std::string
 */
- (NSString*)appendedContent;

/**
 * @brief 设置替换内容
 * @param replaceContent 消息替换内容
 */
- (void)setReplaceContent:(NSString*)replaceContent;

/**
 * @brief 消息替换内容
 * @return std::string
 */
- (NSString*)replaceContent;

/**
 * @brief 设置替换config配置
 */
- (void)setReplaceConfig:(BMXMessageConfig*)config;

/**
 * @brief 消息替换config配置
 */
- (BMXMessageConfig*)replaceConfig;

/**
 * @brief 设置替换extension配置
 */
- (void)setReplaceExtension:(NSString*)ext;

/**
 * @brief 消息替换extension配置
 */
- (NSString*)replaceExtension;

/**
 * @brief 设置编辑时间戳（服务端收到时的时间）
 */
- (void)setEditTimestamp:(long long)timestamp;
/**
 * @brief 消息编辑追加或替换发生时间
 */
- (long long)editTimestamp;

/**
 * @brief 创建发送文本消息
 * @param from 消息发送者
 * @param to 消息接收者
 * @param type 消息类型
 * @param conversationId 会话id
 * @param content 消息内容
 */
+ (BMXMessage*)createMessageWithFrom:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content;
/**
 * @brief 创建发送附件消息
 * @param from 消息发送者
 * @param to 消息接收者
 * @param type 消息类型
 * @param conversationId 会话id
 * @param attachment 附件
 */
+ (BMXMessage*)createMessageWithFrom:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId attachment:(BMXMessageAttachment*)attachment;
/**
 * @brief 创建发送命令消息(命令消息通过content字段或者extension字段存放命令信息)
 * @param from 消息发送者
 * @param to 消息接收者
 * @param type 消息类型
 * @param conversationId 会话id
 * @param content 消息内容
 */
+ (BMXMessage*)createCommandMessageWithFrom:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content;
/**
 * @brief 创建发送RTC消息
 * @param from 消息发送者
 * @param to 消息接收者
 * @param type 消息类型
 * @param conversationId 会话id
 * @param content 消息内容
 */
+ (BMXMessage*)createRTCMessageWithFrom:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content;
/**
 * @brief 创建收到的消息
 * @param msgId 消息id
 * @param from 消息发送者
 * @param to 消息接收者
 * @param type 消息类型
 * @param conversationId 会话id
 * @param content 消息内容
 * @param serverTimestamp 服务器时间戳
 */
+ (BMXMessage*)createMessageWithMsgId:(long long)msgId from:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content serverTimestamp:(long long)serverTimestamp;
/**
 * @brief 创建收到的消息
 * @param msgId 消息id
 * @param from 消息发送者
 * @param to 消息接收者
 * @param type 消息类型
 * @param conversationId 会话id
 * @param attachment 附件
 * @param serverTimestamp 服务器时间戳
 */
+ (BMXMessage*)createMessageWithMsgId:(long long)msgId from:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId attachment:(BMXMessageAttachment*)attachment serverTimestamp:(long long)serverTimestamp;
/**
 * @brief 创建收到的命令消息(命令消息通过content字段或者extension字段存放命令信息)
 * @param msgId 消息id
 * @param from 消息发送者
 * @param to 消息接收者
 * @param type 消息类型
 * @param conversationId 会话id
 * @param content 消息内容
 * @param serverTimestamp 服务器时间戳
 */
+ (BMXMessage*)createCommandMessageWithMsgId:(long long)msgId from:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content serverTimestamp:(long long)serverTimestamp;
/**
 * @brief 创建收到的RTC消息
 * @param msgId 消息id
 * @param from 消息发送者
 * @param to 消息接收者
 * @param type 消息类型
 * @param conversationId 会话id
 * @param content 消息内容
 * @param serverTimestamp 服务器时间戳
 */
+ (BMXMessage*)createRTCMessageWithMsgId:(long long)msgId from:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content serverTimestamp:(long long)serverTimestamp;
/**
 * @brief 创建转发消息
 * @param msg 要转发的消息
 * @param from 消息发送者
 * @param to 消息接收者
 * @param type 消息类型
 * @param conversationId 会话id
 */
+ (BMXMessage*)createForwardMessageWithMsg:(BMXMessage*)msg from:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId;
- (void)dealloc;
@end

/**
 * @interface 会话
 */
@interface BMXConversation : BMXBaseObject
/**
 * @brief 会话Id
 * @return long long
 */
- (long long)conversationId;
/**
 * @brief 会话类型
 * @return BMXConversation_Type
 */
- (BMXConversation_Type)type;
/**
 * @brief 最新消息
 * @return BMXMessage
 */
- (BMXMessage*)lastMsg;
/**
 * @brief 未读消息数
 * @return int
 */
- (int)unreadNumber;
/**
 * @brief 会话中所有消息的数量
 * @return int
 */
- (int)messageCount;
/**
 * @brief 是否提醒用户消息,不提醒的情况下会话总未读数不会统计该会话计数。
 * @return BOOL
 */
- (BOOL)isMuteNotification;
/**
 * @brief 扩展信息
 * @return NSString
 */
- (NSString*)extension;
/**
 * @brief 设置扩展信息
 * @param ext 会话扩展消息
 * @return BMXErrorCode
 */
- (BMXErrorCode)setExtension:(NSString*)ext;
/**
 * @brief 编辑消息
 * @return NSString
 */
- (NSString*)editMessage;
/**
 * @brief 设置编辑消息
 * @param editMessage 会话正在编辑的文本消息
 * @return BMXErrorCode
 */
- (BMXErrorCode)setEditMessage:(NSString*)editMessage;
/**
 * @brief 设置消息播放状态（只对语音/视频消息有效）
 * @param msg 需要设置播放状态的消息
 * @param status 消息是否已经播放
 * @return BMXErrorCode
 */
- (BMXErrorCode)setMessagePlayedStatus:(BMXMessage*)msg status:(BOOL)status;
/**
 * @brief 设置消息未读状态，更新未读消息数
 * @param msg 需要设置消息已读状态的消息
 * @param status 消息是否设置已读
 * @return BMXErrorCode
 */
- (BMXErrorCode)setMessageReadStatus:(BMXMessage*)msg status:(BOOL)status;
/**
 * @brief 把所有消息设置为已读，更新未读消息数
 * @return BMXErrorCode
 */
- (BMXErrorCode)setAllMessagesRead;
/**
 * @brief 更新一条数据库存储消息的扩展字段信息
 * @param msg 需要更改扩展信息的消息此时msg部分已经更新扩展字椴信息
 * @return BMXErrorCode
 */
- (BMXErrorCode)updateMessageExtensionWithMsg:(BMXMessage*)msg;
/**
 * @brief 插入一条消息
 * @param msg 插入的消息
 * @return BMXErrorCode
 */
- (BMXErrorCode)insertMessageWithMsg:(BMXMessage*)msg;
/**
 * @brief 读取一条消息
 * @param msgId 需要读取的消息的消息id
 * @return BMXMessage
 */
- (BMXMessage*)loadMessageWithMsgId:(long long)msgId;
/**
 * @brief 删除会话中的所有消息
 * @return BMXErrorCode
 */
- (BMXErrorCode)removeAllMessages;
/**
 * @brief 加载消息，如果不指定则从最新消息开始
 * @param refMsgId 加载消息的起始id
 * @param size 最大加载消息条数
 * @param result 数据库返回的加载消息列表
 * @param Direction 加载消息的方向，默认是加载更早的消息
 * @return BMXErrorCode
 */
- (BMXErrorCode)loadMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size result:(BMXMessageList*)result arg4:(BMXConversation_Direction)arg4;
- (BMXErrorCode)loadMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size result:(BMXMessageList*)result;
/**
 * @brief 搜索消息，如果不指定则从最新消息开始
 * @param keywords 搜索消息的关键字
 * @param refTime 搜索消息的起始时间
 * @param size 最大加载消息条数
 * @param result 搜索到的消息结果列表
 * @param arg5 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
 * @return BMXErrorCode
 */
- (BMXErrorCode)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageList*)result arg5:(BMXConversation_Direction)arg5;
- (BMXErrorCode)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageList*)result;
/**
 * @brief 按照类型搜索消息，如果不指定则从最新消息开始
 * @param type 搜索消息的类型
 * @param refTime 搜索消息的起始时间
 * @param size 最大加载消息条数
 * @param result 搜索到的消息结果列表
 * @param Direction 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
 * @return BMXErrorCode
 */
- (BMXErrorCode)searchMessagesByTypeWithType:(BMXMessage_ContentType)type refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageList*)result arg5:(BMXConversation_Direction)arg5;
- (BMXErrorCode)searchMessagesByTypeWithType:(BMXMessage_ContentType)type refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageList*)result;
/**
 * @brief 读取数据库当前会话所有消息数量，强制更新conversation的消息总数和未读消息数。
 * @return BMXErrorCode
 */
- (BMXErrorCode)refreshConversation;
/**
 * @brief 设置消息播放状态（只对语音/视频消息有效）
 * @param msg 需要设置播放状态的消息
 * @param status 消息是否已经播放
 * @return BMXErrorCode
 */
- (void)setMessagePlayedStatus:(BMXMessage*)msg status:(BOOL)status completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 设置消息未读状态，更新未读消息数
 * @param msg 需要设置消息已读状态的消息
 * @param status 消息是否设置已读
 * @return BMXErrorCode
 */
- (void)setMessageReadStatus:(BMXMessage*)msg status:(BOOL)status completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 把所有消息设置为已读，更新未读消息数
 * @return BMXErrorCode
 */
- (void)setAllMessagesReadWithCompletion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 更新一条数据库存储消息的扩展字段信息
 * @param msg 需要更改扩展信息的消息此时msg部分已经更新扩展字椴信息
 * @return BMXErrorCode
 */
- (void)updateMessageExtensionWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 插入一条消息
 * @param msg 插入的消息
 * @return BMXErrorCode
 */
- (void)insertMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 读取一条消息
 * @param msgId 需要读取的消息的消息id
 * @return BMXMessage
 */
- (void)loadMessageWithMsgId:(long long)msgId completion:(void (^)(BMXMessage *res, BMXError *aError)) resBlock;
/**
 * @brief 删除会话中的所有消息
 * @return BMXErrorCode
 */
- (void)removeAllMessagesWithCompletion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 加载消息，如果不指定则从最新消息开始
 * @param refMsgId 加载消息的起始id
 * @param size 最大加载消息条数
 * @param result 数据库返回的加载消息列表
 * @param Direction 加载消息的方向，默认是加载更早的消息
 * @return BMXErrorCode
 */
- (void)loadMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size arg4:(BMXConversation_Direction)arg4 completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock;
/**
 * @brief 搜索消息，如果不指定则从最新消息开始
 * @param keywords 搜索消息的关键字
 * @param refTime 搜索消息的起始时间
 * @param size 最大加载消息条数
 * @param result 搜索到的消息结果列表
 * @param Direction 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
 * @return BMXErrorCode
 */
- (void)loadMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock;
/**
 * Deprecated. use searchMessagesByKeyWords instead.
 * @brief 搜索消息，如果不指定则从最新消息开始
 * @param keywords 搜索消息的关键字
 * @param refTime 搜索消息的起始时间
 * @param size 最大加载消息条数
 * @param result 搜索到的消息结果列表
 * @param Direction 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
 * @return BMXErrorCode
 */
- (void)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size arg5:(BMXConversation_Direction)arg5 completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock;
- (void)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock;
/**
 * @brief 按照类型搜索消息，如果不指定则从最新消息开始
 * @param type 搜索消息的类型
 * @param refTime 搜索消息的起始时间
 * @param size 最大加载消息条数
 * @param result 搜索到的消息结果列表
 * @param Direction 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
 * @return BMXErrorCode
 */
- (void)searchMessagesByTypeWithType:(BMXMessage_ContentType)type refTime:(long long)refTime size:(unsigned long)size arg5:(BMXConversation_Direction)arg5 completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock;
- (void)searchMessagesByTypeWithType:(BMXMessage_ContentType)type refTime:(long long)refTime size:(unsigned long)size completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock;
/**
 * @brief 读取数据库当前会话所有消息数量，强制更新conversation的消息总数和未读消息数。
 * @return BMXErrorCode
 */
- (void)refreshConversationWithCompletion:(void (^)(BMXError *aError)) resBlock;

- (void)dealloc;
@end

/**
 * @interface SDK设置管理
 */
@interface BMXSDKConfig : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
/**
 * @brief 构造函数
 * @param type 客户端类型
 * @param vsn 客户端OS版本
 * @param dataDir 聊天数据存储路径
 * @param cacheDir 缓存数据存储路径
 * @param SDKVersion SDK版本
 * @param pushCertName Push证书名字
 * @param userAgent 用户代理信息
 * @param deliveryAck 是否发送消息送达回执
 */
- (id)initWithType:(BMXClientType)type vsn:(NSString*)vsn dataDir:(NSString*)dataDir cacheDir:(NSString*)cacheDir sDKVersion:(NSString*)SDKVersion pushCertName:(NSString*)pushCertName userAgent:(NSString*)userAgent deliveryAck:(BOOL)deliveryAck;
- (id)initWithType:(BMXClientType)type vsn:(NSString*)vsn dataDir:(NSString*)dataDir cacheDir:(NSString*)cacheDir sDKVersion:(NSString*)SDKVersion pushCertName:(NSString*)pushCertName userAgent:(NSString*)userAgent;
/**
 * @brief 构造函数
 * @param type 客户端类型
 * @param vsn 客户端OS版本
 * @param dataDir 聊天数据存储路径
 * @param cacheDir 缓存数据存储路径
 * @param SDKVersion SDK版本
 * @param pushCertName Push证书名字
 * @param userAgent 用户代理信息
 * @param appId 用户的appId
 * @param appSecret 用户的appSecret（对于使用推送的用户，必须同时设置appId和appSecret）
 * @param deliveryAck 是否发送消息送达回执
 */
- (id)initWithType:(BMXClientType)type vsn:(NSString*)vsn dataDir:(NSString*)dataDir cacheDir:(NSString*)cacheDir sDKVersion:(NSString*)SDKVersion pushCertName:(NSString*)pushCertName userAgent:(NSString*)userAgent appId:(NSString*)appId appSecret:(NSString*)appSecret deliveryAck:(BOOL)deliveryAck;
- (id)initWithType:(BMXClientType)type vsn:(NSString*)vsn dataDir:(NSString*)dataDir cacheDir:(NSString*)cacheDir sDKVersion:(NSString*)SDKVersion pushCertName:(NSString*)pushCertName userAgent:(NSString*)userAgent appId:(NSString*)appId appSecret:(NSString*)appSecret;
/**
 * @brief 获取聊天数据存储路径，包含消息、附件等
 * @return NSString
 */
- (NSString*)getDataDir;
/**
 * @brief 获取缓存数据存储路径，比如用户头像
 * @return NSString
 */
- (NSString*)getCacheDir;
/**
 * @brief 客户端类型
 * @return BMXClientType
 */
- (BMXClientType)getClientType;
/**
 * @brief 客户端OS版本
 * @return NSString
 */
- (NSString*)getVsn;
/**
 * @brief SDK版本
 * @return NSString
 */
- (NSString*)getSDKVersion;
/**
 * @brief 获取Push证书名字
 * @return NSString
 */
- (NSString*)getPushCertName;
/**
 * @brief 设置Push证书名字
 * @return NSString
 */
- (void)setPushCertName:(NSString*)arg1;
/**
 * @brief 获取用户代理信息
 * @return NSString
 */
- (NSString*)getUserAgent;
/**
 * @brief 发送消息的config中是否携带
 * @return BOOL
 */
- (BOOL)carryUsernameInMessage;
/**
 * @brief 设置发送消息的config中是否携带用户名
 * @param bool 设置是否在送消息的config中携带用户名
 */
- (void)setCarryUsernameInMessage:(BOOL)arg1;
/**
 * @brief 是否发送消息送达回执
 * @return BOOL
 */
- (BOOL)enableDeliveryAck;
/**
 * @brief 设置是否发送消息送达回执
 * @param bool 是否发送消息送达回执
 */
- (void)setEnableDeliveryAck:(BOOL)arg1;
/**
 * @brief Log输出等级
 * @return BMXLogLevel
 */
- (BMXLogLevel)getLogLevel;
/**
 * @brief 设置Log输出等级
 * @param BMXLogLevel Log输出等级
 */
- (void)setLogLevel:(BMXLogLevel)arg1;
/**
 * @brief Log是否输出到Console
 * @return BOOL
 */
- (BOOL)getConsoleOutput;
/**
 * @brief 设置Log是否输出到Console
 * @param bool 设置Log是否输出到Console
 */
- (void)setConsoleOutput:(BOOL)arg1;
/**
 * @brief 设置服务器配置
 * @param config 服务器配置
 */
- (void)setHostConfig:(BMXSDKConfigHostConfig*)config;
/**
 * @brief 获取服务器配置
 * @return BMXSDKConfigHostConfig
 */
- (BMXSDKConfigHostConfig*)getHostConfig;
/**
 * @brief 是否根据服务器返回未读列表创建所有会话.
 * @return BOOL
 */
- (BOOL)getLoadAllServerConversations;
/**
 * @brief 是否根据服务器返回未读列表创建所有会话，默认为false，只会创建有未读消息的会话。
 * @param enable 是否根据服务器返回未读列表创建所有会话
 */
- (void)setLoadAllServerConversations:(BOOL)enable;
- (void)setLoadAllServerConversations;
/**
 * @brief 获取设备的唯一识别码
 * @return NSString
 */
- (NSString*)getDeviceUuid;
/**
 * @brief 设置设备的唯一识别码，在app卸载之前应该始终保持一致，app删除后再次安装时可以产生不同的设备识别码。
 * @param uuid 设备的唯一识别码。
 */
- (void)setDeviceUuid:(NSString*)uuid;
/**
 * @brief 获取设备的本地数据库加密密钥。
 * @return NSString
 */
- (NSString*)getDBCryptoKey;
/**
 * @brief 设置本地数据库的加密密钥，在app卸载之前应该始终保持一直，app删除后再次安装时可以产生不同的密钥。用于本地数据库加密。
 * @param cryptoKey 本地数据库的加密密钥。
 */
- (void)setDBCryptoKey:(NSString*)cryptoKey;
/**
 * @brief 获取https请求是否验证服务器端证书。
 * @return BOOL
 */
- (BOOL)getVerifyCertificate;
/**
 * 设置https请求是否验证服务器端证书。
 * @param verify https请求是否验证服务器端证书
 */
- (void)setVerifyCertificate:(BOOL)verify;
- (void)setVerifyCertificate;
/**
 * @brief 获取是否启用dns功能。
 * @return BOOL
 */
- (BOOL)getEnableDNS;
/**
 * @brief 设置是否启用dns功能，默认是开启的。
 * @param enable 是否启用dns功能
 */
- (void)setEnableDNS:(BOOL)enable;
- (void)setEnableDNS;
/**
 * @brief 获取用户自定义dns服务器地址。
 * @return NSString
 */
- (NSString*)getUserDNSAddress;
/**
 * @brief 设置用户自定义dns服务器地址，在用户设置了dns服务器的情况下优先使用用户dns。
 * @param dns 用户自定义dns服务器地址
 */
- (void)setUserDNSAddress:(NSString*)dns;
/**
 * @brief 获取用户的appID。
 * @return NSString
 */
- (NSString*)getAppID;
/**
 * @brief 设置用户的appID。
 * @param appID 用户的appID
 */
- (void)setAppID:(NSString*)appID;
/**
 * @brief 获取用户的appSecret。
 * @return NSString
 */
- (NSString*)getAppSecret;
/**
 * @brief 设置用户的appSecret。
 * @param appID 用户的appSecret
 */
- (void)setAppSecret:(NSString*)appSecret;
/**
 * @brief 获取用户的推送提供商类型。
 * @return BMXPushProviderType
 */
- (BMXPushProviderType)getPushProviderType;
/**
 * @brief 设置用户的推送提供商类型。
 * @param type 用户的推送提供商类型
 */
- (void)setPushProviderType:(BMXPushProviderType)type;
/**
 * @brief 获取用户的推送环境类型。
 * @return BMXPushEnvironmentType
 */
- (BMXPushEnvironmentType)getPushEnvironmentType;
/**
 * @brief 设置用户的推送环境类型。
 * @param type 用户的推送环境类型
 */
- (void)setEnvironmentType:(BMXPushEnvironmentType)type;
/**
 * @brief 获取调试log接收着账号(仅用于SDK调试，接收客户端log日志使用)
 * @return long long
 */
- (long long)getDebugLogReceiverId;
/**
 * @brief 设置调试log接收账号(仅用于SDK调试，接收客户端log日志使用)
 * @param uid 调试log接收者id
 */
- (void)setDebugLogReceiverId:(long long)uid;
- (void)dealloc;
@end

@interface BMXNetworkListener : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (void)onNetworkChangedWithType:(BMXNetworkType)type reconnect:(BOOL)reconnect;
- (void)dealloc;
@end

/**
 * @protocol 推送服务监听者
 */
@protocol BMXPushServiceProtocol <NSObject>
@optional
/// Push初始化完成通知。
/// @param bmxToken bmxToken
- (void)pushStartDidFinished:(NSString *)bmxToken;

/// Push功能停止通知。
- (void)pushStartDidStopped;

/// Push初始化完成后获取推送证书。
/// @param certification 推送证书
- (void)certRetrieved:(NSString *)certification;

/// 设置用户推送标签成功回调。
/// @param operationId 操作id
- (void)setTagsDidFinished:(NSString *)operationId;

/// 获取用户推送标签成功回调。
/// @param operationId 操作id
- (void)getTagsDidFinished:(NSString *)operationId;

/// 删除用户推送标签成功回调
/// @param operationId 操作id
- (void)deleteTagsDidFinished:(NSString *)operationId;

/// 清空用户推送成功回调。
/// @param operationId 操作id
- (void)clearedTags:(NSString *)operationId;

/// 接收到新的Push通知
/// @param messages Push通知列表
- (void)receivedPush:(NSArray<BMXMessage *> *)messages;

/// 发送Push上行消息状态变化通知。
/// @param message 发生状态变化的上行消息
/// @param error 状态错误码
- (void)pushMessageStatusChanged:(BMXMessage *)message error:(BMXError *)error;

@end

/**
 * @protocol 用户服务监听者
 */
@protocol BMXUserServiceProtocol <NSObject>
@optional
/**
 @brief 链接状态发生变化
 @param status 连接状态
 */
- (void)connectStatusDidChanged:(BMXConnectStatus)status;

/**
 @brief 用户登陆
 @param userProflie 用户信息
 */
- (void)userSignIn:(BMXUserProfile *)userProflie;


/**
 @brief 用户登出
 @param error 错误码
 */
- (void)userSignOut:(BMXError *)error userId:(long long)userId;

/**
 * 同步用户信息更新（其他设备操作发生用户信息变更）
 **/
- (void)userInfoDidUpdated:(BMXUserProfile *)userProflie;

/**
 * 用户在其他设备上登陆
 **/
- (void)userOtherDeviceDidSignIn:(NSInteger)deviceSN;

/**
 * 用户在其他设备上登出
 **/
- (void)userOtherDeviceDidSignOut:(NSInteger)deviceSN;

@end


/**
 * @protocol 群组服务监听者
 */
@protocol BMXGroupServiceProtocol <NSObject>

/**
 * 多设备同步创建群组
 **/
- (void)groupDidCreated:(BMXGroup *)group;

/**
 退出了某群
 */
- (void)groupLeft:(BMXGroup *)group reason:(NSString *)reason;

/**
 * 收到入群邀请
 **/
- (void)groupDidRecieveInviter:(NSInteger)inviter groupId:(NSInteger)groupId message:(NSString *)message;

/**
 * 入群邀请被接受
 **/
- (void)groupInvitationAccepted:(BMXGroup *)group inviteeId:(NSInteger)inviteeId;

/**
 * 入群申请被拒绝
 **/
- (void)groupInvitationDeclined:(BMXGroup *)group
                      inviteeId:(NSInteger)inviteeId
                         reason:(NSString *)reason;
/**
 * 收到入群申请
 **/
- (void)groupDidRecieveApplied:(BMXGroup *)group
                   applicantId:(NSInteger)applicantId
                       message:(NSString *)message;

/**
 * 入群申请被接受
 **/
- (void)groupApplicationAccepted:(BMXGroup *)group
                        approver:(NSInteger)approver;

/**
 * 入群申请被拒绝
 **/
- (void)groupApplicationDeclined:(BMXGroup *)group
                        approver:(NSInteger)approver
                          reason:(NSString *)reason;

/**
 * 群成员被禁言
 **/
- (void)groupMembersMutedGroup:(BMXGroup *)group
                  members:(NSArray<NSNumber *> *)members
                      duration:(NSInteger)duration;

/**
 * 群成员被解除禁言
 **/
- (void)groupMembersUnMutedGroup:(BMXGroup *)group
                         Unmuted:(NSArray<NSNumber *> *)members;

/**
 * 加入新成员
 **/
- (void)groupMemberJoined:(BMXGroup *)group
                 memberId:(NSInteger)memberId
                  inviter:(NSInteger)inviter;

/**
 * 群成员退出
 **/
- (void)groupMemberLeft:(BMXGroup *)group
               memberId:(NSInteger)memberId
                reason:(NSString *)reason;

/**
 * 添加了新管理员
 **/
- (void)groupAdminsAddedGroup:(BMXGroup *)group
                      members:(NSArray<NSNumber *> *)members;

/**
 * 移除了管理员
 **/
- (void)groupAdminsRemovedFromGroup:(BMXGroup *)group
                            members:(NSArray<NSNumber *> *)members
                             reason:(NSString *)reason;

/**
 * 成为群主
 **/
- (void)groupOwnerAssigned:(BMXGroup *)group;

/**
 * 群组信息变更
 **/
- (void)groupInfoDidUpdate:(BMXGroup *)group
            updateInfoType:(BMXGroup_UpdateInfoType)type;

/**
 * 群成员更改群内昵称
 **/
- (void)groupMemberDidChangeNickName:(BMXGroup *)group
                       memberId:(long long)memberId
                      nickName:(NSString *)nickName;

/**
 * 收到群公告
 **/
- (void)groupAnnouncementUpdate:(BMXGroup *)group
                   announcement:(BMXGroupAnnouncement *)announcement;

/**
 * 收到共享文件
 **/
- (void)groupSharedFileUploaded:(BMXGroup *)group
                  sharedFile:(BMXGroupSharedFile *)sharedFile;

/**
 * 删除了共享文件
 **/
- (void)groupSharedFileDeleted:(BMXGroup *)group
                    sharedFile:(BMXGroupSharedFile *)sharedFile;


/**
 * 共享文件更新文件名
 **/
- (void)groupShareFileDidUpdated:(BMXGroup *)group
                      sharedFile:(BMXGroupSharedFile *)sharedFile;



@end

/**
 * @protocol 好友服务监听者
 */
@protocol BMXRosterServiceProtocol <NSObject>
@optional
/**
 @brief 添加好友
 @param sponsorId 发起方
 @param recipientId 接受方
 */
- (void)friendAddedSponsorId:(long long)sponsorId recipientId:(long long)recipientId;

/**
 @brief 删除好友 用户B删除与用户A的好友关系后，用户A会收到这个回调
 @param sponsorId 发起方
 @param recipientId 接受方
 */
- (void)friendRemovedSponsorId:(long long)sponsorId recipientId:(long long)recipientId;
/**
 @brief 收到加好友申请 用户B申请加A为好友后，用户A会收到这个回调
 @param sponsorId 发起方
 @param recipientId 接受方
 @param message 好友邀请信息
 */
- (void)friendDidRecivedAppliedSponsorId:(long long)sponsorId
                             recipientId:(long long)recipientId
                                message:(NSString *)message;
/**
 @brief 加好友申请被通过了 用户B同意用户A的加好友请求后，用户A会收到这个回调
 @param sponsorId 发起方
 @param recipientId 接受方
 */
- (void)friendDidApplicationAcceptedFromSponsorId:(long long)sponsorId
                                      recipientId:(long long)recipientId;
/**
 @brief 加好友申请被拒绝了 用户B拒绝用户A的加好友请求后，用户A会收到这个回调
 @param sponsorId 发起方
 @param recipientId 接受方
 @param reason 拒绝理由
 */
- (void)friendDidApplicationDeclinedFromSponsorId:(long long)sponsorId
                                      recipientId:(long long)recipientId
                                       reson:(NSString *)reason;

/**
 @brief 添加黑名单
 @param sponsorId 发起方
 @param recipientId 接受方
 */
- (void)friendAddedtoBlockListSponsorId:(long long)sponsorId
                            recipientId:(long long)recipientId;
/**
 @brief 删除黑名单
 @param sponsorId 发起方
 @param recipientId  接受方
 */
- (void)friendRemovedFromBlockListSponsorId:(long long)sponsorId
                   recipientId:(long long)recipientId;
/**
 * 用户信息更新
 **/
- (void)rosterInfoDidUpdate:(BMXRosterItem *)roster;
@end

/**
 * @protocol 聊天服务监听者
 */
@protocol BMXChatServiceProtocol <NSObject>
@optional
/**
 * 消息发送状态发生变化
 **/
- (void)messageStatusChanged:(BMXMessage *)message
            error:(BMXError *)error;
/**
 * 附件上传进度发送变化
 **/
- (void)messageAttachmentUploadProgressChanged:(BMXMessage *)message
                                percent:(int)percent;
/**
 * 追加内容消息发送状态发生变化
 **/
- (void)messageContentAppendChanged:(BMXMessage *)message
            error:(BMXError *)error;
/**
 * 替换消息发送状态发生变化
 **/
- (void)messageReplaceChanged:(BMXMessage *)message
            error:(BMXError *)error;
/**
 * 消息撤回状态发送变化
 **/
- (void)messageRecallStatusDidChanged:(BMXMessage *)message
                      error:(BMXError *)error;
/**
 * 收到消息
 **/
- (void)receivedMessages:(NSArray<BMXMessage*> *)messages;
/**
 * 收到追加内容消息
 **/
- (void)receivedAppendContentMessages:(NSArray<BMXMessage*> *)messages;
/**
 * 收到变更内容消息
 **/
- (void)receivedReplaceMessages:(NSArray<BMXMessage*> *)messages;
/**
 * 收到命令消息
 **/
- (void)receivedCommandMessages:(NSArray<BMXMessage*> *)messages;
/**
 * 收到系统通知消息
 **/
- (void)receivedSystemMessages:(NSArray<BMXMessage*> *)messages;
/**
 * 收到消息已读回执
 **/
- (void)receivedReadAcks:(NSArray<BMXMessage*> *)messages;
/**
 * 收到消息已送达回执
 **/
- (void)receivedDeliverAcks:(NSArray<BMXMessage*> *)messages;
/**
 * 收到撤回消息
 **/
- (void)receivedRecallMessages:(NSArray<BMXMessage*> *)messages;
/**
 * 收到消息已读取消（多设备其他设备同步消息已读状态变为未读）
 **/
- (void)receiveReadCancelsMessages:(NSArray<BMXMessage*> *)messages;
/**
 * 收到消息全部已读（多设备同步某消息之前消息全部设置为已读）
 **/
- (void)receiveReadAllMessages:(NSArray<BMXMessage*> *)messages;
/**
 * 收到删除消息 （多设备同步删除消息）
 **/
- (void)receiveDeleteMessages:(NSArray<BMXMessage*> *)messages;
/**
 * 附件下载状态发生变化
 **/
- (void)messageAttachmentStatusDidChanged:(BMXMessage *)message
                          error:(BMXError*)error
                        percent:(int)percent;
/**
 * 拉取历史消息
 **/
- (void)retrieveHistoryMessagesConversation:(BMXConversation *)conversation;
/**
 已经加载完未读会话列表
 */
- (void)loadAllConversationDidFinished;
/**
 @brief 本地创建新会话成功
 @param conversation 新创建的本地会话
 @param message 会话的最新消息，存在返回不存在返回为空
 */
- (void)conversationDidCreatedConversation:(BMXConversation *)conversation message:(BMXMessage *)message;
/**
 @brief 删除会话
 @param conversationId 删除的本地会话id
 @param error 状态错误码
 */
- (void)conversationDidDeletedConversationId:(NSInteger)conversationId error:(BMXError*)error;

/**
 * @brief 更新总未读数
 * @param conversationId 删除的本地会话id
 * @param error 状态错误码
 **/

/**
 @brief 更新总未读数
 @param unreadCount 未读数
 */
- (void)conversationTotalCountChanged:(NSInteger)unreadCount;
@end


/**
 * @interface 聊天Service
 */
@interface BMXChatService : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
/**
 @brief 发送消息，消息状态变化会通过listener通知
 @param msg 发送的消息
 */
- (void)sendMessageWithMsg:(BMXMessage*)msg;
/**
 @brief 重新发送消息，消息状态变化会通过listener通知
 @param msg 重新发送的消息
 */
- (void)resendMessageWithMsg:(BMXMessage*)msg;
/**
 @brief 撤回消息，消息状态变化会通过listener通知
 @param msg 撤回的消息
 */
- (void)recallMessageWithMsg:(BMXMessage*)msg;
/**
 @brief 合并转发消息
 @param list 转发的消息列表
 @param to 消息被转发到的会话
 @param newMsg 转发的消息列表合并后生成的新的单条转发消息
 @return BMXErrorCode
 */
- (BMXErrorCode)forwardMessageWithList:(BMXMessageList*)list to:(BMXConversation*)to newMsg:(BMXMessage*)newMsg;
/**
 @brief 简单转发消息，用户应当通过BMXMessage::createForwardMessage()先创建转发消息
 @param msg 转发的消息
 */
- (void)forwardMessageWithMsg:(BMXMessage*)msg;
/**
 * @brief 发送已读回执
 * @param msg 需要发送已读回执的消息
 */
- (void)ackMessageWithMsg:(BMXMessage*)msg;
/**
 * 发送送达回执
 */
- (void)ackMessageDeliveredWithMsg:(BMXMessage*)msg;
/**
 * @brief 发送音频/视频消息已播放回执
 * @param msg 需要发送已读回执的消息
 */
- (void)ackPlayMessageWithMsg:(BMXMessage*)msg;
/**
 * @brief 消息内容追加
 * @param msg 需要发送追加内容的消息，只允许追加content
 */
- (void)appendMessageContentWithMsg:(BMXMessage*) msg;

/**
 * @brief 消息内容替换
 * @param msg 需要发送替换内容的消息，允许替换content、config和extension
 */
- (void)replaceMessageWithMsg:(BMXMessage*) msg;
/**
 * @brief 标记此消息为未读，该消息同步到当前用户的所有设备
 * @param msg 需要发送消息已读取消的消息
 */
- (void)readCancelWithMsg:(BMXMessage*)msg;
/**
 * @brief 标记此消息及之前全部消息为已读，该消息同步到当前用户的所有设备
 * @param msg 需要标记为此消息以前全部消息为已读的消息
 */
- (void)readAllMessageWithMsg:(BMXMessage*)msg;
/**
 * @brief 删除此消息，该消息同步到当前用户的其它设备
 * @param msg 需要删除的消息
 * @param synchronize 是否同步到其它设备，不同步的情况下只会删除本地存储的该条消息
 */
- (void)removeMessageWithMsg:(BMXMessage*)msg synchronize:(BOOL)synchronize;
- (void)removeMessageWithMsg:(BMXMessage*)msg;
/**
 * @brief 下载缩略图，下载状态变化和进度通过listener通知
 * 缩略图生成策略，1 - 第三方服务器生成， 2 - 本地服务器生成，默认值是 1。
 * @param msg 需要下载缩略图的消息
 * @param strategy 缩略图生成策略，1 - 第三方服务器生成， 2 - 本地服务器生成，默认值是 1。
 */
- (void)downloadThumbnailWithMsg:(BMXMessage*)msg strategy:(BMXChatService_ThumbnailStrategy)strategy;
- (void)downloadThumbnailWithMsg:(BMXMessage*)msg;
/**
 * @brief 下载附件，下载状态变化和进度通过listener通知
 * @param msg 需要下载附件的消息
 */
- (void)downloadAttachmentWithMsg:(BMXMessage*)msg;
/**
 * 下载附件，下载状态变化和进度通过listener通知
 */
- (void)downloadAttachmentByUrlWithMsgId:(long long)msgId url:(NSString*)url path:(NSString*)path;
/**
 * @brief 取消上传附件
 * @param msg 需要取消上传附件的消息
 */
- (void)cancelUploadAttachmentWithMsg:(BMXMessage*)msg;
/**
 * @brief 取消下载附件
 * @param msg 需要取消下载附件的消息
 */
- (void)cancelDownloadAttachmentWithMsg:(BMXMessage*)msg;
/**
 * @brief 上传或下载中的文件数
 * @return int
 */
- (int)transferingNum;
/**
 * @brief 插入消息
 * @param list 插入消息列表
 * @return BMXErrorCode
 */
- (BMXErrorCode)insertMessagesWithList:(BMXMessageList*)list;
/**
 * @brief 读取一条消息
 * @param msgId 需要获取消息的消息id
 * @return BMXMessage
 */
- (BMXMessage*)getMessage:(long long)msgId;
/**
 * @brief 删除会话
 * @param conversationId 需要删除会话的会话id
 * @param synchronize 是否同步删除其它设备该会话，默认为false，仅删除本设备会话
 */
- (void)deleteConversationWithConversationId:(long long)conversationId synchronize:(BOOL)synchronize;
- (void)deleteConversationWithConversationId:(long long)conversationId;
/**
 * @brief 打开一个会话
 * @param conversationId 需要打开的会话的会话id
 * @param type 会话的类型，单聊还是群聊。
 * @param createIfNotExist 会话不存在的情况下是否要创建本地会话，默认为创建
 * @return BMXConversation
 */
- (BMXConversation*)openConversationWithConversationId:(long long)conversationId type:(BMXConversation_Type)type createIfNotExist:(BOOL)createIfNotExist;
- (BMXConversation*)openConversationWithConversationId:(long long)conversationId type:(BMXConversation_Type)type;
/**
 * @brief 获取附件保存路径
 * @return NSString
 */
- (NSString*)attachmentDir;
/**
 * @brief 获取会话的附件保存路径
 * @param conversationId 需要获取会话附件路径的会话id
 * @return NSString
 */
- (NSString*)attachmentDirForConversationWithConversationId:(long long)conversationId;
/**
 * @brief 获取所有会话
 * @return BMXConversationList
 */
- (BMXConversationList*)getAllConversations;
/**
 * @brief 获取所有会话的全部未读数（标记为屏蔽的个人和群组的未读数不统计在内）
 * @return int
 */
- (int)getAllConversationsUnreadCount;
/**
 * @brief 拉取历史消息
 * @param conversation 需要拉取历史消息的会话
 * @param refMsgId 拉取会话消息的起始消息Id
 * @param size 拉取的最大消息条数
 * @param result 拉取操作获取的消息列表，外部初始化传入空列表。
 * @return BMXErrorCode
 */
- (BMXErrorCode)retrieveHistoryMessagesWithConversation:(BMXConversation*)conversation refMsgId:(long long)refMsgId size:(unsigned long)size result:(BMXMessageList*)result;
/**
 * @brief 使用关键字搜索消息
 * @param keywords 搜索的关键字
 * @param refTime 搜索消息的起始时间
 * @param size 搜索的最大消息条数
 * @param result 搜索到的消息结果列表，外部初始化传入空列表。
 * @param Direction 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
 * @return BMXErrorCode
 */
- (BMXErrorCode)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageListList*)result arg5:(BMXConversation_Direction)arg5;
- (BMXErrorCode)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageListList*)result;
/**
 * @brief 获取发送的群组消息已读用户id列表
 * @param msg 需要获取已读用户id列表的消息
 * @param groupMemberIdList 对该条消息已读的用户id列表，初始传入为空列表
 * @return BMXErrorCode
 */
- (BMXErrorCode)getGroupAckMessageUserIdList:(BMXMessage*)msg groupMemberIdList:(ListOfLongLong*)groupMemberIdList;
/**
 * @brief 获取发送的群组消息未读用户id列表
 * @param msg 需要获取未读用户id列表的消息
 * @param groupMemberIdList 对该条消息未读的用户id列表，初始传入为空列表
 * @return BMXErrorCode
 */
- (BMXErrorCode)getGroupAckMessageUnreadUserIdList:(BMXMessage*)msg groupMemberIdList:(ListOfLongLong*)groupMemberIdList;
/**
 * @brief 获取发送的群组音频/视频消息已播放用户id列表（仅用于音频/视频消息）
 * @param msg 需要获取已播放用户id列表的消息
 * @param groupMemberIdList 对该条消息已播放的用户id列表，初始传入为空列表
 * @return BMXErrorCode
 */
- (BMXErrorCode)getGroupPlayAckMessageUserIdList:(BMXMessage*)msg groupMemberIdList:(ListOfLongLong*)groupMemberIdList;
/**
 * @brief 获取发送的群组音频/视频消息未播放用户id列表（仅用于音频/视频消息）
 * @param msg 需要获取未播放用户id列表的消息
 * @param groupMemberIdList 对该条消息未播放的用户id列表，初始传入为空列表
 * @return BMXErrorCode
 */
- (BMXErrorCode)getGroupUnPlayAckMessageUserIdList:(BMXMessage*)msg groupMemberIdList:(ListOfLongLong*)groupMemberIdList;
/**
 @brief 发送消息，消息状态变化会通过listener通知
 @param msg 发送的消息
 */
- (void)sendMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 @brief 重新发送消息，消息状态变化会通过listener通知
 @param msg 重新发送的消息
 */
- (void)resendMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 @brief 撤回消息，消息状态变化会通过listener通知
 @param msg 撤回的消息
 */
- (void)recallMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 @brief 简单转发消息，用户应当通过BMXMessage::createForwardMessage()先创建转发消息
 @param msg 转发的消息
 */
- (void)forwardMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 发送已读回执
 * @param msg 需要发送已读回执的消息
 */
- (void)ackMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * 发送送达回执
 */
- (void)ackMessageDeliveredWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 发送音频/视频消息已播放回执
 * @param msg 需要发送已读回执的消息
 */
- (void)ackPlayMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 消息内容追加
 * @param msg 需要发送追加内容的消息，只允许追加content
 */
- (void)appendMessageContentWithMsg:(BMXMessage*) msg completion:(void (^)(BMXError *aError)) resBlock;

/**
 * @brief 消息内容替换
 * @param msg 需要发送替换内容的消息，允许替换content、config和extension
 */
- (void)replaceMessageWithMsg:(BMXMessage*) msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 标记此消息为未读，该消息同步到当前用户的所有设备
 * @param msg 需要发送消息已读取消的消息
 */
- (void)readCancelWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 标记此消息及之前全部消息为已读，该消息同步到当前用户的所有设备
 * @param msg 需要标记为此消息以前全部消息为已读的消息
 */
- (void)readAllMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 删除此消息，该消息同步到当前用户的其它设备
 * @param msg 需要删除的消息
 * @param synchronize 是否同步到其它设备，不同步的情况下只会删除本地存储的该条消息
 */
- (void)removeMessageWithMsg:(BMXMessage*)msg synchronize:(BOOL)synchronize completion:(void (^)(BMXError *aError)) resBlock;
- (void)removeMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 下载缩略图，下载状态变化和进度通过listener通知
 * 缩略图生成策略，1 - 第三方服务器生成， 2 - 本地服务器生成，默认值是 1。
 * @param msg 需要下载缩略图的消息
 * @param strategy 缩略图生成策略，1 - 第三方服务器生成， 2 - 本地服务器生成，默认值是 1。
 */
- (void)downloadThumbnailWithMsg:(BMXMessage*)msg strategy:(BMXChatService_ThumbnailStrategy)strategy completion:(void (^)(BMXError *aError)) resBlock;
- (void)downloadThumbnailWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 下载附件，下载状态变化和进度通过listener通知
 * @param msg 需要下载附件的消息
 */
- (void)downloadAttachmentWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * 下载附件，下载状态变化和进度通过listener通知
 */
- (void)downloadAttachmentByUrlWithMsgId:(long long)msgId url:(NSString*)url path:(NSString*)path completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 取消上传附件
 * @param msg 需要取消上传附件的消息
 */
- (void)cancelUploadAttachmentWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 取消下载附件
 * @param msg 需要取消下载附件的消息
 */
- (void)cancelDownloadAttachmentWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 插入消息
 * @param list 插入消息列表
 * @return BMXErrorCode
 */
- (void)insertMessagesWithList:(BMXMessageList*)list completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 删除会话
 * @param conversationId 需要删除会话的会话id
 * @param synchronize 是否同步删除其它设备该会话，默认为false，仅删除本设备会话
 */
- (void)deleteConversationWithConversationId:(long long)conversationId synchronize:(BOOL)synchronize completion:(void (^)(BMXError *aError)) resBlock;
- (void)deleteConversationWithConversationId:(long long)conversationId completion:(void (^)(BMXError *aError)) resBlock;
/**
 * @brief 获取所有会话
 * @return BMXConversationList
 */
- (void)getAllConversationsWithCompletion:(void (^)(BMXConversationList *res)) resBlock;
/**
 * @brief 拉取历史消息
 * @param conversation 需要拉取历史消息的会话
 * @param refMsgId 拉取会话消息的起始消息Id
 * @param size 拉取的最大消息条数
 * @param result 拉取操作获取的消息列表，外部初始化传入空列表。
 * @return BMXErrorCode
 */
- (void)retrieveHistoryMessagesWithConversation:(BMXConversation*)conversation refMsgId:(long long)refMsgId size:(unsigned long)size completion:(void (^)(BMXMessageList *res, BMXError *aError)) resBlock;
/**
 * @brief 使用关键字搜索消息
 * @param keywords 搜索的关键字
 * @param refTime 搜索消息的起始时间
 * @param size 搜索的最大消息条数
 * @param result 搜索到的消息结果列表，外部初始化传入空列表。
 * @param Direction 消息搜索方向，默认（Direction::Up）是从更早的消息中搜索
 * @return BMXErrorCode
 */
- (void)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size arg5:(BMXConversation_Direction)arg5 completion:(void (^)(BMXMessageListList *res, BMXError *aError)) resBlock;
- (void)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size completion:(void (^)(BMXMessageListList *res, BMXError *aError)) resBlock;
/**
 * @brief 获取发送的群组消息已读用户id列表
 * @param msg 需要获取已读用户id列表的消息
 * @param groupMemberIdList 对该条消息已读的用户id列表，初始传入为空列表
 * @return BMXErrorCode
 */
- (void)getGroupAckMessageUserIdList:(BMXMessage*)msg completion:(void(^)(ListOfLongLong *res, BMXError *error)) resBlock;
/**
 * @brief 获取发送的群组消息未读用户id列表
 * @param msg 需要获取未读用户id列表的消息
 * @param groupMemberIdList 对该条消息未读的用户id列表，初始传入为空列表
 * @return BMXErrorCode
 */
- (void)getGroupAckMessageUnreadUserIdList:(BMXMessage*)msg completion:(void(^)(ListOfLongLong *res, BMXError *error)) resBlock;
/**
 * @brief 获取发送的群组音频/视频消息已播放用户id列表（仅用于音频/视频消息）
 * @param msg 需要获取已播放用户id列表的消息
 * @param groupMemberIdList 对该条消息已播放的用户id列表，初始传入为空列表
 * @return BMXErrorCode
 */
- (void)getGroupPlayAckMessageUserIdList:(BMXMessage*)msg completion:(void(^)(ListOfLongLong *res, BMXError *error)) resBlock;
/**
 * @brief 获取发送的群组音频/视频消息未播放用户id列表（仅用于音频/视频消息）
 * @param msg 需要获取未播放用户id列表的消息
 * @param groupMemberIdList 对该条消息未播放的用户id列表，初始传入为空列表
 * @return BMXErrorCode
 */
- (void)getGroupUnPlayAckMessageUserIdList:(BMXMessage*)msg completion:(void(^)(ListOfLongLong *res, BMXError *error)) resBlock;
- (void)dealloc;

- (void)addDelegate:(id<BMXChatServiceProtocol>)aDelegate;
- (void)addDelegate:(id<BMXChatServiceProtocol>)aDelegate delegateQueue:(dispatch_queue_t)aQueue;
- (void)removeDelegate:(id<BMXChatServiceProtocol>)aDelegate;
/**
 * 添加聊天监听者
 **/
- (void)addChatListener:(id<BMXChatServiceProtocol>)listener;

/**
 * 移除聊天监听者
 **/
- (void)removeChatListener:(id<BMXChatServiceProtocol>)listener;

@end

/**
 * @interface 推送Service
 */
@interface BMXPushService : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
/**
 @brief 初始化推送sdk。在仅使用推送的情况下使用该接口初始化推送sdk。在同时使用IM功能的时候直接在BMXClient调用登陆功能即可。config对象初始化的时候需要传入平台类型和设备id。
 @param alias 推送初始化使用的当前用户别名
 @param bmxToken 推送初始化的时候App传入的使用的用户的token，无用户的状态下不传入即可。
 @return BMXErrorCode
 */
- (BMXErrorCode)startWithAlias:(NSString*)alias bmxToken:(NSString*)bmxToken;
- (BMXErrorCode)startWithAlias:(NSString*)alias;
- (BMXErrorCode)start;
/**
 @brief 停止推送功能接口。
 @return BMXErrorCode
 */
- (BMXErrorCode)stop;
/**
 @brief 恢复推送功能接口。
 @return BMXErrorCode
 */
- (BMXErrorCode)resume;
/**
 @brief 解除用户别名绑定。
 @param alias 需要解除绑定的用户别名。
 @return BMXErrorCode
 */
- (BMXErrorCode)unbindAliasWithAlias:(NSString*)alias;
/**
 @brief 获取登陆后使用的用户token。
 @return NSString
 */
- (NSString*)getToken;
/**
 @brief 获取登陆后服务器返回的推送证书。
 @return NSString
 */
- (NSString*)getCert;
/**
 @brief 推送sdk当前的状态。
 @return BMXPushService_PushSdkStatus
 */
- (BMXPushService_PushSdkStatus)status;
/**
 @brief 推送绑定设备token。
 @param token 设备的推送token
 @return BMXErrorCode
 */
- (BMXErrorCode)bindDeviceTokenWithToken:(NSString*)token;
/**
 @brief 推送绑定设备token。
 @param token 设备的推送token
 @return BMXErrorCode
 */
- (BMXErrorCode)bindVoipTokenWithToken:(NSString*)token;
/**
 @brief 获取推送用户详情，如果forceRefresh == true，则强制从服务端拉取
 @param profile 推送用户profile信息，初始传入指向为空的shared_ptr对象，函数返回后从此处获取用户profile信息。
 @param forceRefresh 是否强制从服务器拉取，本地获取失败的情况下会自动从服务器拉取
 @return BMXErrorCode
 */
- (BMXErrorCode)getPushProfile:(BMXPushUserProfile*)pushProfile forceRefresh:(BOOL)forceRefresh;
/**
 @brief 设置推送用户的标签。
 @param tags 用户标签
 @param operationId 操作id。在回调通知中对应通知提醒。
 @return BMXErrorCode
 */
- (BMXErrorCode)setTags:(TagList*)tags operationId:(NSString*)operationId;
/**
 @brief 获取推送用户的标签。
 @param tags 用户标签
 @param operationId 操作id。在回调通知中对应通知提醒。
 @return BMXErrorCode
 */
- (BMXErrorCode)getTags:(TagList*)tags operationId:(NSString*)operationId;
/**
 @brief 删除推送用户的标签。
 @param tags 要删除用户标签
 @param operationId 操作id。在回调通知中对应通知提醒。
 @return BMXErrorCode
 */
- (BMXErrorCode)deleteTagsWithTags:(TagList*)tags operationId:(NSString*)operationId;
/**
 @brief 清空推送用户的标签。
 @param operationId 操作id。在回调通知中对应通知提醒。
 @return BMXErrorCode
 */
- (BMXErrorCode)clearTagsWithOperationId:(NSString*)operationId;
/**
 @brief 设置推送用户的未读角标。
 @param count 用户未读角标数
 @return BMXErrorCode
 */
- (BMXErrorCode)setBadge:(int)count;
/**
 @brief 设置推送启用状态。默认为使用推送。
 @param enable 推送的启用状态
 @return BMXErrorCode
 */
- (BMXErrorCode)setPushMode:(BOOL)enable;
/**
 @brief 设置允许推送时间。
 @param startHour 静默允许推送的起始时间小时
 @param endHour 静默允许推送的结束时间小时
 @return BMXErrorCode
 */
- (BMXErrorCode)setPushMode;
- (BMXErrorCode)setPushTime:(int)startHour endHour:(int)endHour;
/**
 @brief 设置推送静默的起始结束时间。
 @param startHour 静默推送的起始时间小时
 @param endHour 静默推送的结束时间小时
 @return BMXErrorCode
 */
- (BMXErrorCode)setSilenceTime:(int)startHour endHour:(int)endHour;
/**
 @brief 设置推送是否可以后台运行。默认是false。
 @param enable 推送后台运行状态。
 @return BMXErrorCode
 */
- (BMXErrorCode)setRunBackgroundMode:(BOOL)enable;
- (BMXErrorCode)setRunBackgroundMode;
/**
 @brief 设置推送的地理围栏功能是否运行。
 @param enable 地理围栏功能是否运行。
 @param isAllow 用户是否主动弹出用户定位请求。
 @return BMXErrorCode
 */
- (BMXErrorCode)setGeoFenceMode:(BOOL)enable isAllow:(BOOL)isAllow;
- (BMXErrorCode)setGeoFenceMode:(BOOL)enable;
- (BMXErrorCode)setGeoFenceMode;
/**
 @brief 清除指定id的通知。
 @param notificationId 通知id
 */
- (void)clearNotificationWithNotificationId:(long long)notificationId;
/**
 @brief 清空下拉通知栏全部通知。
 */
- (void)clearAllNotifications;
/**
 @brief 发送推送上行消息，消息状态变化会通过listener通知
 @param content 发送的上行推送消息内容
 */
- (void)sendMessageWithContent:(NSString*)content;
/**
 @brief 加载数据库本地存储的推送消息。如果不指定则从最新消息开始
 @param refMsgId 加载推送消息的起始id
 @param size 最大加载消息条数
 @param result 数据库返回的加载本地推送消息列表
 @param arg4 加载推送消息的方向，默认是加载更早的消息
 */
- (BMXErrorCode)loadLocalPushMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size result:(BMXMessageList*)result arg4:(BMXPushService_PushDirection)arg4;
- (BMXErrorCode)loadLocalPushMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size result:(BMXMessageList*)result;
- (void)dealloc;
@end

/**
 * @interface 客户端实例
 */
@interface BMXClient : BMXNetworkListener
+ (instancetype)sharedClient;
@property (nonatomic, strong, readonly) BMXUserService* userService;    //用户Service
@property (nonatomic, strong, readonly) BMXRosterService* rosterService;//好友Service
@property (nonatomic, strong, readonly) BMXChatService* chatService;    //聊天Service
@property (nonatomic, strong, readonly) BMXGroupService* groupService;  //群组Service
@property (nonatomic, strong, readonly) BMXPushService* pushService;    //推送Service
@property (nonatomic, strong, readonly) BMXRTCService* rtcService;      //RTC Service
/**
 * @brief 创建BMXClient
 * @param config 客户端本地已经创建好的BMXSDKConfig SDK配置对象
 * @return BMXClient
 */
+ (BMXClient*)createWithConfig:(BMXSDKConfig*)config;
/**
 * @brief 获取SDK设置
 * @return BMXSDKConfig
 */
- (BMXSDKConfig*)getSDKConfig;
/**
 * @brief 注册新用户，username和password是必填参数
 * @param username 用户名
 * @param password 用户密码
 * @param bmxUserProfilePtr 注册成功后从该函数处获取新注册用户的Profile信息，初始传入指向为空的shared_ptr对象即可。
 * @return BMXErrorCode
 **/
- (BMXErrorCode)signUpNewUserWithUsername:(NSString*)username password:(NSString*)password bmxUserProfilePtr:(BMXUserProfile*)bmxUserProfilePtr;
/**
 * @brief 通过用户名登录
 * @param name 用户名
 * @param password 用户密码
 * @return BMXErrorCode
 **/
- (BMXErrorCode)signInByNameWithName:(NSString*)name password:(NSString*)password;
/**
 * @brief 通过用户名登录
 * @param name 用户名
 * @param password 用户密码
 * @return BMXErrorCode
 **/
- (BMXErrorCode)signInByIdWithArg1:(long long)arg1 password:(NSString*)password;
  /**
   * @brief 通过用户名快速登录（要求之前成功登录过，登录速度较快）
   * @param name 用户名
   * @param password 用户密码(用于sdk在内部token到期时自动更新用户token)
   * @return BMXErrorCode
   **/
- (BMXErrorCode)fastSignInByNameWithName:(NSString*)name password:(NSString*)password;
  /**
   * @brief 通过用户ID快速登录（要求之前成功登录过，登录速度较快）
   * @param uid 用户id
   * @param password 用户密码(用于sdk在内部token到期时自动更新用户token)
   * @return BMXErrorCode
   **/
- (BMXErrorCode)fastSignInByIdWithUid:(long long)uid password:(NSString*)password;
  /**
   * @brief 退出登录
   * @param uid 退出用户的uid（默认输入0则退出当前登陆用户）
   * @param ignoreUnbindDevice 用户退出时是否忽略解绑定设备操作。对应某些服务器不可访问的情况下忽略服务器解绑定设备操作直接强制退出时设置为true
   * @return BMXErrorCode
   **/
- (BMXErrorCode)signOutWithUid:(long long)uid ignoreUnbindDevice:(BOOL)ignoreUnbindDevice;
- (BMXErrorCode)signOutWithUid:(long long)uid;
- (BMXErrorCode)signOut;
  /**
   * @brief 删除账号
   * @param password 密码
   * @return BMXErrorCode
   **/
- (BMXErrorCode)deleteAccountWithPassword:(NSString*)password;
  /**
   * @brief 获取当前和服务器的连接状态
   * @return BMXConnectStatus
   **/
- (BMXConnectStatus)connectStatus;
  /**
   * @brief 获取当前的登录状态
   * @return BMXSignInStatus
   **/
- (BMXSignInStatus)signInStatus;
  /**
   * @brief 强制重新连接
   **/
- (void)reconnect;
  /**
   * @brief 处理网络状态发送变化
   * @param type 变化后的网络类型
   * @param reconnect 网络是否需要重连
   **/
- (void)onNetworkChangedWithType:(BMXNetworkType)type reconnect:(BOOL)reconnect;
  /**
   * @brief 断开网络连接
   **/
- (void)disconnect;
  /**
   * @brief 更改SDK的appId，本操作会同时更新BMXConfig中的appId。
   * @param appId 新变更的appId
   * @return BMXErrorCode
   **/
- (BMXErrorCode)changeAppIdWithAppId:(NSString*)appId appSecret:(NSString*)appSecret;
- (BMXErrorCode)changeAppIdWithAppId:(NSString*)appId;
  /**
   * @brief 获取app的服务器网络配置，在初始化SDK之后登陆之前调用，可以提前获取服务器配置加快登陆速度。
   * @param isLocal 为true则使用本地缓存的dns配置，为false则从服务器获取最新的配置。
   * @return BMXErrorCode
   **/
- (BMXErrorCode)initializeServerConfigWithIsLocal:(BOOL)isLocal;
  /**
   * @brief 发送消息，消息状态变化会通过listener通知，在发送群组消息且指定的群组为开启群组已读回执的情况下，
   * 该接口会自动获取群成员列表id并且填充到message config中去，无需客户端自己进行群组成员列表的填充操作。
   * @param msg 发送的消息
   **/
- (void)sendMessageWithMsg:(BMXMessage*)msg;
  /**
   * @brief 注册新用户，username和password是必填参数
   * @param username 用户名
   * @param password 用户密码
   * @param bmxUserProfilePtr 注册成功后从该函数处获取新注册用户的Profile信息，初始传入指向为空的shared_ptr对象即可。
   * @return BMXErrorCode
   **/
- (void)signUpNewUserWithUsername:(NSString*)username password:(NSString*)password completion:(void (^)(BMXUserProfile *profile, BMXError *aError)) resBlock;
  /**
   * @brief 通过用户名登录
   * @param name 用户名
   * @param password 用户密码
   * @return BMXErrorCode
   **/
- (void)signInByNameWithName:(NSString*)name password:(NSString*)password completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 通过用户ID登录
   * @param int64_t 用户id
   * @param password 用户密码
   * @return BMXErrorCode
   **/
- (void)signInByIdWithArg1:(long long)arg1 password:(NSString*)password completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 通过用户名快速登录（要求之前成功登录过，登录速度较快）
   * @param name 用户名
   * @param password 用户密码(用于sdk在内部token到期时自动更新用户token)
   * @return BMXErrorCode
   **/
- (void)fastSignInByNameWithName:(NSString*)name password:(NSString*)password completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 通过用户ID快速登录（要求之前成功登录过，登录速度较快）
   * @param uid 用户id
   * @param password 用户密码(用于sdk在内部token到期时自动更新用户token)
   * @return BMXErrorCode
   **/
- (void)fastSignInByIdWithUid:(long long)uid password:(NSString*)password completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 退出登录
   * @param uid 退出用户的uid（默认输入0则退出当前登陆用户）
   * @param ignoreUnbindDevice 用户退出时是否忽略解绑定设备操作。对应某些服务器不可访问的情况下忽略服务器解绑定设备操作直接强制退出时设置为true
   * @return BMXErrorCode
   **/
- (void)signOutWithUid:(long long)uid ignoreUnbindDevice:(BOOL)ignoreUnbindDevice completion:(void (^)(BMXError *aError)) resBlock;
- (void)signOutWithUid:(long long)uid completion:(void (^)(BMXError *aError)) resBlock;
- (void)signOutWithCompletion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 删除账号
   * @param password 密码
   * @return BMXErrorCode
   **/
- (void)deleteAccountWithPassword:(NSString*)password completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 强制重新连接
   **/
- (void)reconnectWithCompletion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 断开网络连接
   **/
- (void)disconnectWithCompletion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 更改SDK的appId，本操作会同时更新BMXConfig中的appId。
   * @param appId 新变更的appId
   * @return BMXErrorCode
   **/
- (void)changeAppIdWithAppId:(NSString*)appId appSecret:(NSString*)appSecret completion:(void (^)(BMXError *aError)) resBlock;
- (void)changeAppIdWithAppId:(NSString*)appId completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 获取app的服务器网络配置，在初始化SDK之后登陆之前调用，可以提前获取服务器配置加快登陆速度。
   * @param isLocal 为true则使用本地缓存的dns配置，为false则从服务器获取最新的配置。
   * @return BMXErrorCode
   **/
- (void)initializeServerConfigWithIsLocal:(BOOL)isLocal completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 发送消息，消息状态变化会通过listener通知，在发送群组消息且指定的群组为开启群组已读回执的情况下，
   * 该接口会自动获取群成员列表id并且填充到message config中去，无需客户端自己进行群组成员列表的填充操作。
   * @param msg 发送的消息
   **/
- (void)sendMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
- (void)dealloc;
@end

/**
 * @interface 消息文件附件
 **/
@interface BMXFileAttachment : BMXMessageAttachment
- (id)initWithData:(NSData *)aData displayName:(NSString *)displayName conversationId:(long long)conversationId;
  /**
   * @brief 构造函数，构建发送文件消息附件
   * @param path 文件的本地路径
   * @param displayName 文件展示名
   **/
- (id)initWithPath:(NSString*)path displayName:(NSString*)displayName;
- (id)initWithPath:(NSString*)path;
  /**
   * @brief 构造函数，构建接收文件消息附件
   * @param ratelUrl ratel文件服务器地址
   * @param displayName 文件展示名
   * @param fileLength 文件大小
   **/
- (id)initWithRatelUrl:(NSString*)ratelUrl displayName:(NSString*)displayName fileLength:(long long)fileLength;
  /**
   * @brief 返回文件类型
   * @return BMXMessageAttachment_Type
   **/
- (BMXMessageAttachment_Type)type;
- (BMXMessageAttachment*)clone;
  /**
   * @brief 本地路径
   * @return NSString
   **/
- (NSString*)path;
  /**
   * @brief 显示名
   * @return NSString
   **/
- (NSString*)displayName;
  /**
   * @brief 远程ratel使用URL
   * @return NSString
   **/
- (NSString*)ratelUrl;
  /**
   * @brief 远程使用URL
   * @return NSString
   **/
- (NSString*)url;
  /**
   * @brief 文件长度
   * @return NSString
   **/
- (long long)fileLength;
  /**
   * @brief 附件下载状态
   * @return BMXMessageAttachment_DownloadStatus
   **/
- (BMXMessageAttachment_DownloadStatus)downloadStatus;
  /**
   * @brief 消息附件强制转换为文件附件
   * @param attachment 附件
   * @return BMXFileAttachment
   **/
+ (BMXFileAttachment*)dynamicCastWithAttachment:(BMXMessageAttachment*)attachment;
- (void)dealloc;
@end

/**
 * @interface RTC视频属性配置
 **/
@interface BMXVideoConfig : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (void)setWidth:(int)value;
- (int)getWidth;
- (void)setHeight:(int)value;
- (int)getHeight;
- (void)setFrameRate:(int)value;
- (int)getFrameRate;
- (void)setProfile:(BMXVideoProfile)value;
- (BMXVideoProfile)getProfile;
- (id)init;
- (void)dealloc;
@end

/**
 * @interface RTC房间认证信息
 **/
@interface BMXRoomAuth : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (void)setMRoomId:(long long)value;
- (long long)getMRoomId;
- (void)setMToken:(NSString*)value;
- (NSString*)getMToken;
- (void)setMOptionalInfo:(NSString*)value;
- (NSString*)getMOptionalInfo;
- (void)setMUserId:(long long)value;
- (long long)getMUserId;
- (id)init;
- (void)dealloc;
@end

/**
 * @interface 流信息
 **/
@interface BMXStream : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (void)setMUserId:(long long)value;
- (long long)getMUserId;
- (void)setMStreamId:(NSString*)value;
- (NSString*)getMStreamId;
- (void)setMMediaType:(BMXVideoMediaType)value;
- (BMXVideoMediaType)getMMediaType;
- (void)setMEnableVideo:(BOOL)value;
- (BOOL)getMEnableVideo;
- (void)setMEnableAudio:(BOOL)value;
- (BOOL)getMEnableAudio;
- (void)setMEnableData:(BOOL)value;
- (BOOL)getMEnableData;
- (void)setMMuteVideo:(BOOL)value;
- (BOOL)getMMuteVideo;
- (void)setMMuteAudio:(BOOL)value;
- (BOOL)getMMuteAudio;
- (id)init;
- (void)dealloc;
@end

/**
 * @interface 绘制
 **/
@interface BMXVideoCanvas : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (void)setMView:(void*)value;
- (void*)getMView;
- (void)setMUserId:(long long)value;
- (long long)getMUserId;
- (void)setMStream:(BMXStream*)value;
- (BMXStream*)getMStream;
- (void)setMRenderMode:(BMXRenderMode)value;
- (BMXRenderMode)getMRenderMode;
- (void)setMMirrodMode:(BMXMirrorMode)value;
- (BMXMirrorMode)getMMirrodMode;
- (id)init;
- (void)dealloc;
@end

/**
 * @interface 流状态
 **/
@interface BMXStreamStats : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (void)setMUserId:(int)value;
- (int)getMUserId;
- (void)setMStreamId:(NSString*)value;
- (NSString*)getMStreamId;
- (void)setMMediaType:(BMXVideoMediaType)value;
- (BMXVideoMediaType)getMMediaType;
- (void)setMTrackType:(BMXTrackType)value;
- (BMXTrackType)getMTrackType;
- (void)setMAudioBitrate:(int)value;
- (int)getMAudioBitrate;
- (void)setMVideoBitrate:(int)value;
- (int)getMVideoBitrate;
- (void)setMWidth:(int)value;
- (int)getMWidth;
- (void)setMHeight:(int)value;
- (int)getMHeight;
- (void)setMFrameRate:(int)value;
- (int)getMFrameRate;
- (void)setMPacketLostRate:(float)value;
- (float)getMPacketLostRate;
- (id)init;
- (void)dealloc;
@end

/**
 * @interface 流信息
 **/
@interface BMXJanusStreamInfo : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setMFeedId:(long long)value;
- (long long)getMFeedId;
- (void)setMFeedDisplay:(NSString*)value;
- (NSString*)getMFeedDisplay;
- (void)setMFeedMid:(NSString*)value;
- (NSString*)getMFeedMid;
- (void)setMType:(NSString*)value;
- (NSString*)getMType;
- (void)setMMid:(NSString*)value;
- (NSString*)getMMid;
- (void)setMCodec:(NSString*)value;
- (NSString*)getMCodec;
- (void)setMMindex:(int)value;
- (int)getMMindex;
- (void)setMTalking:(BOOL)value;
- (BOOL)getMTalking;
- (void)setMActive:(BOOL)value;
- (BOOL)getMActive;
- (void)setMReady:(BOOL)value;
- (BOOL)getMReady;
- (void)setMSend:(BOOL)value;
- (BOOL)getMSend;
- (void)dealloc;
@end

/**
  * @interface 房间活跃成员信息
  */
@interface BMXRoomParticipant : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setMUserId:(long long)value;
- (long long)getMUserId;
- (void)setMDisplay:(NSString*)value;
- (NSString*)getMDisplay;
- (void)setMIsPublisher:(BOOL)value;
- (BOOL)getMIsPublisher;
- (void)setMIstalking:(BOOL)value;
- (BOOL)getMIstalking;
- (void)dealloc;
@end

/**
 * @interface 流发布者
 */
@interface BMXJanusPublisher : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)initWithUserId:(long long)userId;
- (void)setMUserId:(long long)value;
- (long long)getMUserId;
- (void)setMDisplay:(NSString*)value;
- (NSString*)getMDisplay;
- (void)setMAudioCodec:(NSString*)value;
- (NSString*)getMAudioCodec;
- (void)setMVideoCodec:(NSString*)value;
- (NSString*)getMVideoCodec;
- (void)setMSimulcast:(BOOL)value;
- (BOOL)getMSimulcast;
- (void)setMTalking:(BOOL)value;
- (BOOL)getMTalking;
- (void)setStreams:(BMXRTCStreams*)value;
- (BMXRTCStreams*)getStreams;
- (void)dealloc;
@end

/**
 * @interface SDP信息
 */
@interface BMXRoomSDPInfo : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)setSdp:(NSString*)value;
- (NSString*)getSdp;
- (void)setType:(BMXRoomSDPType)value;
- (BMXRoomSDPType)getType;
- (void)dealloc;
@end

/**
 * @interface RTC设置管理
 **/
@interface BMXRTCConfig : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
  /**
   * @brief 获取音视频SDK版本号
   * @return NSString
   **/
- (NSString*)getVersion;
  /**
   * @brief 设置音视频log等级
   * @param level log日志等级
   **/
- (void)setLogLevel:(BMXLogLevel)level;
  /**
   * @brief 获取音视频日志等级
   * @return BMXLogLevel
   **/
- (BMXLogLevel)getLogLevel;
  /**
   * @brief 设置音视频SDK模式
   * @param mode 音视频模式
   **/
- (void)setSDKMode:(BMXSDKMode)mode;
  /**
   * @brief 获取音视频SDK模式
   * @return BMXSDKMode
   **/
- (BMXSDKMode)getSDKMode;
  /**
   * @brief 设置是否自动发布模式
   * @param bool 是否自动发布
   **/
- (void)setAutoPublishMode:(BOOL)autoPublish;
  /**
   * @brief 获取是否自动发布模式
   * @return BOOL
   **/
- (BOOL)getAutoPublishMode;
  /**
   * @brief 设置是否自动订阅模式
   * @param bool 是否自动订阅
   **/
- (void)setAutoSubscribeMode:(BOOL)autoSubscribe;
  /**
   * @brief 获取是否自动发布模式
   * @return BOOL
   **/
- (BOOL)getAutoSubscribeMode;
  /**
   * @brief 设置是否纯音频模式
   * @param bool 是否纯音频
   **/
- (void)setAudioOnlyMode:(BOOL)audioOnly;
  /**
   * @brief 获取是否纯音频模式
   * @return BOOL
   **/
- (BOOL)getAudioOnlyMode;
  /**
   * @brief 设置本地音频是否发布
   * @param bool 本地音频是否发布
   **/
- (void)setEnableLocalAudio:(BOOL)enableLocalAudio;
  /**
   * @brief 获取本地音频是否发布
   * @return BOOL
   **/
- (BOOL)getEnableLocalAudio;
  /**
   * @brief 设置本地视频是否发布
   * @param enableLocalVideo 本地视频是否发布
   **/
- (void)setEnableLocalVideo:(BOOL)enableLocalVideo;
  /**
   * @brief 获取本地视频是否发布
   * @return BOOL
   **/
- (BOOL)getEnableLocalVideo;
- (void)dealloc;
@end

/**
 * @interface RTC监听者
 **/
@interface RTCEngineListener: NSObject
- (void)addDelegate:(id<BMXRTCEngineProtocol>) delegate queue:(dispatch_queue_t) queue;
- (void)removeDelegate:(id<BMXRTCEngineProtocol>) delegate;
  /**
   * @brief 用户加入房间回调
   * @param info 通知信息
   * @param roomId 房间Id
   * @param error 错误码信息
   **/
- (void)onJoinRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error;
  /**
   * @brief 用户离开房间回调
   * @param info 通知信息
   * @param roomId 房间Id
   * @param error 错误码信息
   * @param reason 离开原因
   **/
- (void)onLeaveRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error reason:(NSString*)reason;
  /**
   * @brief断线重新加入房间回调
   * @param roomId 房间Id
   * @param error 错误码信息
   **/  
- (void)onRejoiningWithRoomId:(long long)roomId error:(BMXErrorCode)error;
  /**
   * @brief 重新加入房间完成回调
   * @param info 通知信息
   * @param roomId 房间Id
   * @param error 错误码信息
   **/
- (void)onReJoinRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error;
  /**
   * @brief 其他用户加入房间回调
   * @param roomId 房间Id
   * @param usedId 用户id
   **/
- (void)onMemberJoinedWithRoomId:(long long)roomId usedId:(long long)usedId;
  /**
   * @brief 其他用户离开房间回调
   * @param roomId 房间Id
   * @param usedId 用户Id
   * @param reason 离开原因
   **/
- (void)onMemberExitedWithRoomId:(long long)roomId usedId:(long long)usedId reason:(NSString*)reason;
  /**
   * @brief 本地流发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onLocalPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 本地流停止发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onLocalUnPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远程流发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemotePublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远程流停止发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteUnPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 订阅流回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onSubscribeWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 停止订阅流回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onUnSubscribeWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远端流信息变更通知
   * @param stream 流信息
   * @param trackType 音轨或者视频轨类型
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteTrackNotifyWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 本地音频或视频启用禁用通知回调
   * @param stream 流信息
   * @param trackType 音轨或者视频轨类型
   * @param mute 启用或禁用
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onLocalStreamMuteRspWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType mute:(BOOL)mute info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远端音频或视频启用禁用通知回调
   * @param stream 流信息
   * @param trackType 音轨或者视频轨类型
   * @param mute 启用或禁用
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteStreamMuteRspWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType mute:(BOOL)mute info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 发送端统计信息回调
   * @param streamStats 本地流统计信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onSendRTCStatsWithStreamStats:(BMXStreamStats*)streamStats info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远端统计信息回调
   * @param streamStats 远端流统计信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteRTCStatsWithStreamStats:(BMXStreamStats*)streamStats info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 本地音量调节回调
   * @param volume 音量信息
   **/
- (void)onLocalAudioLevelWithVolume:(int)volume;
  /**
   * @brief 远端音量调节回复
   * @param userId 用户id
   * @param volume 音量信息
   **/
- (void)onRemoteAudioLevelWithUserId:(long long)userId volume:(int)volume;
  /**
   * @brief 被踢信息回调
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onKickoffWithInfo:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 警告信息回调
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onWarningWithInfo:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 错误信息回调
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onErrorWithInfo:(NSString*)info error:(BMXErrorCode)error;
    /**
   * @brief 网络质量回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onNetworkQualityWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
@end

/**
 * @interface RTC Engine
 **/
@interface BMXRTCEngine : NSObject
{
    RTCEngineListener *rtcEngineListener;
}

@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;

- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;

  /**
   * @brief 在通话中
   **/
- (BOOL)isOnCall;

  /**
   * @brief 音视频通话对方ID
   **/
- (long long)otherId;

  /**
   * @brief 销毁音视频Engine
   **/
- (void)destroy;
  /**
   * @brief 获取RTC设置
   * @return BMXRTCConfig
   **/
- (BMXRTCConfig*)getRTCConfig;
  /**
   * @brief 设置Room的类型
   * @param type Room类型
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setRoomType:(BMXRoomType)type;
  /**
   * @brief 设置流操作权限
   * @param role 操作权限，推流、拉流、推拉流。
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setStreamRole:(BMXStreamRole)role;
  /**
   * @brief 设置视频编码格式类型
   * @param codec VP8编码、H264编码
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setVideoCodec:(BMXVideoCodec)codec;
  /**
   * @brief 设置视频编码格式类型
   * @param codec VP8编码、H264编码
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setVideoProfile:(BMXVideoConfig*)videoConfig;
  /**
   * @brief 设置音频编码格式
   * @param profile 音频编码格式
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setAudioProfile:(BMXAudioProfile)profile;
  /**
   * @brief 加入频道
   * @param auth 加入频道时的认证信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)joinRoomWithAuth:(BMXRoomAuth*)auth;
  /**
   * @brief 离开频道
   * @return BMXErrorCode
   **/
- (BMXErrorCode)leaveRoom;
  /**
   * @brief 发布流信息
   * @param type 流媒体类型
   * @param hasVideo 是否存在视频流
   * @param hasAudio 是否存在音频流
   * @return BMXErrorCode
   **/
- (BMXErrorCode)publishWithType:(BMXVideoMediaType)type hasVideo:(BOOL)hasVideo hasAudio:(BOOL)hasAudio;
  /**
   * @brief 停止发布流
   * @param type 流媒体类型
   * @return BMXErrorCode
   **/
- (BMXErrorCode)unPublishWithType:(BMXVideoMediaType)type;
  /**
   * @brief 订阅流信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)subscribeWithStream:(BMXStream*)stream;
  /**
   * @brief 停止订阅流
   * @return BMXErrorCode
   **/
- (BMXErrorCode)unSubscribeWithStream:(BMXStream*)stream;
  /**
   * @brief 开启本地渲染
   * @param canvas 画布属性信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)startPreviewWithCanvas:(BMXVideoCanvas*)canvas;
  /**
   * @brief 停止本地渲染
   * @param canvas 画布属性信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)stopPreviewWithCanvas:(BMXVideoCanvas*)canvas;
  /**
   * @brief 开启远端渲染
   * @param canvas 画布属性信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)startRemoteViewWithCanvas:(BMXVideoCanvas*)canvas;
  /**
   * @brief 停止远端渲染
   * @param canvas 画布属性信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)stopRemoteViewWithCanvas:(BMXVideoCanvas*)canvas;
  /**
   * @brief 打开关闭本地音频
   * @param mute true为打开，false为关闭
   * @return BMXErrorCode
   **/
- (BMXErrorCode)muteLocalAudioWithMute:(BOOL)mute;
  /**
   * @brief 打开关闭本地视频
   * @param type 视频流类型
   * @param mute true为打开，false为关闭
   * @return BMXErrorCode
   **/
- (BMXErrorCode)muteLocalVideoWithType:(BMXVideoMediaType)type mute:(BOOL)mute;
  /**
   * @brief 打开关闭远端音频
   * @param stream 远端流
   * @param mute true为打开，false为关闭
   * @return BMXErrorCode
   **/
- (BMXErrorCode)muteRemoteAudioWithStream:(BMXStream*)stream mute:(BOOL)mute;
  /**
   * @brief 打开关闭远端视频
   * @param stream 远端流
   * @param mute true为打开，false为关闭
   * @return BMXErrorCode
   **/
- (BMXErrorCode)muteRemoteVideoWithStream:(BMXStream*)stream mute:(BOOL)mute;
  /**
   * @brief 切换摄像头
   * @return BMXErrorCode
   **/
- (BMXErrorCode)switchCamera;
- (void)dealloc;

  /**
   * @brief 添加聊天监听者
   * @param listener 聊天监听者
   **/
- (void)addDelegate:(id<BMXRTCEngineProtocol>)aDelegate;
- (void)addDelegate:(id<BMXRTCEngineProtocol>)aDelegate delegateQueue:(dispatch_queue_t)aQueue;
  /**
   * @brief 移除聊天监听者
   * @param listener 聊天监听者
   **/
- (void)removeDelegate:(id<BMXRTCEngineProtocol>)aDelegate;
- (void)addRTCEngineListener:(id<BMXRTCEngineProtocol>)listener;
- (void)removeRTCEngineListener:(id<BMXRTCEngineProtocol>)listener;
@end

/**
 * @protocol RTC Engine监听者
 **/
@protocol BMXRTCEngineProtocol <NSObject>
@optional
  /**
   * @brief 用户加入房间回调
   * @param info 通知信息
   * @param roomId 房间Id
   * @param error 错误码信息
   **/
- (void)onJoinRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error;
  /**
   * @brief 用户离开房间回调
   * @param info 通知信息
   * @param roomId 房间Id
   * @param error 错误码信息
   * @param reason 离开原因
   **/
- (void)onLeaveRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error reason:(NSString*)reason;
  /**
   * @brief断线重新加入房间回调
   * @param roomId 房间Id
   * @param error 错误码信息
   **/  
- (void)onRejoiningWithRoomId:(long long)roomId error:(BMXErrorCode)error;
  /**
   * @brief 重新加入房间完成回调
   * @param info 通知信息
   * @param roomId 房间Id
   * @param error 错误码信息
   **/
- (void)onReJoinRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error;
  /**
   * @brief 其他用户加入房间回调
   * @param roomId 房间Id
   * @param usedId 用户id
   **/
- (void)onMemberJoinedWithRoomId:(long long)roomId usedId:(long long)usedId;
  /**
   * @brief 其他用户离开房间回调
   * @param roomId 房间Id
   * @param userId 用户Id
   * @param reason 离开原因
   **/
- (void)onMemberExitedWithRoomId:(long long)roomId usedId:(long long)usedId reason:(NSString*)reason;
  /**
   * @brief 本地流发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onLocalPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 本地流停止发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onLocalUnPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远程流发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemotePublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远程流停止发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteUnPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 订阅流回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onSubscribeWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 停止订阅流回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onUnSubscribeWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远端流信息变更通知
   * @param stream 流信息
   * @param trackType 音轨或者视频轨类型
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteTrackNotifyWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 本地音频或视频启用禁用通知回调
   * @param stream 流信息
   * @param trackType 音轨或者视频轨类型
   * @param mute 启用或禁用
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onLocalStreamMuteRspWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType mute:(BOOL)mute info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远端音频或视频启用禁用通知回调
   * @param stream 流信息
   * @param trackType 音轨或者视频轨类型
   * @param mute 启用或禁用
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteStreamMuteRspWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType mute:(BOOL)mute info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 发送端统计信息回调
   * @param streamStats 本地流统计信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onSendRTCStatsWithStreamStats:(BMXStreamStats*)streamStats info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远端统计信息回调
   * @param streamStats 远端流统计信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteRTCStatsWithStreamStats:(BMXStreamStats*)streamStats info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 本地音量调节回调
   * @param volume 音量信息
   **/
- (void)onLocalAudioLevelWithVolume:(int)volume;
  /**
   * @brief 远端音量调节回调
   * @param userId 用户id
   * @param volume 音量信息
   **/
- (void)onRemoteAudioLevelWithUserId:(long long)userId volume:(int)volume;
  /**
   * @brief 被踢信息回调
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onKickoffWithInfo:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 警告信息回调
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onWarningWithInfo:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 错误信息回调
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onErrorWithInfo:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 网络质量回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onNetworkQualityWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
@end

/**
 * @interface RTC room(room 归属于某一个session，session不存在了room肯定不存在，room不存在时session可能存在)
 **/
@interface BMXRTCRoom : BMXBaseObject
- (long long)roomId;
  /**
  * @brief 设置room的secret。secret可以从IM的信令交互处获得
  **/
- (void)setRoomSecret:(NSString*)roomSecret;
  /**
  * @brief room secret
  * @return NSString
  **/
- (NSString*)roomSecret;
  /**
  * @brief 设置room的pin。pin可以从IM的信令交互处获得。
  **/
- (void)setPin:(NSString*)pin;
  /**
  * @brief room pin
  * @return NSString
  **/
- (NSString*)pin;
  /**
  * @brief room permanent 是否为永久性房间
  * @return BOOL
  **/
- (BOOL)permanent;
  /**
  * @brief room 是否为私有
  * @return BOOL
  **/
- (BOOL)isPrivate;
  /**
  * @brief room 描述
  * @return NSString
  **/
- (NSString*)roomDescription;
  /**
  * @brief 用户在当前的room中与当前用户唯一关联的id，在其它成员想要订阅当前用户在该room的pub流时必须使用该数字。现在不需要实现
  * @return long long
  **/
- (long long)roomPrivateId;
- (void)dealloc;
@end

/**
 * @interface RTC服务
 **/
@interface BMXRTCService : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
  /**
   * @brief 初始化并存储engine对象实例
   * @param engine BMXRTCEngine对象实例指针
   */
- (void)setupRTCEngine:(BMXRTCEngine*)engine;
  /**
   * @brief 获取存储的engine对象实例
   * @return BMXRTCEngine* 
   */
- (BMXRTCEngine*)getRTCEngine;
  /**
  * @brief 获取BMXRTCSignalService的信令服务service（只有BMXRTCEngine需要使用该信令service，第三方RTCEngine对象不需要）
  **/
- (BMXRTCSignalService*)getBMXRTCSignalService;
  /**
  * @brief 发送消息，用来RTCService层进行交互信令发送的操作。
  * @param msg 发送的信息消息，消息的类型仅为信令消息
  **/
- (void)sendRTCMessageWithMsg:(BMXMessage*)msg;
- (void)dealloc;

  /**
  * @brief 添加RTCService回调监听
  * @param listener RTCService监听器
  **/
- (void)addDelegate:(id<BMXRTCServiceProtocol>)aDelegate;
- (void)addDelegate:(id<BMXRTCServiceProtocol>)aDelegate delegateQueue:(dispatch_queue_t)aQueue;
  /**
  * @brief 移除RTCService回调监听
  * @param listener RTCService监听器
  **/
- (void)removeDelegate:(id<BMXRTCServiceProtocol>)aDelegate;
  /**
  * @brief 添加RTCService回调监听
  * @param listener RTCService监听器
  **/
- (void)addRTCListener:(id<BMXRTCServiceProtocol>)listener;
  /**
  * @brief 移除RTCService回调监听
  * @param listener RTCService监听器
  **/
- (void)removeRTCListener:(id<BMXRTCServiceProtocol>)listener;
  /**
  * @brief 发送消息，用来RTCService层进行交互信令发送的操作。
  * @param msg 发送的信息消息，消息的类型仅为信令消息
  **/
- (void)sendRTCMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock;
@end

/**
 * @protocol RTCService状态监听者
 **/
@protocol BMXRTCServiceProtocol <NSObject>
@optional
  /**
   * @brief 发送信令消息状态变化
   * @param msg 发生变化的信令消息
   * @param error 
   **/
- (void)onRTCMessageStatusChangedWithMsg:(BMXMessage*)msg error:(BMXErrorCode)error;
  /**
   * @brief 接收到通话请求消息
   * @param msg 
   **/
- (void)onRTCCallMessageReceiveWithMsg:(BMXMessage*)msg;
  /**
   * @brief 接收到接通消息
   * @param msg 
   **/
- (void)onRTCPickupMessageReceiveWithMsg:(BMXMessage*)msg;
  /**
   * @brief 接收到挂断消息
   * @param msg 
   **/
- (void)onRTCHangupMessageReceiveWithMsg:(BMXMessage*)msg;
/**
 * @brief 接收到通话记录消息
 * @param msg
 **/
- (void)onRTCRecordMessageReceiveWithMsg:(BMXMessage*)msg;
@end

/**
 * @interface RTC session
 **/
@interface BMXRTCSession : BMXBaseObject
- (long long)sessionId;
  /**
  * @brief 发布者 handlerId
  * @return long long
  **/
- (long long)pubHandlerId;
  /**
  * @brief 订阅者 handlerId
  * @return long long
  **/
- (long long)subHandlerId;
- (void)dealloc;
@end

/**
 * @interface RTC Signal Service
 **/
@interface BMXRTCSignalService : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (void)createSession;
- (void)attachSessionWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type;
- (void)createRoomWithSession:(BMXRTCSession*)session options:(BMXRoomCreateOptions*)options;
- (void)destroyRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room isPermanent:(BOOL)isPermanent;
- (void)destroyRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room;
- (void)editRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room options:(BMXRoomEditOptions*)options;
- (void)isExistsRoomWithSession:(BMXRTCSession*)session roomId:(long long)roomId;
- (void)allowedWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room options:(BMXRoomAllowdOptions*)options;
- (void)kickParticipantsWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room userId:(long long)userId;
- (void)moderateWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room options:(BMXRoomModerateOptions*)options;
- (void)listRoomWithSession:(BMXRTCSession*)session;
- (void)listRoomparticipantsWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room;
- (void)trickleWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type sdpMid:(NSString*)sdpMid sdpMLineIndex:(int)sdpMLineIndex candidate:(NSString*)candidate;
- (void)trickleCompletedWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type;
- (void)pubJoinRoomWithSession:(BMXRTCSession*)session options:(BMXPubRoomJoinOptions*)options;
- (void)pubPublishWithSession:(BMXRTCSession*)session options:(BMXRoomPubConfigureOptions*)options sdp:(BMXRoomSDPInfo*)sdp;
- (void)pubUnPublishWithSession:(BMXRTCSession*)session;
- (void)pubConfigueWithSession:(BMXRTCSession*)session options:(BMXRoomPubConfigureOptions*)options sdp:(BMXRoomSDPInfo*)sdp;
- (void)subJoinRoomWithSession:(BMXRTCSession*)session options:(BMXRoomSubJoinOptions*)options;
- (void)subStartWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room sdp:(BMXRoomSDPInfo*)sdp;
- (void)subPauseWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room;
- (void)subUnsubscribeWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room streams:(BMXRTCStreams*)streams;
- (void)subConfigureWithSession:(BMXRTCSession*)session options:(BMXRoomSubConfigureOptions*)options sdp:(BMXRoomSDPInfo*)sdp;
- (void)subSwitchWithSession:(BMXRTCSession*)session options:(BMXRoomSubSwitchOptions*)options;
- (void)leaveRoomWithSession:(BMXRTCSession*)session;
- (void)hangUpSessionWithSession:(BMXRTCSession*)session;
- (void)detachSessionWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type;
- (void)destroySessionWithSession:(BMXRTCSession*)session;
- (void)dealloc;

- (void)addDelegate:(id<BMXRTCSignalServiceProtocol>)aDelegate;
- (void)addDelegate:(id<BMXRTCSignalServiceProtocol>)aDelegate delegateQueue:(dispatch_queue_t)aQueue;
- (void)removeDelegate:(id<BMXRTCSignalServiceProtocol>)aDelegate;
- (void)addRTCSignalListener:(id<BMXRTCSignalServiceProtocol>)listener;
- (void)removeRTCSignalListener:(id<BMXRTCSignalServiceProtocol>)listener;
@end

@protocol BMXRTCSignalServiceProtocol <NSObject>
@optional
- (void)onSessionCreateWithSession:(BMXRTCSession*)session error:(int)error reason:(NSString*)reason;
- (void)onSessionAttachWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type error:(int)error reason:(NSString*)reason;
- (void)onRoomCreateWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason;
- (void)onRoomDestroyWithSession:(BMXRTCSession*)session roomId:(long long)roomId error:(int)error reason:(NSString*)reason;
- (void)onRoomEditWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason;
- (void)onRoomExistWithSession:(BMXRTCSession*)session roomId:(long long)roomId exist:(BOOL)exist error:(int)error reason:(NSString*)reason;
- (void)onRoomAllowedWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room tokens:(TagList*)tokens error:(int)error reason:(NSString*)reason;
- (void)onRoomKickWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room userId:(long long)userId error:(int)error reason:(NSString*)reason;
- (void)onRoomModerateWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room userId:(long long)userId error:(int)error reason:(NSString*)reason;
- (void)onRoomListWithSession:(BMXRTCSession*)session rooms:(BMXRTCRooms*)rooms error:(int)error reason:(NSString*)reason;
- (void)onRoomListParticipantsWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room participants:(BMXRTCRoomParticipants*)participants error:(int)error reason:(NSString*)reason;
- (void)onPubJoinRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room publishers:(BMXRTCPublishers*)publishers error:(int)error reason:(NSString*)reason;
- (void)onOtherPubJoinRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room publishers:(BMXRTCPublishers*)publishers;
- (void)onPubConfigureWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room sdp:(BMXRoomSDPInfo*)sdp streams:(BMXRTCStreams*)streams error:(int)error reason:(NSString*)reason;
- (void)onPubUnPublishWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room senderId:(int)senderId error:(int)error reason:(NSString*)reason;
- (void)onPublishWebrtcUpWithSession:(BMXRTCSession*)session;
- (void)onSubJoinRoomUpdateWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room sdp:(BMXRoomSDPInfo*)sdp senderId:(long long)senderId streams:(BMXRTCStreams*)streams error:(int)error reason:(NSString*)reason;
- (void)onSubStartWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason;
- (void)onSubPauseWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason;
- (void)onSubUnsubscribeWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room streams:(BMXRTCStreams*)streams error:(int)error reason:(NSString*)reason;
- (void)onSubConfigureWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason;
- (void)onSubSwitchWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room publisher:(long long)publisher error:(int)error reason:(NSString*)reason;
- (void)onLeaveRoomWithSession:(BMXRTCSession*)session roomId:(long long)roomId senderId:(long long)senderId error:(int)error reason:(NSString*)reason;
- (void)onSubscribeWebrtcUpWithSession:(BMXRTCSession*)session senderId:(long long)senderId;
- (void)onMediaInfoWithSession:(BMXRTCSession*)session senderId:(long long)senderId type:(BMXTrackType)type receiving:(BOOL)receiving mid:(NSString*)mid;
- (void)onSlowlinkWithSession:(BMXRTCSession*)session senderId:(long long)senderId uplink:(BOOL)uplink nacks:(int)nacks;
- (void)onHangupWithSession:(BMXRTCSession*)session senderId:(long long)senderId reason:(NSString*)reason;
- (void)onSessionHangupWithSession:(BMXRTCSession*)session error:(long long)error reason:(NSString*)reason;
- (void)onSessionDetachWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type error:(int)error reason:(NSString*)reason;
- (void)onSessionDestroyWithSessionId:(long long)sessionId error:(int)error reason:(NSString*)reason;
@end

/**
 * @interface 群组
 **/
@interface BMXGroup : BMXBaseObject
  /**
   * @brief 群Id
   * @return long long
   **/
- (long long)groupId;
  /**
   * @brief 当前群组的群组类型（Private 私有群组，Public 公开群组，Chatroom 聊天室）
   * @return BMXGroup_GroupType
   **/
- (BMXGroup_GroupType)groupType;
  /**
   * @brief 在群里的昵称
   * @return NSString
   **/
- (NSString*)myNickname;
  /**
   * @brief 群名称
   * @return NSString
   **/
- (NSString*)name;
  /**
   * @brief 群描述
   * @return NSString
   **/
- (NSString*)description;
  /**
   * @brief 群头像Ratel服务器Url
   * @return NSString
   **/
- (NSString*)avatarRatelUrl;
  /**
   * @brief 群头像服务器Url
   * @return NSString
   **/
- (NSString*)avatarUrl;
  /**
   * @brief 群头像下载后的本地路径
   * @return NSString
   **/
- (NSString*)avatarPath;
  /**
   * @brief 群头像缩略图服务器Url
   * @return NSString
   **/
- (NSString*)avatarThumbnailUrl;
  /**
   * @brief 群头像缩略图下载后的本地路径
   * @return NSString
   **/
- (NSString*)avatarThumbnailPath;
  /**
   * @brief 群创建时间
   * @return long long
   **/
- (long long)createTime;
  /**
   * @brief 群扩展信息
   * @return JSON(std::string)
   **/
- (NSString*)extension;
  /**
   * @brief 群Owner
   * @return long long
   **/
- (long long)ownerId;
  /**
   * @brief 最大人数
   * @return int
   **/
- (int)capacity;
  /**
   * @brief 群成员数量，包含Owner，admins 和members
   * @return int
   **/
- (int)membersCount;
  /**
   * @brief 群管理员数量
   * @return int
   **/
- (int)adminsCount;
  /**
   * @brief 黑名单数量
   * @return int
   **/
- (int)blockListSize;
  /**
   * @brief 禁言数量
   * @return int
   **/
- (int)bannedListSize;
  /**
   * @brief 群共享文件数量
   * @return int
   **/
- (int)sharedFilesCount;
  /**
   * @brief 最新群公告id
   * @return long long
   **/
- (long long)latestAnnouncementId;
  /**
   * @brief 群消息通知类型
   * @return MsgPushMode
   **/
- (BMXGroup_MsgPushMode)msgPushMode;
  /**
   * @brief 群信息修改模式
   * @return BMXGroup_ModifyMode
   **/
- (BMXGroup_ModifyMode)modifyMode;
  /**
   * @brief 入群审批模式
   * @return BMXGroup_JoinAuthMode
   **/
- (BMXGroup_JoinAuthMode)joinAuthMode;
  /**
   * @brief 入群邀请模式
   * @return BMXGroup_InviteMode
   **/
- (BMXGroup_InviteMode)inviteMode;
  /**
   * @brief 群消息屏蔽模式
   * @return BMXGroup_MsgMuteMode
   **/
- (BMXGroup_MsgMuteMode)msgMuteMode;
  /**
   * @brief 当前群组的状态。（Normal 正常， Destroyed 以销毁）
   * @return BMXGroup_GroupStatus
   **/
- (BMXGroup_GroupStatus)groupStatus;
  /**
   * Deprecated use roleType instead.
   * @brief 当前用户是否是群成员
   * @return BOOL
   **/
- (BOOL)isMember;
  /**
   * @brief 是否开启群消息已读功能
   * @return BOOL
   **/
- (BOOL)enableReadAck;
  /**
   * @brief 是否可以加载显示历史聊天记录
   * @return BOOL
   **/
- (BOOL)historyVisible;
  /**
   * @brief 成员在群组内的角色类型
   * @return BMXGroup_MemberRoleType
   **/
- (BMXGroup_MemberRoleType)roleType;
  /**
   * @brief 群组全员禁言到期时间
   * @return long long
   **/
- (long long)banExpireTime;
- (void)dealloc;
@end

/**
 * @interface 群组Service
 **/
@interface BMXGroupService : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
  /**
   * @brief 获取群组列表，如果设置了forceRefresh则从服务器拉取
   * @param list 群组id列表，传入空列表函数返回后从此处获取返回的群组id列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)get:(BMXGroupList*)list forceRefresh:(BOOL)forceRefresh;
- (BMXErrorCode)searchWithList:(BMXGroupList*)list forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 通过传入群组的id列表获取群组信息列表，如果设置了forceRefresh则从服务器拉取
   * @param groupIdList 群组id列表
   * @param list 群组详细信息列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)fetchGroupsByIdListWithGroupIdList:(ListOfLongLong*)groupIdList list:(BMXGroupList*)list forceRefresh:(BOOL)forceRefresh;
- (BMXErrorCode)searchWithGroupIdList:(ListOfLongLong*)groupIdList list:(BMXGroupList*)list forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 通过群组id获取群信息，如果设置了forceRefresh则从服务器拉取
   * @param groupId 要搜索的群组id
   * @param group 搜索返回的群组信息，传入指向为空的shared_ptr对象函数执行后从此获取返回结果
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)fetchGroupByIdWithGroupId:(long long)groupId group:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh;
- (BMXErrorCode)searchWithGroupId:(long long)groupId group:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 通过群名称查询本地群信息，从本地数据库中通过群名称查询获取群组
   * @param list 搜索结果返回的群列表信息
   * @param name 查询的群名称关键字
   * @return BMXErrorCode
   **/
- (BMXErrorCode)fetchLocalGroupsByNameWithList:(BMXGroupList*)list name:(NSString*)name;
- (BMXErrorCode)searchWithList:(BMXGroupList*)list name:(NSString*)name;
  /**
   * @brief 创建群
   * @param options 创建群组时传入的参数选项
   * @param group 创建返回的结果，传入指向为空的shared_ptr对象函数执行后从此获取返回结果
   * @return BMXErrorCode
   **/
- (BMXErrorCode)createWithOptions:(BMXGroupServiceCreateGroupOptions*)options group:(BMXGroup*)group;
  /**
   * @brief 销毁群
   * @param group 要销毁的群组
   * @return BMXErrorCode
   **/
- (BMXErrorCode)destroyWithGroup:(BMXGroup*)group;
  /**
   * @brief 加入一个群，根据群设置可能需要管理员批准
   * @param group 要加入的群组
   * @param message 申请入群的信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)joinWithGroup:(BMXGroup*)group message:(NSString*)message;
  /**
   * @brief 退出群
   * @param group 要退出的群组
   * @return BMXErrorCode
   **/
- (BMXErrorCode)leaveWithGroup:(BMXGroup*)group;
  /**
   * @brief 获取群详情，从服务端拉取最新信息
   * @param group 要获取群组最新信息的群组
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getInfo:(BMXGroup*)group;
  /**
   * @brief 获取群组成员详细信息
   * @param group 进行操作的群组
   * @param members 要获取群组成员信息详情的群成员id
   * @param list 返回的群成员详细，传入空列表在函数操作后从此处获取群成员详细信息列表
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getMembersNickname:(BMXGroup*)group members:(ListOfLongLong*)members list:(BMXGroupMemberList*)list;
  /**
   * @brief 分页获取群组邀请列表
   * @param result 分页获取的群组邀请列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getInvitationList:(BMXGroupInvitationPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize;
- (BMXErrorCode)getInvitationList:(BMXGroupInvitationPage*)result cursor:(NSString*)cursor;
- (BMXErrorCode)getInvitationList:(BMXGroupInvitationPage*)result;
  /**
   * @brief 分页获取群组申请列表
   * @param list 需要获取群组申请列表信息的群组id列表
   * @param result 分页获取的群组申请列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getApplicationList:(BMXGroupList*)list result:(BMXGroupApplicationPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize;
- (BMXErrorCode)getApplicationList:(BMXGroupList*)list result:(BMXGroupApplicationPage*)result cursor:(NSString*)cursor;
- (BMXErrorCode)getApplicationList:(BMXGroupList*)list result:(BMXGroupApplicationPage*)result;
  /**
   * @brief 分页获取群成员列表，如果设置了forceRefresh则从服务器拉取，单页最大数量为500.
   * @param group 进行操作的群组
   * @param result 分页获取的群成员列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getMembers:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize;
- (BMXErrorCode)getMembers:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result cursor:(NSString*)cursor;
- (BMXErrorCode)getMembers:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result;
  /**
   * @brief 获取群成员列表，如果设置了forceRefresh则从服务器拉取，最多拉取1000人
   * @param group 进行操作的群组
   * @param list 群成员列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getMembers:(BMXGroup*)group list:(BMXGroupMemberList*)list forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 添加群成员
   * @param group 进行操作的群组
   * @param members 要添加进群的成员id列表
   * @param message 添加成员原因信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)addMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members message:(NSString*)message;
  /**
   * @brief 删除群成员
   * @param group 进行操作的群组
   * @param members 要删除的群组成员id列表
   * @param reason 删除的原因
   * @return BMXErrorCode
   **/
- (BMXErrorCode)removeMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members reason:(NSString*)reason;
  /**
   * @brief 添加管理员
   * @param group 进行操作的群组
   * @param admins 要添加为管理员的成员id列表
   * @param message 添加为管理员的原因
   * @return BMXErrorCode
   **/
- (BMXErrorCode)addAdminsWithGroup:(BMXGroup*)group admins:(ListOfLongLong*)admins message:(NSString*)message;
  /**
   * @brief 删除管理员
   * @param group 进行操作的群组
   * @param admins 要从管理员移除的成员id列表
   * @param reason 要移除管理员的原因
   * @return BMXErrorCode
   **/
- (BMXErrorCode)removeAdminsWithGroup:(BMXGroup*)group admins:(ListOfLongLong*)admins reason:(NSString*)reason;
  /**
   * @brief 获取Admins列表，如果设置了forceRefresh则从服务器拉取
   * @param group 进行操作的群组
   * @param list 群管理员列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getAdmins:(BMXGroup*)group list:(BMXGroupMemberList*)list forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 添加黑名单
   * @param group 进行操作的群组
   * @param members 要加入黑名单的群成员id列表
   * @return BMXErrorCode
   **/
- (BMXErrorCode)blockMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members;
  /**
   * @brief 从黑名单删除
   * @param group 进行操作的群组
   * @param members 从黑名单移除的用户id列表
   * @return BMXErrorCode
   **/
- (BMXErrorCode)unblockMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members;
  /**
   * @brief 分页获取黑名单
   * @param group 进行操作的群组
   * @param result 分页获取的黑名单列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getBlockList:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize;
- (BMXErrorCode)getBlockList:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result cursor:(NSString*)cursor;
- (BMXErrorCode)getBlockList:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result;
  /**
   * @brief 获取黑名单
   * @param group 进行操作的群组
   * @param list 群黑名单列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getBlockList:(BMXGroup*)group list:(BMXGroupMemberList*)list forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 禁言
   * @param group 进行操作的群组
   * @param members 被禁言的群成员id列表
   * @param duration 禁言时长
   * @param reason 禁言原因
   * @return BMXErrorCode
   **/
- (BMXErrorCode)banMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members duration:(long long)duration reason:(NSString*)reason;
- (BMXErrorCode)banMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members duration:(long long)duration;
  /**
   * @brief 全员禁言，当前服务器时间加上禁言时长后计算出全员禁言到期时间（只有管理和群主可以发言）
   * @param group 进行操作的群组
   * @param duration 禁言时长(分钟)
   * @return BMXErrorCode
   **/
- (BMXErrorCode)banGroupWithGroup:(BMXGroup*)group duration:(long long)duration;
  /**
   * @brief 解除禁言
   * @param group 进行操作的群组
   * @param members 被解除禁言的群成员id列表
   * @return BMXErrorCode
   **/
- (BMXErrorCode)unbanMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members;
  /**
   * @brief 全员解除禁言
   * @param group 进行操作的群组
   * @return BMXErrorCode
   **/
- (BMXErrorCode)unbanGroupWithGroup:(BMXGroup*)group;
  /**
   * @brief 分页获取禁言列表
   * @param group 进行操作的群组
   * @param result 分页获取的禁言列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getBannedMembers:(BMXGroup*)group result:(BMXGroupBannedMemberResultPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize;
- (BMXErrorCode)getBannedMembers:(BMXGroup*)group result:(BMXGroupBannedMemberResultPage*)result cursor:(NSString*)cursor;
- (BMXErrorCode)getBannedMembers:(BMXGroup*)group result:(BMXGroupBannedMemberResultPage*)result;
  /**
   * @brief 获取禁言列表
   * @param group 进行操作的群组
   * @param list 群禁言列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getBannedMembers:(BMXGroup*)group list:(BMXGroupBannedMemberList*)list;
  /**
   * @brief 设置是否屏蔽群消息
   * @param group 进行操作的群组
   * @param mode 群屏蔽的模式
   * @return BMXErrorCode
   **/
- (BMXErrorCode)muteMessageWithGroup:(BMXGroup*)group mode:(BMXGroup_MsgMuteMode)mode;
  /**
   * @brief 接受入群申请
   * @param group 进行操作的群组
   * @param applicantId 申请进群的用户id
   * @return BMXErrorCode
   **/
- (BMXErrorCode)acceptApplicationWithGroup:(BMXGroup*)group applicantId:(long long)applicantId;
  /**
   * @brief 拒绝入群申请
   * @param group 进行操作的群组
   * @param applicantId 申请进群的用户id
   * @param reason 拒绝的原因
   * @return BMXErrorCode
   **/
- (BMXErrorCode)declineApplicationWithGroup:(BMXGroup*)group applicantId:(long long)applicantId reason:(NSString*)reason;
- (BMXErrorCode)declineApplicationWithGroup:(BMXGroup*)group applicantId:(long long)applicantId;
  /**
   * @brief 接受入群邀请
   * @param group 进行操作的群组
   * @param inviter 邀请者id
   * @return BMXErrorCode
   **/
- (BMXErrorCode)acceptInvitationWithGroup:(BMXGroup*)group inviter:(long long)inviter;
  /**
   * @brief 拒绝入群邀请
   * @param group 进行操作的群组
   * @param inviter 邀请者id
   * @param reason 拒绝的原因
   * @return BMXErrorCode
   **/
- (BMXErrorCode)declineInvitationWithGroup:(BMXGroup*)group inviter:(long long)inviter reason:(NSString*)reason;
- (BMXErrorCode)declineInvitationWithGroup:(BMXGroup*)group inviter:(long long)inviter;
  /**
   * @brief 转移群主
   * @param group 进行操作的群组
   * @param newOwnerId 转让为新群主的用户id
   * @return BMXErrorCode
   **/
- (BMXErrorCode)transferOwnerWithGroup:(BMXGroup*)group newOwnerId:(long long)newOwnerId;
  /**
   * @brief 添加群共享文件
   * @param group 进行操作的群组
   * @param filePath 文件的本地路径
   * @param displayName 文件的展示名
   * @param extensionName 文件的扩展名
   * @param Callback 上传回调函数
   * @return BMXErrorCode
   **/
- (BMXErrorCode)uploadSharedFileWithGroup:(BMXGroup*)group filePath:(NSString*)filePath displayName:(NSString*)displayName extensionName:(NSString*)extensionName arg5:(void(^)(int progress))arg5;
  /**
   * @brief 取消上传群共享文件
   * @param group 进行操作的群组
   * @param filePath 文件的本地路径
   * @return BMXErrorCode
   **/
- (BMXErrorCode)cancelUploadSharedFileWithGroup:(BMXGroup*)group filePath:(NSString*)filePath;
  /**
   * @brief 移除群共享文件
   * @param group 进行操作的群组
   * @param sharedFile 删除的群共享文件
   * @return BMXErrorCode
   **/
- (BMXErrorCode)removeSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile;
  /**
   * @brief 下载群共享文件
   * @param group 进行操作的群组
   * @param sharedFile 下载的群共享文件
   * @param Callback 下载回调函数
   * @return BMXErrorCode
   **/
- (BMXErrorCode)downloadSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile arg3:(void(^)(int progress))arg3;
    /**
   * @brief 取消下载群共享文件
   * @param group 进行操作的群组
   * @param sharedFile 下载的群共享文件
   * @return BMXErrorCode
   **/
- (BMXErrorCode)cancelDownloadSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile;
  /**
   * @brief 获取群共享文件列表
   * @param group 进行操作的群组
   * @param list 群共享文件列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getSharedFilesList:(BMXGroup*)group list:(BMXGroupSharedFileList*)list forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 修改群共享文件名称
   * @param group 进行操作的群组
   * @param sharedFile 进行更改的群共享文件
   * @param name 修改的群共享文件名称
   * @return BMXErrorCode
   **/
- (BMXErrorCode)changeSharedFileNameWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile name:(NSString*)name;
  /**
   * @brief 获取最新的群公告
   * @param group 进行操作的群组
   * @param announcement 最新的群组公告，传入指向为空的shared_ptr对象函数返回后从此处获取最新的群组公告
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getLatestAnnouncement:(BMXGroup*)group announcement:(BMXGroupAnnouncement*)announcement forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 获取群公告列表
   * @param group 进行操作的群组
   * @param list 群公告列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getAnnouncementList:(BMXGroup*)group list:(BMXGroupAnnouncementList*)list forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 设置群公告
   * @param group 进行操作的群组
   * @param title 群公告的标题
   * @param content 群公告的内容
   * @return BMXErrorCode
   **/
- (BMXErrorCode)editAnnouncementWithGroup:(BMXGroup*)group title:(NSString*)title content:(NSString*)content;
  /**
   * @brief 删除群公告
   * @param group 进行操作的群组
   * @param announcementId 删除的群公告id
   * @return BMXErrorCode
   **/
- (BMXErrorCode)deleteAnnouncementWithGroup:(BMXGroup*)group announcementId:(long long)announcementId;
  /**
   * @brief 设置群名称
   * @param group 进行操作的群组
   * @param name 群组名称
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setName:(BMXGroup*)group name:(NSString*)name;
  /**
   * @brief 设置群描述信息
   * @param group 进行操作的群组
   * @param description 群组描述
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setDescription:(BMXGroup*)group description:(NSString*)description;
  /**
   * @brief 设置群扩展信息
   * @param group 进行操作的群组
   * @param extension 群组的扩展信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setExtension:(BMXGroup*)group extension:(NSString*)extension;
  /**
   * @brief 设置在群里的昵称
   * @param group 进行操作的群组
   * @param nickname 用户在群组内的昵称
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setMyNickname:(BMXGroup*)group nickname:(NSString*)nickname;
  /**
   * @brief 设置群消息通知模式
   * @param group 进行操作的群组
   * @param mode 群消息通知模式
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setMsgPushMode:(BMXGroup*)group mode:(BMXGroup_MsgPushMode)mode;
  /**
   * @brief 设置入群审批模式
   * @param group 进行操作的群组
   * @param mode 入群审批模式
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setJoinAuthMode:(BMXGroup*)group mode:(BMXGroup_JoinAuthMode)mode;
  /**
   * @brief 设置邀请模式
   * @param group 进行操作的群组
   * @param mode 群组的邀请模式
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setInviteMode:(BMXGroup*)group mode:(BMXGroup_InviteMode)mode;
  /**
   * @brief 设置是否允许群成员设置群信息
   * @param group 进行操作的群组
   * @param enable 是否允许操作
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setAllowMemberModify:(BMXGroup*)group enable:(BOOL)enable;
  /**
   * @brief 设置是否开启群消息已读功能
   * @param group 进行操作的群组
   * @param enable 是否开启
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setEnableReadAck:(BMXGroup*)group enable:(BOOL)enable;
  /**
   * @brief 设置群成员是否开可见群历史聊天记录
   * @param group 进行操作的群组
   * @param enable 是否开启
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setHistoryVisible:(BMXGroup*)group enable:(BOOL)enable;
  /**
   * @brief 设置群头像
   * @param group 进行操作的群组
   * @param avatarPath 群头像文件的本地路径
   * @param Callback 上传回调函数
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setAvatar:(BMXGroup*)group avatarPath:(NSString*)avatarPath arg3:(void(^)(int progress))arg3;
  /**
   * @brief 下载群头像
   * @param group 进行操作的群组
   * @param thumbnail 设置为true下载缩略图，false下载原图
   * @param callback 下载回调函数
   * @return BMXErrorCode
   **/
- (BMXErrorCode)downloadAvatarWithGroup:(BMXGroup*)group thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback;

  /**
   * @brief 获取群组列表，如果设置了forceRefresh则从服务器拉取
   * @param list 群组id列表，传入空列表函数返回后从此处获取返回的群组id列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (void)get:(BOOL)forceRefresh completion:(void (^)(BMXGroupList *res, BMXError *aError)) resBlock;
  /**
   * @brief 通过传入群组的id列表获取群组信息列表，如果设置了forceRefresh则从服务器拉取
   * @param groupIdList 群组id列表
   * @param list 群组详细信息列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (void)fetchGroupsByIdListWithGroupIdList:(ListOfLongLong*)groupIdList forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupList *res, BMXError *aError)) resBlock;
  /**
   * @brief 通过群组id获取群信息，如果设置了forceRefresh则从服务器拉取
   * @param groupId 要搜索的群组id
   * @param group 搜索返回的群组信息，传入指向为空的shared_ptr对象函数执行后从此获取返回结果
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (void)fetchGroupByIdWithGroupId:(long long)groupId forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroup *res, BMXError *aError)) resBlock;
- (void)searchWithGroupId:(long long)groupId forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroup *res, BMXError *aError)) resBlock;
  /**
   * @brief 通过群名称查询本地群信息，从本地数据库中通过群名称查询获取群组
   * @param list 搜索结果返回的群列表信息
   * @param name 查询的群名称关键字
   * @return BMXErrorCode
   **/
- (void)fetchLocalGroupsByName:(NSString*)name completion:(void (^)(BMXGroupList *res, BMXError *aError)) resBlock;
  /**
   * @brief 创建群
   * @param options 创建群组时传入的参数选项
   * @param group 创建返回的结果，传入指向为空的shared_ptr对象函数执行后从此获取返回结果
   * @return BMXErrorCode
   **/
- (void)createWithOptions:(BMXGroupServiceCreateGroupOptions*)options completion:(void (^)(BMXGroup* res, BMXError *aError)) resBlock;
  /**
   * @brief 销毁群
   * @param group 要销毁的群组
   * @return BMXErrorCode
   **/
- (void)destroyWithGroup:(BMXGroup*)group completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 加入一个群，根据群设置可能需要管理员批准
   * @param group 要加入的群组
   * @param message 申请入群的信息
   * @return BMXErrorCode
   **/
- (void)joinWithGroup:(BMXGroup*)group message:(NSString*)message completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 退出群
   * @param group 要退出的群组
   * @return BMXErrorCode
   **/
- (void)leaveWithGroup:(BMXGroup*)group completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 获取群详情，从服务端拉取最新信息
   * @param group 要获取群组最新信息的群组
   * @return BMXErrorCode
   **/
- (void)getInfo:(BMXGroup*)group completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 获取群组成员详细信息
   * @param group 进行操作的群组
   * @param members 要获取群组成员信息详情的群成员id
   * @param list 返回的群成员详细，传入空列表在函数操作后从此处获取群成员详细信息列表
   * @return BMXErrorCode
   **/
- (void)getMembersNickname: (BMXGroup*)group members:(ListOfLongLong*)members completion:(void (^)(BMXGroupMemberList* res, BMXError *aError)) resBlock;
  /**
   * @brief 分页获取群组邀请列表
   * @param result 分页获取的群组邀请列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (void)getInvitationList: (NSString*)cursor pageSize:(int)pageSize completion:(void (^)(BMXGroupInvitationPage* res, BMXError *aError)) resBlock;
  /**
   * @brief 分页获取群组申请列表
   * @param list 需要获取群组申请列表信息的群组id列表
   * @param result 分页获取的群组申请列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (void)getApplicationList:(BMXGroupList*)list cursor:(NSString*)cursor pageSize:(int)pageSize completion:(void (^)(BMXGroupApplicationPage* res, BMXError *aError)) resBlock;
  /**
   * @brief 分页获取群成员列表，如果设置了forceRefresh则从服务器拉取，单页最大数量为500.
   * @param group 进行操作的群组
   * @param result 分页获取的群成员列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (void)getMembers:(BMXGroup*)group cursor:(NSString*)cursor pageSize:(int)pageSize completion:(void (^)(BMXGroupMemberResultPage* res, BMXError *aError)) resBlock;
  /**
   * @brief 获取群成员列表，如果设置了forceRefresh则从服务器拉取，最多拉取1000人
   * @param group 进行操作的群组
   * @param list 群成员列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (void)getMembers:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupMemberList* res, BMXError *aError)) resBlock;
  /**
   * @brief 添加群成员
   * @param group 进行操作的群组
   * @param members 要添加进群的成员id列表
   * @param message 添加成员原因信息
   * @return BMXErrorCode
   **/
- (void)addMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members message:(NSString*)message completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 删除群成员
   * @param group 进行操作的群组
   * @param members 要删除的群组成员id列表
   * @param reason 删除的原因
   * @return BMXErrorCode
   **/
- (void)removeMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members reason:(NSString*)reason completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 添加管理员
   * @param group 进行操作的群组
   * @param admins 要添加为管理员的成员id列表
   * @param message 添加为管理员的原因
   * @return BMXErrorCode
   **/
- (void)addAdminsWithGroup:(BMXGroup*)group admins:(ListOfLongLong*)admins message:(NSString*)message completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 删除管理员
   * @param group 进行操作的群组
   * @param admins 要从管理员移除的成员id列表
   * @param reason 要移除管理员的原因
   * @return BMXErrorCode
   **/
- (void)removeAdminsWithGroup:(BMXGroup*)group admins:(ListOfLongLong*)admins reason:(NSString*)reason completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 获取Admins列表，如果设置了forceRefresh则从服务器拉取
   * @param group 进行操作的群组
   * @param list 群管理员列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (void)getAdmins:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupMemberList *res, BMXError *aError)) resBlock;
  /**
   * @brief 添加黑名单
   * @param group 进行操作的群组
   * @param members 要加入黑名单的群成员id列表
   * @return BMXErrorCode
   **/
- (void)blockMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 从黑名单删除
   * @param group 进行操作的群组
   * @param members 从黑名单移除的用户id列表
   * @return BMXErrorCode
   **/
- (void)unblockMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 分页获取黑名单
   * @param group 进行操作的群组
   * @param result 分页获取的黑名单列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (void)getBlockList:(BMXGroup*)group cursor:(NSString*)cursor pageSize:(int)pageSize completion:(void (^)(BMXGroupMemberResultPage* res, BMXError *aError)) resBlock;
  /**
   * @brief 获取黑名单
   * @param group 进行操作的群组
   * @param list 群黑名单列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (void)getBlockList:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupMemberList* res, BMXError *aError)) resBlock;
  /**
   * @brief 禁言
   * @param group 进行操作的群组
   * @param members 被禁言的群成员id列表
   * @param duration 禁言时长
   * @param reason 禁言原因
   * @return BMXErrorCode
   **/
- (void)banMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members duration:(long long)duration reason:(NSString*)reason completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 全员禁言，当前服务器时间加上禁言时长后计算出全员禁言到期时间（只有管理和群主可以发言）
   * @param group 进行操作的群组
   * @param duration 禁言时长(分钟)
   * @return BMXErrorCode
   **/
- (void)banGroupWithGroup:(BMXGroup*)group duration:(long long)duration completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 解除禁言
   * @param group 进行操作的群组
   * @param members 被解除禁言的群成员id列表
   * @return BMXErrorCode
   **/
- (void)unbanMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 全员解除禁言
   * @param group 进行操作的群组
   * @return BMXErrorCode
   **/
- (void)unbanGroupWithGroup:(BMXGroup*)group completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 分页获取禁言列表
   * @param group 进行操作的群组
   * @param result 分页获取的禁言列表，传入指向为空的shared_ptr对象函数执行后从此处获取结果
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (void)getBannedMembers:(BMXGroup*)group cursor:(NSString*)cursor pageSize:(int)pageSize completion:(void (^)(BMXGroupBannedMemberResultPage* res, BMXError *aError)) resBlock;
  /**
   * @brief 获取禁言列表
   * @param group 进行操作的群组
   * @param list 群禁言列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @return BMXErrorCode
   **/
- (void)getBannedMembers:(BMXGroup*)group completion:(void (^)(BMXGroupBannedMemberList* res, BMXError *aError)) resBlock;
  /**
   * @brief 设置是否屏蔽群消息
   * @param group 进行操作的群组
   * @param mode 群屏蔽的模式
   * @return BMXErrorCode
   **/
- (void)muteMessageWithGroup:(BMXGroup*)group mode:(BMXGroup_MsgMuteMode)mode completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 接受入群申请
   * @param group 进行操作的群组
   * @param applicantId 申请进群的用户id
   * @return BMXErrorCode
   **/
- (void)acceptApplicationWithGroup:(BMXGroup*)group applicantId:(long long)applicantId completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 拒绝入群申请
   * @param group 进行操作的群组
   * @param applicantId 申请进群的用户id
   * @param reason 拒绝的原因
   * @return BMXErrorCode
   **/
- (void)declineApplicationWithGroup:(BMXGroup*)group applicantId:(long long)applicantId reason:(NSString*)reason completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 接受入群邀请
   * @param group 进行操作的群组
   * @param inviter 邀请者id
   * @return BMXErrorCode
   **/
- (void)acceptInvitationWithGroup:(BMXGroup*)group inviter:(long long)inviter completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 拒绝入群邀请
   * @param group 进行操作的群组
   * @param inviter 邀请者id
   * @param reason 拒绝的原因
   * @return BMXErrorCode
   **/
- (void)declineInvitationWithGroup:(BMXGroup*)group inviter:(long long)inviter reason:(NSString*)reason completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 转移群主
   * @param group 进行操作的群组
   * @param newOwnerId 转让为新群主的用户id
   * @return BMXErrorCode
   **/
- (void)transferOwnerWithGroup:(BMXGroup*)group newOwnerId:(long long)newOwnerId completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 添加群共享文件
   * @param group 进行操作的群组
   * @param filePath 文件的本地路径
   * @param displayName 文件的展示名
   * @param extensionName 文件的扩展名
   * @param Callback 上传回调函数
   * @return BMXErrorCode
   **/
- (void)uploadSharedFileWithGroup:(BMXGroup*)group filePath:(NSString*)filePath displayName:(NSString*)displayName extensionName:(NSString*)extensionName arg5:(void(^)(int progress))arg5 completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 取消上传群共享文件
   * @param group 进行操作的群组
   * @param filePath 文件的本地路径
   * @return BMXErrorCode
   **/
- (void)cancelUploadSharedFileWithGroup:(BMXGroup*)group filePath:(NSString*)filePath completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 移除群共享文件
   * @param group 进行操作的群组
   * @param sharedFile 删除的群共享文件
   * @return BMXErrorCode
   **/
- (void)removeSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 下载群共享文件
   * @param group 进行操作的群组
   * @param sharedFile 下载的群共享文件
   * @param Callback 下载回调函数
   * @return BMXErrorCode
   **/
- (void)downloadSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile arg3:(void(^)(int progress))arg3 completion:(void (^)(BMXError *aError)) resBlock;
    /**
   * @brief 取消下载群共享文件
   * @param group 进行操作的群组
   * @param sharedFile 下载的群共享文件
   * @return BMXErrorCode
   **/
- (void)cancelDownloadSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 获取群共享文件列表
   * @param group 进行操作的群组
   * @param list 群共享文件列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (void)getSharedFilesList:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupSharedFileList* res, BMXError *aError)) resBlock;
  /**
   * @brief 修改群共享文件名称
   * @param group 进行操作的群组
   * @param sharedFile 进行更改的群共享文件
   * @param name 修改的群共享文件名称
   * @return BMXErrorCode
   **/
- (void)changeSharedFileNameWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile name:(NSString*)name completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 获取最新的群公告
   * @param group 进行操作的群组
   * @param announcement 最新的群组公告，传入指向为空的shared_ptr对象函数返回后从此处获取最新的群组公告
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (void)getLatestAnnouncement:(BMXGroup*)group announcement:(BMXGroupAnnouncement*)announcement forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupAnnouncement* res, BMXError *aError)) resBlock;
  /**
   * @brief 获取群公告列表
   * @param group 进行操作的群组
   * @param list 群公告列表，传入空列表函数返回后从此处获取返回的群组详细信息列表
   * @param forceRefresh 设置为true强制从服务器获取，本地获取失败的情况sdk会自动从服务器获取
   * @return BMXErrorCode
   **/
- (void)getAnnouncementList:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupAnnouncementList* res, BMXError *aError)) resBlock;
  /**
   * @brief 设置群公告
   * @param group 进行操作的群组
   * @param title 群公告的标题
   * @param content 群公告的内容
   * @return BMXErrorCode
   **/
- (void)editAnnouncementWithGroup:(BMXGroup*)group title:(NSString*)title content:(NSString*)content completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 删除群公告
   * @param group 进行操作的群组
   * @param announcementId 删除的群公告id
   * @return BMXErrorCode
   **/
- (void)deleteAnnouncementWithGroup:(BMXGroup*)group announcementId:(long long)announcementId completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置群名称
   * @param group 进行操作的群组
   * @param name 群组名称
   * @return BMXErrorCode
   **/
- (void)setName:(BMXGroup*)group name:(NSString*)name completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置群描述信息
   * @param group 进行操作的群组
   * @param description 群组描述
   * @return BMXErrorCode
   **/
- (void)setDescription:(BMXGroup*)group description:(NSString*)description completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置群扩展信息
   * @param group 进行操作的群组
   * @param extension 群组的扩展信息
   * @return BMXErrorCode
   **/
- (void)setExtension:(BMXGroup*)group extension:(NSString*)extension completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置在群里的昵称
   * @param group 进行操作的群组
   * @param nickname 用户在群组内的昵称
   * @return BMXErrorCode
   **/
- (void)setMyNickname:(BMXGroup*)group nickname:(NSString*)nickname completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置群消息通知模式
   * @param group 进行操作的群组
   * @param mode 群消息通知模式
   * @return BMXErrorCode
   **/
- (void)setMsgPushMode:(BMXGroup*)group mode:(BMXGroup_MsgPushMode)mode completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置入群审批模式
   * @param group 进行操作的群组
   * @param mode 入群审批模式
   * @return BMXErrorCode
   **/
- (void)setJoinAuthMode:(BMXGroup*)group mode:(BMXGroup_JoinAuthMode)mode completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置邀请模式
   * @param group 进行操作的群组
   * @param mode 群组的邀请模式
   * @return BMXErrorCode
   **/
- (void)setInviteMode:(BMXGroup*)group mode:(BMXGroup_InviteMode)mode completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置是否允许群成员设置群信息
   * @param group 进行操作的群组
   * @param enable 是否允许操作
   * @return BMXErrorCode
   **/
- (void)setAllowMemberModify:(BMXGroup*)group enable:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置是否开启群消息已读功能
   * @param group 进行操作的群组
   * @param enable 是否开启
   * @return BMXErrorCode
   **/
- (void)setEnableReadAck:(BMXGroup*)group enable:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置群成员是否开可见群历史聊天记录
   * @param group 进行操作的群组
   * @param enable 是否开启
   * @return BMXErrorCode
   **/
- (void)setHistoryVisible:(BMXGroup*)group enable:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置群头像
   * @param group 进行操作的群组
   * @param avatarPath 群头像文件的本地路径
   * @param Callback 上传回调函数
   * @return BMXErrorCode
   **/
- (void)setAvatar:(BMXGroup*)group avatarPath:(NSString*)avatarPath arg3:(void(^)(int progress))arg3 completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 下载群头像
   * @param group 进行操作的群组
   * @param thumbnail 设置为true下载缩略图，false下载原图
   * @param callback 下载回调函数
   * @return BMXErrorCode
   **/
- (void)downloadAvatarWithGroup:(BMXGroup*)group thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback completion:(void (^)(BMXError *aError)) resBlock;
- (void)dealloc;

  /**
   * @brief 添加群组变化监听者
   * @param listener 群组变化监听者
   **/
- (void)addDelegate:(id<BMXGroupServiceProtocol>)aDelegate;
- (void)addDelegate:(id<BMXGroupServiceProtocol>)aDelegate delegateQueue:(dispatch_queue_t)aQueue;
  /**
   * @brief 移除群组变化监听者
   * @param listener 群组变化监听者
   **/
- (void)removeDelegate:(id<BMXGroupServiceProtocol>)aDelegate;
  /**
   * @brief 添加群组变化监听者
   * @param listener 群组变化监听者
   **/
- (void)addGroupListener:(id<BMXGroupServiceProtocol>)listener;
  /**
   * @brief 移除群组变化监听者
   * @param listener 群组变化监听者
   **/
- (void)removeGroupListener:(id<BMXGroupServiceProtocol>)listener;

@end

/**
 * @interface 图片消息附件
 **/
@interface BMXImageAttachment : BMXFileAttachment
- (id)initWithData:(NSData *)aData thumbnailData:(NSData *)thumbnailData imageSize:(BMXMessageAttachmentSize *) size displayName:(NSString *)displayName conversationId:(long long)conversationId;
  /**
   * @brief 构造函数，构建发送图片消息附件
   * @param path 本地路径
   * @param size 图片的大小，宽度和高度
   * @param displayName 展示名
   **/
- (id)initWithPath:(NSString*)path size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName;
- (id)initWithPath:(NSString*)path size:(BMXMessageAttachmentSize*)size;
  /**
   * @brief 构造函数，构建接收图片消息附件
   * @param url  图片ratel服务器地址
   * @param size 图片的大小，宽度和高度
   * @param displayName 展示名
   * @param fileLength 文件大小
   **/
- (id)initWithRatelUrl:(NSString*)ratelUrl size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName fileLength:(long long)fileLength;
  /**
   * @brief 返回图片附件类型
   * @return BMXMessageAttachment_Type
   **/
- (BMXMessageAttachment_Type)type;
  /**
   * @brief 克隆函数
   * @return BMXMessageAttachment
   **/
- (BMXMessageAttachment*)clone;
  /**
   * @brief 图片大小
   * @return BMXMessageAttachmentSize
   **/
- (BMXMessageAttachmentSize*)size;
  /**
   * @brief 远程使用缩略图URL
   * @return NSString
   **/
- (NSString*)thumbnailUrl;
  /**
   * @brief 设置发送图片消息缩略图
   * @param path 本地路径
   **/
- (void)setThumbnail:(NSString*)path;
  /**
   * @brief 缩略图本地路径
   * @return NSString
   **/
- (NSString*)thumbnailPath;
  /**
   * @brief 缩略图下载状态
   * @return BMXMessageAttachment_DownloadStatus
   **/
- (BMXMessageAttachment_DownloadStatus)thumbnailDownloadStatus;
  /**
   * @brief 消息附件强制转换为图像附件
   * @param attachment 附件
   * @return BMXImageAttachment
   **/
+ (BMXImageAttachment*)dynamicCastWithAttachment:(BMXMessageAttachment*)attachment;
- (void)dealloc;
@end

/**
 * @interface 位置消息附件
 **/
@interface BMXLocationAttachment : BMXMessageAttachment
  /**
   * @brief 构造函数
   * @param latitude 纬度
   * @param longitude 经度
   * @param address 地址名称
   **/
- (id)initWithLatitude:(double)latitude longitude:(double)longitude address:(NSString*)address;
  /**
   * @brief 返回位置附件类型
   * @return BMXMessageAttachment_Type
   **/
- (BMXMessageAttachment_Type)type;
  /**
   * @brief 克隆函数
   * @return BMXMessageAttachment
   **/
- (BMXMessageAttachment*)clone;
  /**
   * @brief 纬度
   * @return double
   **/
- (double)latitude;
  /**
   * @brief 经度
   * @return double
   **/
- (double)longitude;
  /**
   * @brief 地址
   * @return NSString
   **/
- (NSString*)address;
  /**
   * @brief 消息附件强制转换为位置附件
   * @param attachment 附件
   * @return BMXLocationAttachment
   **/
+ (BMXLocationAttachment*)dynamicCastWithAttachment:(BMXMessageAttachment*)attachment;
- (void)dealloc;
@end

/**
 * @interface 好友Service
 **/
@interface BMXRosterService : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
  /**
   * @brief 获取好友列表，如果forceRefresh == true，则强制从服务端拉取
   * @param list 好友id列表，传入空列表函数返回后从此处获取返回的好友id列表
   * @param forceRefresh 是否从服务器读取数据，true为强制从服务器获取，false情况下本地读取列表为空的情况下会自动从服务器读取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)get:(ListOfLongLong*)list forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 通过联系人id搜索用户
   * @param rosterId 搜索的好友id
   * @param forceRefresh 为true强制从服务器获取，为false情况下查询结果为空时自动从服务器获取。
   * @param item 查询返回的用户的信息，传入指向为空的shared_ptr对象函数执行后会自动赋值。
   * @return BMXErrorCode
   **/
- (BMXErrorCode)fetchRosterByIdWithRosterId:(long long)rosterId forceRefresh:(BOOL)forceRefresh item:(BMXRosterItem*)item;
  /**
   * Deprecated. use fetchRosterById instead.
   * @brief 搜索用户
   * @param rosterId 搜索的好友id
   * @param forceRefresh 为true强制从服务器获取，为false情况下查询结果为空时自动从服务器获取。
   * @param item 查询返回的用户的信息，传入指向为空的shared_ptr对象函数执行后会自动赋值。
   * @return BMXErrorCode
   **/
- (BMXErrorCode)searchWithRosterId:(long long)rosterId forceRefresh:(BOOL)forceRefresh item:(BMXRosterItem*)item;
  /**
   * @brief 通过用户名搜索用户
   * @param name 搜索的用户名
   * @param forceRefresh 为true强制从服务器获取，为false情况下查询结果为空时自动从服务器获取。
   * @param item 查询返回的用户的信息，传入指向为空的shared_ptr对象函数执行后会自动赋值。
   * @return BMXErrorCode
   **/
- (BMXErrorCode)fetchRosterByNameWithName:(NSString*)name forceRefresh:(BOOL)forceRefresh item:(BMXRosterItem*)item;
- (BMXErrorCode)searchWithName:(NSString*)name forceRefresh:(BOOL)forceRefresh item:(BMXRosterItem*)item;
  /**
   * @brief 通过联系人id列表批量搜索用户
   * @param rosterIdList 需要搜索的用户id列表
   * @param list 返回的好友信息列表，传入空列表函数返回后从此处获取返回的好友信息列表
   * @param forceRefresh 是否强制从服务器获取，为true则强制从服务器获取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)fetchRostersByIdListWithRosterIdList:(ListOfLongLong*)rosterIdList list:(BMXRosterItemList*)list forceRefresh:(BOOL)forceRefresh;
- (BMXErrorCode)searchWithRosterIdList:(ListOfLongLong*)rosterIdList list:(BMXRosterItemList*)list forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 更新好友本地扩展信息
   * @param item 用户信息
   * @param extension 本地扩展信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setItemLocalExtension:(BMXRosterItem*)item extension:(NSString*)extension;
  /**
   * @brief 更新好友服务器扩展信息
   * @param item 用户信息
   * @param extension 服务器扩展信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setItemExtension:(BMXRosterItem*)item extension:(NSString*)extension;
  /**
   * @brief 更新好友别名
   * @param item 用户信息
   * @param alias 好友别名
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setItemAlias:(BMXRosterItem*)item alias:(NSString*)alias;
  /**
   * @brief 设置是否拒收用户消息
   * @param item 用户信息
   * @param status 是否拒收用户消息，true拒收，false不拒收
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setItemMuteNotification:(BMXRosterItem*)item status:(BOOL)status;
  /**
   * @brief 获取申请添加好友列表
   * @param result 返回的申请好友列表信息，传入指向为空的shared_ptr对象函数执行后会自动赋值。
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getApplicationList:(BMXRosterApplicationResultPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize;
- (BMXErrorCode)getApplicationList:(BMXRosterApplicationResultPage*)result cursor:(NSString*)cursor;
  /**
   * @brief 申请添加好友
   * @param rosterId 申请添加的用户id
   * @param message 好友申请信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)applyWithRosterId:(long long)rosterId message:(NSString*)message authAnswer:(NSString*)authAnswer;
- (BMXErrorCode)applyWithRosterId:(long long)rosterId message:(NSString*)message;
  /**
   * @brief 删除好友
   * @param rosterId 删除的好友id
   * @return BMXErrorCode
   **/
- (BMXErrorCode)removeWithRosterId:(long long)rosterId;
  /**
   * @brief 接受加好友申请
   * @param rosterId 申请加为好友的用户id
   * @return BMXErrorCode
   **/
- (BMXErrorCode)acceptWithRosterId:(long long)rosterId;
  /**
   * @brief 拒绝加好友申请
   * @param rosterId 申请加为好友的用户id
   * @param reason 拒绝的原因
   * @return BMXErrorCode
   **/
- (BMXErrorCode)declineWithRosterId:(long long)rosterId reason:(NSString*)reason;
  /**
   * @brief 加入黑名单
   * @param rosterId 加入黑名单的用户id
   * @return BMXErrorCode
   **/
- (BMXErrorCode)blockWithRosterId:(long long)rosterId;
  /**
   * @brief 从黑名单移除
   * @param rosterId 从黑名单移除的用户id
   * @return BMXErrorCode
   **/
- (BMXErrorCode)unblockWithRosterId:(long long)rosterId;
  /**
   * @brief 获取黑名单，如果forceRefresh == true，则强制从服务端拉取
   * @param list 好友id列表，传入空列表函数返回后从此处获取返回的黑名单id列表
   * @param forceRefresh 是否从服务器读取数据，true为强制从服务器获取，false情况下本地读取列表为空的情况下会自动从服务器读取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getBlockList:(ListOfLongLong*)list forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 下载头像
   * @param item 用户信息
   * @param thumbnail 是否下载缩略图，ture为缩略图，false为原图
   * @param callback 下载回调函数
   * @return BMXErrorCode
   **/
- (BMXErrorCode)downloadAvatarWithItem:(BMXRosterItem*)item thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback;
  /**
   * @brief 获取好友列表，如果forceRefresh == true，则强制从服务端拉取
   * @param list 好友id列表，传入空列表函数返回后从此处获取返回的好友id列表
   * @param forceRefresh 是否从服务器读取数据，true为强制从服务器获取，false情况下本地读取列表为空的情况下会自动从服务器读取
   * @return BMXErrorCode
   **/
- (void)get: (BOOL)forceRefresh completion:(void(^)(ListOfLongLong *list, BMXError *error)) aCompletionBlock;
  /**
   * @brief 通过联系人id搜索用户
   * @param rosterId 搜索的好友id
   * @param forceRefresh 为true强制从服务器获取，为false情况下查询结果为空时自动从服务器获取。
   * @param item 查询返回的用户的信息，传入指向为空的shared_ptr对象函数执行后会自动赋值。
   * @return BMXErrorCode
   **/
- (void)fetchRosterByIdWithRosterId:(long long)rosterId forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItem *item, BMXError *error)) aCompletionBlock ;
  /**
   * Deprecated. use fetchRosterById instead.
   * @brief 搜索用户
   * @param rosterId 搜索的好友id
   * @param forceRefresh 为true强制从服务器获取，为false情况下查询结果为空时自动从服务器获取。
   * @param item 查询返回的用户的信息，传入指向为空的shared_ptr对象函数执行后会自动赋值。
   * @return BMXErrorCode
   **/
- (void)searchWithRosterId:(long long)rosterId forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItem *item, BMXError *error)) aCompletionBlock ;
  /**
   * @brief 通过用户名搜索用户
   * @param name 搜索的用户名
   * @param forceRefresh 为true强制从服务器获取，为false情况下查询结果为空时自动从服务器获取。
   * @param item 查询返回的用户的信息，传入指向为空的shared_ptr对象函数执行后会自动赋值。
   * @return BMXErrorCode
   **/
- (void)fetchRosterByNameWithName:(NSString*)name forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItem *item, BMXError *error)) aCompletionBlock ;
- (void)searchWithName:(NSString*)name forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItem *item, BMXError *error)) aCompletionBlock ;
  /**
   * @brief 通过联系人id列表批量搜索用户
   * @param rosterIdList 需要搜索的用户id列表
   * @param list 返回的好友信息列表，传入空列表函数返回后从此处获取返回的好友信息列表
   * @param forceRefresh 是否强制从服务器获取，为true则强制从服务器获取
   * @return BMXErrorCode
   **/
- (void)fetchRostersByIdListWithRosterIdList:(ListOfLongLong*)rosterIdList forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItemList *list, BMXError *error)) aCompletionBlock ;
- (void)searchWithRosterIdList:(ListOfLongLong*)rosterIdList forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItemList *list, BMXError *error)) aCompletionBlock ;
  /**
   * @brief 更新好友本地扩展信息
   * @param item 用户信息
   * @param extension 本地扩展信息
   * @return BMXErrorCode
   **/
- (void)setItemLocalExtension:(BMXRosterItem*)item extension:(NSString*)extension completion:(void(^)(BMXError *error)) aCompletionBlock ;
  /**
   * @brief 更新好友服务器扩展信息
   * @param item 用户信息
   * @param extension 服务器扩展信息
   * @return BMXErrorCode
   **/
- (void)setItemExtension:(BMXRosterItem*)item extension:(NSString*)extension completion:(void(^)(BMXError *error)) aCompletionBlock ;
  /**
   * @brief 更新好友别名
   * @param item 用户信息
   * @param alias 好友别名
   * @return BMXErrorCode
   **/
- (void)setItemAlias:(BMXRosterItem*)item alias:(NSString*)alias completion:(void(^)(BMXError *error)) aCompletionBlock ;
  /**
   * @brief 设置是否拒收用户消息
   * @param item 用户信息
   * @param status 是否拒收用户消息，true拒收，false不拒收
   * @return BMXErrorCode
   **/
- (void)setItemMuteNotification:(BMXRosterItem*)item status:(BOOL)status completion:(void(^)(BMXError *error)) aCompletionBlock ;
  /**
   * @brief 获取申请添加好友列表
   * @param result 返回的申请好友列表信息，传入指向为空的shared_ptr对象函数执行后会自动赋值。
   * @param cursor 分页获取的起始cursor，第一次传入为空，后续传入上次操作返回的result中的cursor
   * @param pageSize 分页大小
   * @return BMXErrorCode
   **/
- (void)getApplicationList: (NSString*)cursor pageSize:(int)pageSize completion:(void(^)(BMXRosterApplicationResultPage *res, BMXError *error)) aCompletionBlock ;
- (void)getApplicationList: (NSString*)cursor completion:(void(^)(BMXRosterApplicationResultPage *res, BMXError *error)) aCompletionBlock ;
  /**
   * @brief 申请添加好友
   * @param rosterId 申请添加的用户id
   * @param message 好友申请信息
   * @return BMXErrorCode
   **/
- (void)applyWithRosterId:(long long)rosterId message:(NSString*)message authAnswer:(NSString*)authAnswer completion:(void(^)(BMXError *error)) aCompletionBlock ;
- (void)applyWithRosterId:(long long)rosterId message:(NSString*)message completion:(void(^)(BMXError *error)) aCompletionBlock ;
  /**
   * @brief 删除好友
   * @param rosterId 删除的好友id
   * @return BMXErrorCode
   **/
- (void)removeWithRosterId:(long long)rosterId completion:(void(^)(BMXError *error)) aCompletionBlock ;
  /**
   * @brief 接受加好友申请
   * @param rosterId 申请加为好友的用户id
   * @return BMXErrorCode
   **/
- (void)acceptWithRosterId:(long long)rosterId completion:(void(^)(BMXError *error)) aCompletionBlock ;
  /**
   * @brief 拒绝加好友申请
   * @param rosterId 申请加为好友的用户id
   * @param reason 拒绝的原因
   * @return BMXErrorCode
   **/
- (void)declineWithRosterId:(long long)rosterId reason:(NSString*)reason completion:(void(^)(BMXError *error)) aCompletionBlock ;
  /**
   * @brief 加入黑名单
   * @param rosterId 加入黑名单的用户id
   * @return BMXErrorCode
   **/
- (void)blockWithRosterId:(long long)rosterId completion:(void(^)(BMXError *error)) aCompletionBlock ;
  /**
   * @brief 从黑名单移除
   * @param rosterId 从黑名单移除的用户id
   * @return BMXErrorCode
   **/
- (void)unblockWithRosterId:(long long)rosterId completion:(void(^)(BMXError *error)) aCompletionBlock ;
  /**
   * @brief 获取黑名单，如果forceRefresh == true，则强制从服务端拉取
   * @param list 好友id列表，传入空列表函数返回后从此处获取返回的黑名单id列表
   * @param forceRefresh 是否从服务器读取数据，true为强制从服务器获取，false情况下本地读取列表为空的情况下会自动从服务器读取
   * @return BMXErrorCode
   **/
- (void)getBlockList: (BOOL)forceRefresh completion:(void(^)(ListOfLongLong *list, BMXError *error)) aCompletionBlock;
  /**
   * @brief 下载头像
   * @param item 用户信息
   * @param thumbnail 是否下载缩略图，ture为缩略图，false为原图
   * @param callback 下载回调函数
   * @return BMXErrorCode
   **/
- (void)downloadAvatarWithItem:(BMXRosterItem*)item thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback completion:(void(^)(BMXError *error)) aCompletionBlock;
- (void)dealloc;

  /**
   * @brief 添加好友变化监听者
   * @param listener 好友变化监听者
   **/
- (void)addDelegate:(id<BMXRosterServiceProtocol>)aDelegate;
- (void)addDelegate:(id<BMXRosterServiceProtocol>)aDelegate delegateQueue:(dispatch_queue_t)aQueue;
  /**
   * @brief 移除好友变化监听者
   * @param listener 好友变化监听者
   **/
- (void)removeDelegate:(id<BMXRosterServiceProtocol>)aDelegate;
  /**
   * @brief 添加好友变化监听者
   * @param listener 好友变化监听者
   **/
- (void)addRosterListener:(id<BMXRosterServiceProtocol>)listener;
  /**
   * @brief 移除好友变化监听者
   * @param listener 好友变化监听者
   **/
- (void)removeRosterListener:(id<BMXRosterServiceProtocol>)listener;

@end

@interface BMXMessagePage : BMXBaseObject
- (id)init;
- (id)initWithResult:(BMXMessageList*)result offset:(long long)offset;
- (id)initWithResult:(BMXMessageList*)result cursor:(NSString*)cursor;
- (id)initWithFrom:(BMXMessagePage*)from;
- (id)_initWithFrom:(BMXMessagePage*)from;
- (unsigned long)count;
- (long long)offset;
- (NSString*)cursor;
- (BMXMessageList*)result;
- (void)dealloc;
@end

@interface BMXGroupMemberResultPage : BMXBaseObject
- (id)init;
- (id)initWithResult:(BMXGroupMemberList*)result offset:(long long)offset;
- (id)initWithResult:(BMXGroupMemberList*)result cursor:(NSString*)cursor;
- (id)initWithFrom:(BMXGroupMemberResultPage*)from;
- (id)_initWithFrom:(BMXGroupMemberResultPage*)from;
- (unsigned long)count;
- (long long)offset;
- (NSString*)cursor;
- (BMXGroupMemberList*)result;
- (void)dealloc;
@end

@interface BMXGroupBannedMemberResultPage : BMXBaseObject
- (id)init;
- (id)initWithResult:(BMXGroupBannedMemberList*)result offset:(long long)offset;
- (id)initWithResult:(BMXGroupBannedMemberList*)result cursor:(NSString*)cursor;
- (id)initWithFrom:(BMXGroupBannedMemberResultPage*)from;
- (id)_initWithFrom:(BMXGroupBannedMemberResultPage*)from;
- (unsigned long)count;
- (long long)offset;
- (NSString*)cursor;
- (BMXGroupBannedMemberList*)result;
- (void)dealloc;
@end

@interface BMXRosterApplicationResultPage : BMXBaseObject
- (id)init;
- (id)initWithResult:(BMXRosterServiceApplicationList*)result offset:(long long)offset;
- (id)initWithResult:(BMXRosterServiceApplicationList*)result cursor:(NSString*)cursor;
- (id)initWithFrom:(BMXRosterApplicationResultPage*)from;
- (id)_initWithFrom:(BMXRosterApplicationResultPage*)from;
- (unsigned long)count;
- (long long)offset;
- (NSString*)cursor;
- (BMXRosterServiceApplicationList*)result;
- (void)dealloc;
@end

@interface BMXGroupApplicationPage : BMXBaseObject
- (id)init;
- (id)initWithResult:(BMXGroupApplicationList*)result offset:(long long)offset;
- (id)initWithResult:(BMXGroupApplicationList*)result cursor:(NSString*)cursor;
- (id)initWithFrom:(BMXGroupApplicationPage*)from;
- (id)_initWithFrom:(BMXGroupApplicationPage*)from;
- (unsigned long)count;
- (long long)offset;
- (NSString*)cursor;
- (BMXGroupApplicationList*)result;
- (void)dealloc;
@end

@interface BMXGroupInvitationPage : BMXBaseObject
- (id)init;
- (id)initWithResult:(BMXGroupInvitationList*)result offset:(long long)offset;
- (id)initWithResult:(BMXGroupInvitationList*)result cursor:(NSString*)cursor;
- (id)initWithFrom:(BMXGroupInvitationPage*)from;
- (id)_initWithFrom:(BMXGroupInvitationPage*)from;
- (unsigned long)count;
- (long long)offset;
- (NSString*)cursor;
- (BMXGroupInvitationList*)result;
- (void)dealloc;
@end

@interface BMXMessageListList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXMessageList*)x;
- (BMXMessageList*)get:(int)i;
- (void)set:(int)i val:(BMXMessageList*)val;
- (void)dealloc;
@end

/**
 * @interface 联系人
 **/
@interface BMXRosterItem : BMXBaseObject
  /**
   * @brief 好友Id
   * @return long long
   **/
- (long long)rosterId;
  /**
   * @brief 好友名
   * @return NSString
   **/
- (NSString*)username;
  /**
   * @brief 好友昵称
   * @return NSString
   **/
- (NSString*)nickname;
  /**
   * @brief 好友头像Ratel服务器地址
   * @return NSString
   **/
- (NSString*)avatarRatelUrl;
  /**
   * @brief 好友头像服务器地址
   * @return NSString
   **/
- (NSString*)avatarUrl;
  /**
   * @brief 好友头像本地存储路径
   * @return NSString
   **/
- (NSString*)avatarPath;
  /**
   * @brief 好友头像缩略图服务器地址
   * @return NSString
   **/
- (NSString*)avatarThumbnailUrl;
  /**
   * @brief 好友头像缩略图本地存储路径
   * @return NSString
   **/
- (NSString*)avatarThumbnailPath;
  /**
   * @brief 扩展信息，用户设置的好友可以看到的信息，比如地址，个性签名等
   * @return NSString
   **/
- (NSString*)publicInfo;
  /**
   * @brief 用户对好友添加的备注等信息
   * @return NSString
   **/
- (NSString*)alias;
  /**
   * @brief 用户的服务器扩展信息
   * @return NSString
   **/
- (NSString*)ext;
  /**
   * @brief 用户的本地扩展信息
   * @return NSString
   **/
- (NSString*)localExt;
  /**
   * @brief 联系人关系
   * @return BMXRosterItem_RosterRelation
   **/
- (BMXRosterItem_RosterRelation)relation;
  /**
   * @brief 是否提醒用户消息
   * @return BOOL
   **/
- (BOOL)isMuteNotification;
  /**
   * @brief roster的好友添加验证方式。
   * @return BMXRosterItem_AddFriendAuthMode
   **/
- (BMXRosterItem_AddFriendAuthMode)addFriendAuthMode;
  /**
   * @brief roster的好友验证问题。
   * @return NSString
   **/
- (NSString*)authQuestion;
- (void)dealloc;
@end

@interface BMXRosterItemList : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXRosterItem*)x;
- (BMXRosterItem*)get:(int)i;
- (void)set:(int)i val:(BMXRosterItem*)val;
- (void)dealloc;
@end

/**
 * @interface 用户Profile
 **/
@interface BMXUserProfile : BMXBaseObject
  /**
   * @brief 用户ID（唯一）
   * @return long long
   **/
- (long long)userId;
  /**
   * @brief 用户策略
   * @return BMXUserProfile_UserCategory
   **/
- (BMXUserProfile_UserCategory)category;
  /**
   * @brief 用户名（唯一）
   * @return NSString
   **/
- (NSString*)username;
  /**
   * @brief 用户昵称
   * @return NSString
   **/
- (NSString*)nickname;
  /**
   * @brief 用户ratel服务器头像url
   * @return NSString
   **/
- (NSString*)avatarRatelUrl;
  /**
   * @brief 用户头像url
   * @return NSString
   **/
- (NSString*)avatarUrl;
  /**
   * @brief 用户头像本地存储路径
   * @return NSString
   **/
- (NSString*)avatarPath;
  /**
   * @brief 用户头像缩略图本地存储路径
   * @return NSString
   **/
- (NSString*)avatarThumbnailPath;
  /**
   * @brief 用户手机
   * @return NSString
   **/
- (NSString*)mobilePhone;
  /**
   * @brief 用户邮箱
   * @return NSString
   **/
- (NSString*)email;
  /**
   * @brief 用户公开扩展信息，好友可见
   * @return NSString
   **/
- (NSString*)publicInfo;
  /**
   * @brief 用户私有扩展信息，好友不可见
   * @return NSString
   **/
- (NSString*)privateInfo;
  /**
   * @brief 加好友校验方式
   * @return BMXUserProfile_AddFriendAuthMode
   **/
- (BMXUserProfile_AddFriendAuthMode)addFriendAuthMode;
  /**
   * @brief 添加好友时的验证问题
   * @return AuthQuestion
   **/
- (BMXUserProfileAuthQuestion*)authQuestion;
  /**
   * @brief 用户消息设定
   * @return BMXUserProfileMessageSetting
   **/
- (BMXUserProfileMessageSetting*)messageSetting;
  /**
   * @brief 收到群组邀请进群时是否自动同意进群
   * @return BOOL
   **/
- (BOOL)isAutoAcceptGroupInvite;
- (void)dealloc;
@end

/**
 * @interface 用户Service
 **/
@interface BMXUserService : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
  /**
   * @brief 绑定设备推送token
   * @param token 设备token
   * @return BMXErrorCode
   **/
- (BMXErrorCode)bindDeviceWithToken:(NSString*)token;
  /**
  * @brief 获取设备列表
  * @param deviceList 设备列表，传入空列表函数返回后从此处获取返回的设备列表
  * @return BMXErrorCode
  */
- (BMXErrorCode)getDeviceList:(BMXDeviceList*)deviceList;
  /**
   * @brief 删除设备
   * @param device_sn 设备序列号
   * @return BMXErrorCode
   */
- (BMXErrorCode)deleteDeviceWithDeviceSn:(int)device_sn;
  /**
   * @brief 获取用户详情，如果forceRefresh == true，则强制从服务端拉取
   * @param profile 用户profile信息，初始传入指向为空的shared_ptr对象，函数返回后从此处获取用户profile信息。
   * @param forceRefresh 是否强制从服务器拉取，本地获取失败的情况下会自动从服务器拉取
   * @return BMXErrorCode
   **/
- (BMXErrorCode)getProfile:(BMXUserProfile*)profile forceRefresh:(BOOL)forceRefresh;
  /**
   * @brief 设置昵称
   * @param nickname 用户昵称
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setNickname:(NSString*)nickname;
  /**
   * @brief 上传头像
   * @param avatarPath 上传头像的本地地址
   * @param callback 上传回调函数
   * @return BMXErrorCode
   **/
- (BMXErrorCode)uploadAvatarWithAvatarPath:(NSString*)avatarPath callback:(void(^)(int progress))callback;
  /**
   * @brief 下载头像，默认下载缩略图
   * @param profile 用户profile
   * @param thumbnail 是否下载缩略图，true下载缩略图，false下载原图
   * @param callback 下载回调函数
   * @return BMXErrorCode
   **/
- (BMXErrorCode)downloadAvatarWithProfile:(BMXUserProfile*)profile thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback;
  /**
   * @brief 设置公开扩展信息
   * @param publicInfo 公开扩展信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setPublicInfo:(NSString*)publicInfo;
  /**
   * @brief 设置私有扩展信息
   * @param privateInfo 私有扩展信息
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setPrivateInfo:(NSString*)privateInfo;
  /**
   * @brief 设置加好友验证方式
   * @param mode 加好友验证方式
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setAddFriendAuthMode:(BMXUserProfile_AddFriendAuthMode)mode;
  /**
   * @brief 设置加好友验证问题
   * @param authQuestion 加好友验证问题
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setAuthQuestion:(BMXUserProfileAuthQuestion*)authQuestion;
  /**
   * @brief 设置是否允许推送
   * @param enable 是否允许推送，true推送，false不推送
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setEnablePush:(BOOL)enable;
  /**
   * @brief 设置是否推送详情
   * @param enable 是否推送详情，true推送，false不推送
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setEnablePushDetaile:(BOOL)enable;
  /**
   * @brief 设置推送昵称
   * @param nickname 推送昵称
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setPushNickname:(NSString*)nickname;
  /**
   * @brief 
   * @param nickname 推送昵称
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setPushAlias:(NSString*)alias bmxPushToken:(NSString*)bmxPushToken;
  /**
   * @brief 设置收到新消息是否声音提醒
   * @param enable 收到新消息是否声音提醒，true提醒，false不提醒
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setNotificationSound:(BOOL)enable;
  /**
   * @brief 设置收到新消息是否震动
   * @param enable 收到新消息是否震动，true震动，false不震动
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setNotificationVibrate:(BOOL)enable;
  /**
   * @brief 设置是否自动缩略图和语音附件
   * @param enable 是否自动缩略图和语音附件，true自动下载，false不会自动下载
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setAutoDownloadAttachment:(BOOL)enable;
  /**
   * @brief 设置是否自动同意入群邀请
   * @param enable 是否自动同意入群邀请，true同意，false不同意
   * @return BMXErrorCode
   **/
- (BMXErrorCode)setAutoAcceptGroupInvite:(BOOL)enable;
  /**
   * @brief 绑定设备推送token
   * @param token 设备token
   * @return BMXErrorCode
   **/
- (void)bindDeviceWithToken:(NSString*)token completion:(void (^)(BMXError *aError)) resBlock;
  /**
  * @brief 获取设备列表
  * @param deviceList 设备列表，传入空列表函数返回后从此处获取返回的设备列表
  * @return BMXErrorCode
  */
- (void)getDeviceListWithCompletion: (void (^)(BMXDeviceList *deviceList, BMXError *aError)) resBlock;
  /**
   * @brief 删除设备
   * @param device_sn 设备序列号
   * @return BMXErrorCode
   */
- (void)deleteDeviceWithDeviceSn:(int)device_sn completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 获取用户详情，如果forceRefresh == true，则强制从服务端拉取
   * @param profile 用户profile信息，初始传入指向为空的shared_ptr对象，函数返回后从此处获取用户profile信息。
   * @param forceRefresh 是否强制从服务器拉取，本地获取失败的情况下会自动从服务器拉取
   * @return BMXErrorCode
   **/
- (void)getProfile:(BOOL)forceRefresh completion:(void (^)(BMXUserProfile*profile, BMXError *aError)) resBlock;
  /**
   * @brief 设置昵称
   * @param nickname 用户昵称
   * @return BMXErrorCode
   **/
- (void)setNickname:(NSString*)nickname completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 上传头像
   * @param avatarPath 上传头像的本地地址
   * @param callback 上传回调函数
   * @return BMXErrorCode
   **/
- (void)uploadAvatarWithAvatarPath:(NSString*)avatarPath callback:(void(^)(int progress))callback completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 下载头像，默认下载缩略图
   * @param profile 用户profile
   * @param thumbnail 是否下载缩略图，true下载缩略图，false下载原图
   * @param callback 下载回调函数
   * @return BMXErrorCode
   **/
- (void)downloadAvatarWithProfile:(BMXUserProfile*)profile thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置公开扩展信息
   * @param publicInfo 公开扩展信息
   * @return BMXErrorCode
   **/
- (void)setPublicInfo:(NSString*)publicInfo completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置私有扩展信息
   * @param privateInfo 私有扩展信息
   * @return BMXErrorCode
   **/
- (void)setPrivateInfo:(NSString*)privateInfo completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置加好友验证方式
   * @param mode 加好友验证方式
   * @return BMXErrorCode
   **/
- (void)setAddFriendAuthMode:(BMXUserProfile_AddFriendAuthMode)mode completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置加好友验证问题
   * @param authQuestion 加好友验证问题
   * @return BMXErrorCode
   **/
- (void)setAuthQuestion:(BMXUserProfileAuthQuestion*)authQuestion completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置是否允许推送
   * @param enable 是否允许推送，true推送，false不推送
   * @return BMXErrorCode
   **/
- (void)setEnablePush:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置是否推送详情
   * @param enable 是否推送详情，true推送，false不推送
   * @return BMXErrorCode
   **/
- (void)setEnablePushDetaile:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置推送昵称
   * @param nickname 推送昵称
   * @return BMXErrorCode
   **/
- (void)setPushNickname:(NSString*)nickname completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 
   * @param nickname 推送昵称
   * @return BMXErrorCode
   **/
- (void)setPushAlias:(NSString*)alias bmxPushToken:(NSString*)bmxPushToken completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置收到新消息是否声音提醒
   * @param enable 收到新消息是否声音提醒，true提醒，false不提醒
   * @return BMXErrorCode
   **/
- (void)setNotificationSound:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置收到新消息是否震动
   * @param enable 收到新消息是否震动，true震动，false不震动
   * @return BMXErrorCode
   **/
- (void)setNotificationVibrate:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置是否自动缩略图和语音附件
   * @param enable 是否自动缩略图和语音附件，true自动下载，false不会自动下载
   * @return BMXErrorCode
   **/
- (void)setAutoDownloadAttachment:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock;
  /**
   * @brief 设置是否自动同意入群邀请
   * @param enable 是否自动同意入群邀请，true同意，false不同意
   * @return BMXErrorCode
   **/
- (void)setAutoAcceptGroupInvite:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock;
- (void)dealloc;

  /**
   * @brief 添加用户状态监听者
   * @param listener 用户状态监听者
   **/
- (void)addDelegate:(id<BMXUserServiceProtocol>)aDelegate;
- (void)addDelegate:(id<BMXUserServiceProtocol>)aDelegate delegateQueue:(dispatch_queue_t)aQueue;
  /**
   * @brief 移除用户状态监听者
   * @param listener 用户状态监听者
   **/
- (void)removeDelegate:(id<BMXUserServiceProtocol>)aDelegate;

@end

/**
 * @interface 视频消息附件
 **/
@interface BMXVideoAttachment : BMXFileAttachment
  /**
   * @brief 构造函数，构建发送视频消息附件
   * @param aData 视频数据
   * @param thumbnailData 缩略图数据
   * @param duration 视频片段时长
   * @param size 视频大小，宽度和高度
   * @param displayName 文件展示名
   * @param conversationId 会话ID
   **/
- (id)initWithData:(NSData *)aData
         thumbnailData:(NSData *)thumbnailData
         duration:(int)duration
         size:(BMXMessageAttachmentSize *) size
         displayName:(NSString *)displayName
         conversationId:(long long)conversationId;
  /**
   * @brief 构造函数，构建发送视频消息附件
   * @param path 文件的本地路径
   * @param duration 视频片段时长
   * @param size 视频大小，宽度和高度
   * @param displayName 文件展示名
   **/
- (id)initWithPath:(NSString*)path duration:(int)duration size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName;
- (id)initWithPath:(NSString*)path duration:(int)duration size:(BMXMessageAttachmentSize*)size;
  /**
   * @brief 构造函数，构建发送视频消息附件
   * @param path 文件的本地路径
   * @param thumbnailPath 缩略图文件的本地路径
   * @param duration 视频片段时长
   * @param size 视频大小，宽度和高度
   * @param displayName 文件展示名
   **/
- (id)initWithPath:(NSString*)path thumbnailPath:(NSString*)thumbnailPath duration:(int)duration size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName;
- (id)initWithPath:(NSString*)path thumbnailPath:(NSString*)thumbnailPath duration:(int)duration size:(BMXMessageAttachmentSize*)size;
  /**
   * @brief 构造函数，构建接收视频消息附件
   * @param ratelUrl ratel文件服务器地址
   * @param duration 视频片段时长
   * @param size 视频大小，宽度和高度
   * @param displayName 文件展示名
   * @param fileLength 文件大小
   **/
- (id)initWithRatelUrl:(NSString*)ratelUrl duration:(int)duration size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName fileLength:(long long)fileLength;
  /**
   * @brief 构造函数，构建接收视频消息附件
   * @param ratelUrl ratel文件服务器地址
   * @param thumbnailRatelUrl 缩略图ratel文件服务器地址
   * @param duration 视频片段时长
   * @param size 视频大小，宽度和高度
   * @param displayName 文件展示名
   * @param fileLength 文件大小
   **/
- (id)initWithRatelUrl:(NSString*)ratelUrl thumbnailRatelUrl:(NSString*)thumbnailRatelUrl duration:(int)duration size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName fileLength:(long long)fileLength;
  /**
   * @brief 返回文件类型
   * @return BMXMessageAttachment_Type
   **/
- (BMXMessageAttachment_Type)type;
  /**
   * @brief 克隆函数
   * @return BMXMessageAttachment
   **/
- (BMXMessageAttachment*)clone;
  /**
   * @brief 视频大小，宽度和高度
   * @return BMXMessageAttachmentSize
   **/
- (BMXMessageAttachmentSize*)size;
  /**
   * @brief 视频片段时长
   * @return int
   **/
- (int)duration;
  /**
   * @brief 设置发送视频片段消息缩略图
   * @param path 视频片段消息缩略图
   **/
- (void)setThumbnail:(NSString*)path;
  /**
   * @brief 缩略图本地路径
   * @return NSString
   **/
- (NSString*)thumbnailPath;
  /**
   * @brief 远程缩略图使用URL
   * @return NSString
   **/
- (NSString*)thumbnailUrl;
  /**
   * @brief 设置发送视频片段消息缩略图ratel服务器路径
   * @param thumbnailRatelUrl 视频片段消息缩略图服务器路径
   **/
- (void)setThumbnailRatelUrl:(NSString*)thumbnailRatelUrl;
  /**
   * @brief 缩略图ratel服务器路径
   * @return NSString
   **/
- (NSString*)thumbnailRatelUrl;
  /**
   * @brief 缩略图下载状态
   * @return DownloadStatus
   **/
- (BMXMessageAttachment_DownloadStatus)thumbnailDownloadStatus;
  /**
   * @brief 消息附件强制转换为视频附件
   * @param attachment 附件
   * @return BMXVideoAttachment
   **/
+ (BMXVideoAttachment*)dynamicCastWithAttachment:(BMXMessageAttachment*)attachment;
- (void)dealloc;
@end

/**
 * @interface 音频消息附件
 **/
@interface BMXVoiceAttachment : BMXFileAttachment
  /**
   * @brief 构造函数，构建发送音频消息附件
   * @param path 文件的本地路径
   * @param duration 音频时长
   * @param displayName 文件展示名
   **/
- (id)initWithPath:(NSString*)path duration:(int)duration displayName:(NSString*)displayName;
- (id)initWithPath:(NSString*)path duration:(int)duration;
  /**
   * @brief 构造函数，构建接收音频消息附件
   * @param ratelUrl ratel文件服务器地址
   * @param duration 音频时长
   * @param displayName 文件展示名
   * @param fileLength 文件大小
   **/
- (id)initWithRatelUrl:(NSString*)ratelUrl duration:(int)duration displayName:(NSString*)displayName fileLength:(long long)fileLength;
  /**
   * @brief 返回文件类型
   * @return BMXMessageAttachment_Type
   **/
- (BMXMessageAttachment_Type)type;
  /**
   * @brief 克隆函数
   * @return BMXMessageAttachment
   **/
- (BMXMessageAttachment*)clone;
  /**
   * @brief 语音时长
   * @return int
   **/
- (int)duration;
  /**
   * @brief 消息附件强制转换为语音附件
   * @param attachment 附件
   * @return BMXVoiceAttachment
   **/
+ (BMXVoiceAttachment*)dynamicCastWithAttachment:(BMXMessageAttachment*)attachment;
- (void)dealloc;
@end

/**
 * @interface Push用户Profile
 **/
@interface BMXPushUserProfile : BMXBaseObject
  /**
   * @brief 用户ID（唯一）
   * @return long long
   **/
- (long long)userId;
  /**
   * @brief 推送用户别名
   * @return NSString
   **/
- (NSString*)pushAlias;
  /**
   * @brief 推送用户token
   * @return NSString
   **/
- (NSString*)pushToken;
  /**
   * @brief 推送用户消息设定
   * @return BMXPushUserProfileMessagePushSetting
   **/
- (BMXPushUserProfileMessagePushSetting*)messagePushSetting;
- (void)dealloc;
@end

@interface BMXRTCStreams : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXJanusStreamInfo*)x;
- (BMXJanusStreamInfo*)get:(int)i;
- (void)set:(int)i val:(BMXJanusStreamInfo*)val;
- (void)dealloc;
@end

@interface BMXRTCRoomParticipants : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXRoomParticipant*)x;
- (BMXRoomParticipant*)get:(int)i;
- (void)set:(int)i val:(BMXRoomParticipant*)val;
- (void)dealloc;
@end

@interface BMXRTCPublishers : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXJanusPublisher*)x;
- (BMXJanusPublisher*)get:(int)i;
- (void)set:(int)i val:(BMXJanusPublisher*)val;
- (void)dealloc;
@end

@interface BMXRTCRooms : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (id)initWithN:(unsigned long)n;
- (unsigned long)size;
- (unsigned long)capacity;
- (void)reserveWithN:(unsigned long)n;
- (BOOL)isEmpty;
- (void)clear;
- (void)addWithX:(BMXRTCRoom*)x;
- (BMXRTCRoom*)get:(int)i;
- (void)set:(int)i val:(BMXRTCRoom*)val;
- (void)dealloc;
@end

#ifdef __cplusplus
}
#endif

