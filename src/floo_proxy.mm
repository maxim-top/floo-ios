/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.9
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */
#include "floo_proxy.h"
#include "floo_wrap.h"
#include <string>
@interface BMXStringUtil : NSObject
/*
 *  NSString类型转换为string类型
 */
+ (std::string)toStdString:(NSString *)aStr;
/*
 *  string类型转换为NSString类型
 */
+ (NSString *)stdToNSString:(const std::string&)aStr;
+ (NSString *)cacheFilePath;
@end

@implementation BMXStringUtil
+ (std::string)toStdString:(NSString *)aStr {
    id value = aStr;
    if (value == [NSNull null] || aStr == nil) {
        aStr = @"";
    }
    return [aStr UTF8String];
}

+ (NSString *)stdToNSString:(const std::string&)aStr {
    NSString *ret = [NSString stringWithUTF8String:aStr.c_str()];
    return ret ? ret : @"";
}

+ (NSString *)cacheFilePath {
    return @"";
}

@end

@interface BMXAsync: NSObject
+ (void)async:(BMXErrorCode(^)())exec completion:(void (^)(BMXError *aError)) resBlock;
+ (void)asyncWithBMXGroup:(BMXErrorCode(^)(BMXGroup *res))exec completion:(void (^)(BMXGroup *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXGroupMemberList:(BMXErrorCode(^)(BMXGroupMemberList *res))exec completion:(void (^)(BMXGroupMemberList *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXGroupInvitationPage:(BMXErrorCode(^)(BMXGroupInvitationPage *res))exec completion:(void (^)(BMXGroupInvitationPage *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXGroupApplicationPage:(BMXErrorCode(^)(BMXGroupApplicationPage *res))exec completion:(void (^)(BMXGroupApplicationPage *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXGroupMemberResultPage:(BMXErrorCode(^)(BMXGroupMemberResultPage *res))exec completion:(void (^)(BMXGroupMemberResultPage *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXGroupBannedMemberResultPage:(BMXErrorCode(^)(BMXGroupBannedMemberResultPage *res))exec completion:(void (^)(BMXGroupBannedMemberResultPage *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXGroupBannedMemberList:(BMXErrorCode(^)(BMXGroupBannedMemberList *res))exec completion:(void (^)(BMXGroupBannedMemberList *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXGroupSharedFileList:(BMXErrorCode(^)(BMXGroupSharedFileList *res))exec completion:(void (^)(BMXGroupSharedFileList *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXGroupAnnouncement:(BMXErrorCode(^)(BMXGroupAnnouncement *res))exec completion:(void (^)(BMXGroupAnnouncement *res, BMXError *aError)) resBlock ;
+ (void)asyncWithBMXGroupAnnouncementList:(BMXErrorCode(^)(BMXGroupAnnouncementList *res))exec completion:(void (^)(BMXGroupAnnouncementList *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXGroupList:(BMXErrorCode(^)(BMXGroupList *res))exec completion:(void (^)(BMXGroupList *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXUserProfile:(BMXErrorCode(^)(BMXUserProfile *res))exec completion:(void (^)(BMXUserProfile *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXDeviceList:(BMXErrorCode(^)(BMXDeviceList *res))exec completion:(void (^)(BMXDeviceList *res, BMXError *aError)) resBlock ;
+ (void)asyncWithBMXConversationList:(BMXErrorCode(^)(BMXConversationList *res))exec completion:(void (^)(BMXConversationList *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXMessage:(BMXErrorCode(^)(BMXMessage *res))exec completion:(void (^)(BMXMessage *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXMessageList:(BMXErrorCode(^)(BMXMessageList *res))exec completion:(void (^)(BMXMessageList *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXMessageListList:(BMXErrorCode(^)(BMXMessageListList *res))exec completion:(void (^)(BMXMessageListList *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXRosterItem:(BMXErrorCode(^)(BMXRosterItem *res))exec completion:(void (^)(BMXRosterItem *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXRosterItemList:(BMXErrorCode(^)(BMXRosterItemList *res))exec completion:(void (^)(BMXRosterItemList *res, BMXError *aError)) resBlock;
+ (void)asyncWithListOfLongLong:(BMXErrorCode(^)(ListOfLongLong *res))exec completion:(void (^)(ListOfLongLong *res, BMXError *aError)) resBlock;
+ (void)asyncWithBMXRosterApplicationResultPage:(BMXErrorCode(^)(BMXRosterApplicationResultPage *res))exec completion:(void (^)(BMXRosterApplicationResultPage *res, BMXError *aError)) resBlock;

@end


NSString* ObjcGetErrorMessage(BMXErrorCode errorCode) {
  {
    return _wrap_getErrorMessage((int)errorCode);
  }
}

NSString* getKMentionAll() {
  {
    return _wrap_kMentionAll_get();
  }
}

NSString* getKMentionList() {
  {
    return _wrap_kMentionList_get();
  }
}

NSString* getKMentionedMessage() {
  {
    return _wrap_kMentionedMessage_get();
  }
}

NSString* getKPushMessage() {
  {
    return _wrap_kPushMessage_get();
  }
}

NSString* getKSenderNickname() {
  {
    return _wrap_kSenderNickname_get();
  }
}

NSString* getKGroupAck() {
  {
    return _wrap_kGroupAck_get();
  }
}

NSString* getKGroupMemberList() {
  {
    return _wrap_kGroupMemberList_get();
  }
}

NSString* getKIOSConfig() {
  {
    return _wrap_kIOSConfig_get();
  }
}

NSString* getKAndroidConfig() {
  {
    return _wrap_kAndroidConfig_get();
  }
}

NSString* getKPushShowBeginTime() {
  {
    return _wrap_kPushShowBeginTime_get();
  }
}

NSString* getKPushShowEndTime() {
  {
    return _wrap_kPushShowEndTime_get();
  }
}

NSString* getKPushTitle() {
  {
    return _wrap_kPushTitle_get();
  }
}

NSString* getKSilence() {
  {
    return _wrap_kSilence_get();
  }
}

NSString* getKBadge() {
  {
    return _wrap_kBadge_get();
  }
}

NSString* getKUsername() {
  {
    return _wrap_kUsername_get();
  }
}

NSString* getKRTCAction() {
  {
    return _wrap_kRTCAction_get();
  }
}

NSString* getKRTCCallType() {
  {
    return _wrap_kRTCCallType_get();
  }
}

NSString* getKRTCRoomId() {
  {
    return _wrap_kRTCRoomId_get();
  }
}

NSString* getKRTCInitiator() {
  {
    return _wrap_kRTCInitiator_get();
  }
}

NSString* getKRTCCallId() {
  {
    return _wrap_kRTCCallId_get();
  }
}

NSString* getKRTCRoomType() {
  {
    return _wrap_kRTCRoomType_get();
  }
}

NSString* getKRTCPin() {
  {
    return _wrap_kRTCPin_get();
  }
}


NSString* ObjcEncodeBMXMessageConfig(BMXMessageConfig* arg0) {
  {
    return _wrap_encodeBMXMessageConfig(arg0.swigCPtr);
  }
}

BMXMessageConfig* ObjcDecodeBMXMessageConfig(NSString* config) {
     void* cPtr = _wrap_decodeBMXMessageConfig(config);
     BMXMessageConfig* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageConfig alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

/**
 * @brief 推送服务监听者
 */
@interface BMXPushServiceListener : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
/**
 * @brief Push初始化完成通知。
 * @param bmxToken 当前push使用bmxToken
 */
- (void)onPushStartWithBmxToken:(NSString*)bmxToken;
/**
 * @brief Push功能停止通知。
 */
- (void)onPushStop;
/**
 * @brief Push初始化完成后获取推送证书。
 * @param cert 从服务器获取的推送证书
 */
- (void)onCertRetrievedWithCert:(NSString*)cert;
/**
 * @brief 设置用户推送成功回调。
 * @param operationId 操作id
 */
- (void)onSetTagsWithOperationId:(NSString*)operationId;
/**
 * @brief 获取用户推送成功回调。
 * @param operationId 操作id
 */
- (void)onGetTagsWithOperationId:(NSString*)operationId;
/**
 * @brief 删除用户推送成功回调。
 * @param operationId 操作id
 */
- (void)onDeleteTagsWithOperationId:(NSString*)operationId;
/**
 * @brief 清空用户推送成功回调。
 * @param operationId 操作id
 */
- (void)onClearTagsWithOperationId:(NSString*)operationId;
/**
 * @brief 接收到新的Push通知。
 * @param list Push通知列表
 */
- (void)onReceivePushWithList:(BMXMessageList*)list;
/**
 * @brief 发送Push上行消息状态变化通知。
 * @param msg 发生状态变化的上行消息
 * @param error 状态错误码
 */
- (void)onStatusChangedWithMsg:(BMXMessage*)msg error:(BMXErrorCode)error;
/**
 * @brief 注册BMXPushServiceListener绑定到的BMXPushService（SDK内部自动注册）
 * @param service BMXPushService
 */
- (void)registerPushServiceWithService:(BMXPushService*)service;
- (void)dealloc;
@end


/**
 * @interface RTC Engine监听者
 **/
@interface BMXRTCEngineListener : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
  /**
   * @brief 用户加入房间回调
   * @param info 通知信息
   * @param roomId 房间Id
   * @param error 错误码信息
   **/
- (void)onJoinRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error;
  /**
   * @brief 用户离开房间回调
   * @param info 通知信息
   * @param roomId 房间Id
   * @param error 错误码信息
   * @param reason 离开原因
   **/
- (void)onLeaveRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error reason:(NSString*)reason;
  /**
   * @brief断线重新加入房间回调
   * @param roomId 房间Id
   * @param error 错误码信息
   **/
- (void)onRejoiningWithRoomId:(long long)roomId error:(BMXErrorCode)error;
  /**
   * @brief 重新加入房间完成回调
   * @param info 通知信息
   * @param roomId 房间Id
   * @param error 错误码信息
   **/
- (void)onReJoinRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error;
  /**
   * @brief 其他用户加入房间回调
   * @param roomId 房间Id
   * @param usedId 用户id
   **/
- (void)onMemberJoinedWithRoomId:(long long)roomId usedId:(long long)usedId;
  /**
   * @brief 其他用户离开房间回调
   * @param roomId 房间Id
   * @param userId 用户Id
   * @param reason 离开原因
   **/
- (void)onMemberExitedWithRoomId:(long long)roomId usedId:(long long)usedId reason:(NSString*)reason;
  /**
   * @brief 本地流发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onLocalPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 本地流停止发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onLocalUnPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远程流发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemotePublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远程流停止发布回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteUnPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 订阅流回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onSubscribeWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 停止订阅流回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onUnSubscribeWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远端流信息变更通知
   * @param stream 流信息
   * @param trackType 音轨或者视频轨类型
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteTrackNotifyWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 本地音频或视频启用禁用通知回调
   * @param stream 流信息
   * @param trackType 音轨或者视频轨类型
   * @param mute 启用或禁用
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onLocalStreamMuteRspWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType mute:(BOOL)mute info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远端音频或视频启用禁用通知回调
   * @param stream 流信息
   * @param trackType 音轨或者视频轨类型
   * @param mute 启用或禁用
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteStreamMuteRspWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType mute:(BOOL)mute info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 发送端统计信息回调
   * @param streamStats 本地流统计信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onSendRTCStatsWithStreamStats:(BMXStreamStats*)streamStats info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 远端统计信息回调
   * @param streamStats 远端流统计信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onRemoteRTCStatsWithStreamStats:(BMXStreamStats*)streamStats info:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 本地音量调节回调
   * @param volume 音量信息
   **/
- (void)onLocalAudioLevelWithVolume:(int)volume;
  /**
   * @brief 远端音量调节回复
   * @param userId 用户id
   * @param volume 音量信息
   **/
- (void)onRemoteAudioLevelWithUserId:(long long)userId volume:(int)volume;
  /**
   * @brief 被踢信息回调
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onKickoffWithInfo:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 警告信息回调
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onWarningWithInfo:(NSString*)info error:(BMXErrorCode)error;
  /**
   * @brief 错误信息回调
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onErrorWithInfo:(NSString*)info error:(BMXErrorCode)error;
    /**
   * @brief 网络质量回调
   * @param stream 流信息
   * @param info 通知信息
   * @param error 错误码信息
   **/
- (void)onNetworkQualityWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error;
- (id)init;
- (void)dealloc;
@end


/**
 * @brief 聊天监听者
 */
@interface BMXChatServiceListener : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
/**
 * @brief 消息发送状态发生变化
 * @param msg 发生状态变化的消息
 * @param error 状态错误码
 */
- (void)onStatusChangedWithMsg:(BMXMessage*)msg error:(BMXErrorCode)error;
/**
 * @brief 附件上传进度发送变化
 * @param msg 上传附件的消息
 * @param percent 附件上传的进度
 */
- (void)onAttachmentUploadProgressChangedWithMsg:(BMXMessage*)msg percent:(int)percent;
/**
 * @brief 消息撤回状态发送变化
 * @param msg 撤回状态发生变化的消息
 * @param error 状态错误码
 */
- (void)onRecallStatusChangedWithMsg:(BMXMessage*)msg error:(BMXErrorCode)error;
/**
 * @brief 收到消息
 * @param list 接收到的消息列表
 */
- (void)onReceiveWithList:(BMXMessageList*)list;
/**
 * @brief 收到命令消息
 * @param list 接收到的消息列表
 */
- (void)onReceiveCommandMessagesWithList:(BMXMessageList*)list;
/**
 * @brief 收到系统通知消息
 * @param list 接收到的系统消息列表
 */
- (void)onReceiveSystemMessagesWithList:(BMXMessageList*)list;
/**
 * @brief 收到消息已读回执
 * @param list 接收到的已读回执消息列表
 */
- (void)onReceiveReadAcksWithList:(BMXMessageList*)list;
/**
 * @brief 收到消息已送达回执
 * @param list 接收到的已送达回执消息列表
 */
- (void)onReceiveDeliverAcksWithList:(BMXMessageList*)list;
/**
 * @brief 收到撤回消息
 * @param list 接收到的撤回消息列表
 */
- (void)onReceiveRecallMessagesWithList:(BMXMessageList*)list;
/**
 * @brief 收到消息已读取消（多设备其他设备同步消息已读状态变为未读）
 * @param list 接收到的消息已读取消消息列表
 */
- (void)onReceiveReadCancelsWithList:(BMXMessageList*)list;
/**
 * @brief 收到消息全部已读（多设备同步某消息之前消息全部设置为已读）
 * @param list 接收到的消息全部已读消息列表
 */
- (void)onReceiveReadAllMessagesWithList:(BMXMessageList*)list;
/**
 * @brief 收到删除消息 （多设备同步删除消息）
 * @param list 接收到的删除消息列表
 */
- (void)onReceiveDeleteMessagesWithList:(BMXMessageList*)list;
/**
 * @brief 收到音频/视频消息已播放回执
 * @param list 接收到的音频/视频消息已播放回执消息列表
 */
- (void)onReceivePlayAcksWithList:(BMXMessageList*)list;
/**
 * @brief 附件下载状态发生变化
 * @param msg 发生下载状态变化的消息
 * @param error 状态错误码
 * @param percent 附件下载的进度
 */
- (void)onAttachmentStatusChangedWithMsg:(BMXMessage*)msg error:(BMXErrorCode)error percent:(int)percent;
/**
 * @brief 附件下载状态发生变化
 * @param msgId 发生下载状态变化的消息Id
 * @param error 状态错误码
 * @param percent 附件下载的进度
 */
- (void)onAttachmentDownloadByUrlStatusChangedWithMsgId:(long long)msgId error:(BMXErrorCode)error percent:(int)percent;
/**
 * @brief 拉取历史消息
 * @param conversation 发生了拉取指历史消息的会话
 */
- (void)onRetrieveHistoryMessagesWithConversation:(BMXConversation*)conversation;
/**
 * @brief 已经加载完未读会话列表
 */
- (void)onLoadAllConversation;
/**
 * @brief 本地创建新会话
 * @param conversation 新创建的本地会话
 * @param msg 会话的最新消息，存在返回不存在返回为空
 */
- (void)onConversationCreateWithConversation:(BMXConversation*)conversation msg:(BMXMessage*)msg;
/**
 * @brief 删除会话
 * @param conversationId 删除的本地会话id
 * @param error 状态错误码
 */
- (void)onConversationDeleteWithConversationId:(long long)conversationId error:(BMXErrorCode)error;
/**
 * @brief 更新总未读数
 * @param unreadCount 本地全部会话未读总数
 */
- (void)onTotalUnreadCountChangedWithUnreadCount:(int)unreadCount;
/**
 * @brief 注册BMXChatServiceListener绑定到的BMXChatService（SDK内部自动注册）
 * @param service BMXChatService
 */
- (void)registerChatServiceWithService:(BMXChatService*)service;
- (void)dealloc;
@end

@interface BMXRTCServiceListener : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)onRTCMessageStatusChangedWithMsg:(BMXMessage*)msg error:(BMXErrorCode)error;
- (void)onRTCCallMessageReceiveWithMsg:(BMXMessage*)msg;
- (void)onRTCPickupMessageReceiveWithMsg:(BMXMessage*)msg;
- (void)onRTCHangupMessageReceiveWithMsg:(BMXMessage*)msg;
- (void)registerRTCServiceWithService:(BMXRTCService*)service;
- (void)dealloc;
@end

@interface BMXRTCSignalServiceListener : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
- (void)onSessionCreateWithSession:(BMXRTCSession*)session error:(int)error reason:(NSString*)reason;
- (void)onSessionAttachWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type error:(int)error reason:(NSString*)reason;
- (void)onRoomCreateWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason;
- (void)onRoomDestroyWithSession:(BMXRTCSession*)session roomId:(long long)roomId error:(int)error reason:(NSString*)reason;
- (void)onRoomEditWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason;
- (void)onRoomExistWithSession:(BMXRTCSession*)session roomId:(long long)roomId exist:(BOOL)exist error:(int)error reason:(NSString*)reason;
- (void)onRoomAllowedWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room tokens:(TagList*)tokens error:(int)error reason:(NSString*)reason;
- (void)onRoomKickWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room userId:(long long)userId error:(int)error reason:(NSString*)reason;
- (void)onRoomModerateWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room userId:(long long)userId error:(int)error reason:(NSString*)reason;
- (void)onRoomListWithSession:(BMXRTCSession*)session rooms:(BMXRTCRooms*)rooms error:(int)error reason:(NSString*)reason;
- (void)onRoomListParticipantsWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room participants:(BMXRTCRoomParticipants*)participants error:(int)error reason:(NSString*)reason;
- (void)onPubJoinRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room publishers:(BMXRTCPublishers*)publishers error:(int)error reason:(NSString*)reason;
- (void)onOtherPubJoinRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room publishers:(BMXRTCPublishers*)publishers;
- (void)onPubConfigureWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room sdp:(BMXRoomSDPInfo*)sdp streams:(BMXRTCStreams*)streams error:(int)error reason:(NSString*)reason;
- (void)onPubUnPublishWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room senderId:(int)senderId error:(int)error reason:(NSString*)reason;
- (void)onPublishWebrtcUpWithSession:(BMXRTCSession*)session;
- (void)onSubJoinRoomUpdateWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room sdp:(BMXRoomSDPInfo*)sdp senderId:(long long)senderId streams:(BMXRTCStreams*)streams error:(int)error reason:(NSString*)reason;
- (void)onSubStartWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason;
- (void)onSubPauseWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason;
- (void)onSubUnsubscribeWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room streams:(BMXRTCStreams*)streams error:(int)error reason:(NSString*)reason;
- (void)onSubConfigureWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason;
- (void)onSubSwitchWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room publisher:(long long)publisher error:(int)error reason:(NSString*)reason;
- (void)onLeaveRoomWithSession:(BMXRTCSession*)session roomId:(long long)roomId senderId:(long long)senderId error:(int)error reason:(NSString*)reason;
- (void)onSubscribeWebrtcUpWithSession:(BMXRTCSession*)session senderId:(long long)senderId;
- (void)onMediaInfoWithSession:(BMXRTCSession*)session senderId:(long long)senderId type:(BMXTrackType)type receiving:(BOOL)receiving mid:(NSString*)mid;
- (void)onSlowlinkWithSession:(BMXRTCSession*)session senderId:(long long)senderId uplink:(BOOL)uplink nacks:(int)nacks;
- (void)onHangupWithSession:(BMXRTCSession*)session senderId:(long long)senderId reason:(NSString*)reason;
- (void)onSessionHangupWithSession:(BMXRTCSession*)session error:(long long)error reason:(NSString*)reason;
- (void)onSessionDetachWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type error:(int)error reason:(NSString*)reason;
- (void)onSessionDestroyWithSessionId:(long long)sessionId error:(int)error reason:(NSString*)reason;
- (void)registerRTCSignalServiceWithService:(BMXRTCSignalService*)service;
- (void)dealloc;
@end

/**
 * @brief 好友变化监听者
 **/
@interface BMXRosterServiceListener : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
  /**
   * @brief 添加好友
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   **/
- (void)onFriendAddedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId;
  /**
   * @brief 删除好友
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   **/
- (void)onFriendRemovedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId;
  /**
   * @brief 收到加好友申请
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   * @param message 好友申请消息
   **/
- (void)onAppliedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId message:(NSString*)message;
  /**
   * @brief 加好友申请被通过了
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   **/
- (void)onApplicationAcceptedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId;
  /**
   * @brief 加好友申请被拒绝了
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   * @param reason 申请拒绝原因
   **/
- (void)onApplicationDeclinedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId reason:(NSString*)reason;
  /**
   * @brief 添加黑名单
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   **/
- (void)onBlockListAddedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId;
  /**
   * @brief 删除黑名单
   * @param sponsorId 操作的发起者
   * @param recipientId 操作的接受者
   **/
- (void)onBlockListRemovedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId;
  /**
   * @brief 用户信息更新
   * @param item 更新的好友信息
   **/
- (void)onRosterInfoUpdateWithItem:(BMXRosterItem*)item;
  /**
   * @brief 客户端从服务器拉取到新联系人时触发，用于用户联系人列表更新，从SDK调用本地获取联系人即可取得全部成员信息
   **/
- (void)onRosterListUpdate;
  /**
   * @brief 注册BMXRosterServiceListener绑定到的BMXRosterService（SDK内部自动注册）
   * @param service BMXRosterService
   **/
- (void)registerRosterServiceWithService:(BMXRosterService*)service;
- (void)dealloc;
@end

/**
 * @brief 用户状态监听者
 **/
@interface BMXUserServiceListener : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
  /**
   * @brief 链接状态发生变化
   * @param status 连接状态
   **/
- (void)onConnectStatusChangedWithStatus:(BMXConnectStatus)status;
  /**
   * @brief 用户登陆
   * @param profile 用户profile
   **/
- (void)onUserSignInWithProfile:(BMXUserProfile*)profile;
  /**
   * @brief 用户登出
   * @param error 状态错误码
   **/
- (void)onUserSignOutWithError:(BMXErrorCode)error userId:(long long)userId;
  /**
   * @brief 同步用户信息更新（其他设备操作发生用户信息变更）
   * @param profile 用户profile
   **/
- (void)onInfoUpdatedWithProfile:(BMXUserProfile*)profile;
  /**
   * @brief 用户在其他设备上登陆
   * @param deviceSN 设备序列号
   **/
- (void)onOtherDeviceSingInWithDeviceSN:(int)deviceSN;
  /**
   * @brief 用户在其他设备上登出
   * @param deviceSN 设备序列号
   **/
- (void)onOtherDeviceSingOutWithDeviceSN:(int)deviceSN;
  /**
   * @brief 用户流量超限通知
   **/
- (void)onTrafficLimitExceeded;
  /**
   * @brief 注册BMXUserServiceListener绑定到的BMXUserService（SDK内部自动注册）
   * @param service BMXUserService
   **/
- (void)registerUserServiceWithService:(BMXUserService*)service;
- (void)dealloc;
@end

/**
 * @brief 群组变化监听者
 **/
@interface BMXGroupServiceListener : NSObject
@property(nonatomic) void *swigCPtr;
@property(nonatomic) BOOL swigCMemOwn;
- (id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject;
- (id)init;
  /**
   * @brief 多设备同步创建群组
   * @param group 新创建的群组
   **/
- (void)onGroupCreateWithGroup:(BMXGroup*)group;
  /**
   * @brief 群列表更新了
   * @param list 更新的群组列表
   **/
- (void)onGroupListUpdateWithList:(BMXGroupList*)list;
  /**
   * @brief 加入了某群
   * @param group 加入的群组
   **/
- (void)onGroupJoinedWithGroup:(BMXGroup*)group;
  /**
   * @brief 退出了某群
   * @param group 退出的群组
   * @param reason 退出原因
   **/
- (void)onGroupLeftWithGroup:(BMXGroup*)group reason:(NSString*)reason;
  /**
   * @brief 收到入群邀请
   * @param groupId 邀请进入的群组id
   * @param inviter 邀请者id
   * @param message 邀请原因
   **/
- (void)onInvitatedWithGroupId:(long long)groupId inviter:(long long)inviter message:(NSString*)message;
  /**
   * @brief 入群邀请被接受
   * @param group 邀请被同意的群组
   * @param inviteeId 被邀请者id
   **/
- (void)onInvitationAcceptedWithGroup:(BMXGroup*)group inviteeId:(long long)inviteeId;
  /**
   * @brief 入群申请被拒绝
   * @param group 邀请被拒绝的群组
   * @param inviteeId 被邀请者id
   * @param reason 拒绝原因
   **/
- (void)onInvitationDeclinedWithGroup:(BMXGroup*)group inviteeId:(long long)inviteeId reason:(NSString*)reason;
  /**
   * @brief 收到入群申请
   * @param group 收到入群申请的群组
   * @param applicantId 申请者id
   * @param message 申请原因
   **/
- (void)onAppliedWithGroup:(BMXGroup*)group applicantId:(long long)applicantId message:(NSString*)message;
  /**
   * @brief 入群申请被接受
   * @param group 入群申请被接受的群组
   * @param approver 申请的批准者
   **/
- (void)onApplicationAcceptedWithGroup:(BMXGroup*)group approver:(long long)approver;
  /**
   * @brief 入群申请被拒绝
   * @param group 入群申请被拒绝的群组
   * @param approver 申请的批准者
   * @param reason 拒绝的原因
   **/
- (void)onApplicationDeclinedWithGroup:(BMXGroup*)group approver:(long long)approver reason:(NSString*)reason;
  /**
   * @brief 群成员被禁言
   * @param group 群成员被禁言的群组
   * @param members 被禁言的群成员id列表
   * @param duration 禁言时长
   **/
- (void)onMembersBannedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members duration:(long long)duration;
  /**
   * @brief 群成员被解除禁言
   * @param group 群成员被解除禁言的群组
   * @param members 被解除禁言的群成员id列表
   **/
- (void)onMembersUnbannedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members;
  /**
   * @brief 加入新成员
   * @param group 有成员加入的群组
   * @param memberId 加入成员的id
   * @param inviter 邀请者id
   **/
- (void)onMemberJoinedWithGroup:(BMXGroup*)group memberId:(long long)memberId inviter:(long long)inviter;
  /**
   * @brief 群成员退出
   * @param group 有成员退出的群组
   * @param memberId 退出的群成员id
   * @param reason 退出的原因
   **/
- (void)onMemberLeftWithGroup:(BMXGroup*)group memberId:(long long)memberId reason:(NSString*)reason;
  /**
   * @brief 添加了新管理员
   * @param group 发生添加新管理员的群组
   * @param members 被提升为管理员的成员列表
   **/
- (void)onAdminsAddedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members;
  /**
   * @brief 移除了管理员
   * @param group 发生移除管理员的群组
   * @param members 被移除了管理员的成员列表
   * @param reason 被移除的原因
   **/
- (void)onAdminsRemovedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members reason:(NSString*)reason;
  /**
   * @brief 成为群主
   * @param group 被转让为群主的群组
   **/
- (void)onOwnerAssignedWithGroup:(BMXGroup*)group;
  /**
   * @brief 群组信息变更
   * @param group 群信息发生变更的群组
   * @param type 发生变更的群信息类型
   **/
- (void)onGroupInfoUpdateWithGroup:(BMXGroup*)group type:(BMXGroup_UpdateInfoType)type;
  /**
   * @brief 群成员更改群内昵称
   * @param group 发生群成员变更群昵称的群组
   * @param memberId 变更群昵称的群成员id
   * @param nickName 变更后的群昵称
   **/
- (void)onMemberChangeNickNameWithGroup:(BMXGroup*)group memberId:(long long)memberId nickName:(NSString*)nickName;
  /**
   * @brief 收到群公告
   * @param group 发生群公告更新的群组
   * @param announcement 变更后的最新的群更高
   **/
- (void)onAnnouncementUpdateWithGroup:(BMXGroup*)group announcement:(BMXGroupAnnouncement*)announcement;
  /**
   * @brief 收到共享文件
   * @param group 发生群共享文件上传的群组
   * @param sharedFile 新上传的群共享文件
   **/
- (void)onSharedFileUploadedWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile;
  /**
   * @brief 删除了共享文件
   * @param group 发生群共享文件删除的群组
   * @param sharedFile 被删除的群共享文件
   **/
- (void)onSharedFileDeletedWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile;
  /**
   * @brief 共享文件更新文件名
   * @param group 发生群共享文件更新的群组
   * @param sharedFile 更新的群共享文件
   **/
- (void)onSharedFileUpdatedWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile;
  /**
   * @brief 添加黑名单
   * @param group 添加黑名单的群组
   * @param members 添加的黑名单成员列表
   **/
- (void)onBlockListAddedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members;
  /**
   * @brief 删除黑名单
   * @param group 删除黑名单的群组
   * @param members 删除的黑名单成员列表
   **/
- (void)onBlockListRemovedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members;
  /**
   * @brief 客户端从服务器拉取到新群组时触发，用于用户群组列表更新，从SDK调用本地获取群组即可取得全部成员信息
   **/
- (void)onGroupListUpdate;
  /**
   * @brief 注册BMXGroupServiceListener绑定到的BMXGroupService（SDK内部自动注册）
   * @param service BMXGroupService
   **/
- (void)registerGroupServiceWithService:(BMXGroupService*)service;
- (void)dealloc;
@end


@implementation BMXMessageList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessageList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessageList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXMessageList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXMessageList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXMessageList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXMessageList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXMessageList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXMessage*)x {
  _wrap_BMXMessageList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXMessage*)get:(int)i {
     void* cPtr = _wrap_BMXMessageList_get(self.swigCPtr, i);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXMessage*)val {
  _wrap_BMXMessageList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXMessageList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation TagList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_TagList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_TagList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_TagList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_TagList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_TagList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_TagList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_TagList_clear(self.swigCPtr);
}

- (void)addWithX:(NSString*)x {
  _wrap_TagList_add(self.swigCPtr, x);
}

- (NSString*)get:(int)i {
  {
    return _wrap_TagList_get(self.swigCPtr, i);
  }
}

- (void)set:(int)i val:(NSString*)val {
  _wrap_TagList_set(self.swigCPtr, i, val);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_TagList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXConversationList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXConversationList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXConversationList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXConversationList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXConversationList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXConversationList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXConversationList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXConversationList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXConversation*)x {
  _wrap_BMXConversationList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXConversation*)get:(int)i {
     void* cPtr = _wrap_BMXConversationList_get(self.swigCPtr, i);
     BMXConversation* ret = nil;
     if(cPtr) {
        ret = [[BMXConversation alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXConversation*)val {
  _wrap_BMXConversationList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXConversationList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXDeviceList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXDeviceList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXDeviceList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXDeviceList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXDeviceList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXDeviceList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXDeviceList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXDeviceList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXDevice*)x {
  _wrap_BMXDeviceList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXDevice*)get:(int)i {
     void* cPtr = _wrap_BMXDeviceList_get(self.swigCPtr, i);
     BMXDevice* ret = nil;
     if(cPtr) {
        ret = [[BMXDevice alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXDevice*)val {
  _wrap_BMXDeviceList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXDeviceList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXGroupList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXGroupList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXGroupList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXGroupList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXGroupList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXGroup*)x {
  _wrap_BMXGroupList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXGroup*)get:(int)i {
     void* cPtr = _wrap_BMXGroupList_get(self.swigCPtr, i);
     BMXGroup* ret = nil;
     if(cPtr) {
        ret = [[BMXGroup alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXGroup*)val {
  _wrap_BMXGroupList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupMemberList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupMemberList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupMemberList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXGroupMemberList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXGroupMemberList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXGroupMemberList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXGroupMemberList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXGroupMemberList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXGroupMember*)x {
  _wrap_BMXGroupMemberList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXGroupMember*)get:(int)i {
     void* cPtr = _wrap_BMXGroupMemberList_get(self.swigCPtr, i);
     BMXGroupMember* ret = nil;
     if(cPtr) {
        ret = [[BMXGroupMember alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXGroupMember*)val {
  _wrap_BMXGroupMemberList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupMemberList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupBannedMemberList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupBannedMemberList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupBannedMemberList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXGroupBannedMemberList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXGroupBannedMemberList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXGroupBannedMemberList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXGroupBannedMemberList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXGroupBannedMemberList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXGroupBannedMember*)x {
  _wrap_BMXGroupBannedMemberList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXGroupBannedMember*)get:(int)i {
     void* cPtr = _wrap_BMXGroupBannedMemberList_get(self.swigCPtr, i);
     BMXGroupBannedMember* ret = nil;
     if(cPtr) {
        ret = [[BMXGroupBannedMember alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXGroupBannedMember*)val {
  _wrap_BMXGroupBannedMemberList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupBannedMemberList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupSharedFileList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupSharedFileList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupSharedFileList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXGroupSharedFileList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXGroupSharedFileList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXGroupSharedFileList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXGroupSharedFileList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXGroupSharedFileList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXGroupSharedFile*)x {
  _wrap_BMXGroupSharedFileList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXGroupSharedFile*)get:(int)i {
     void* cPtr = _wrap_BMXGroupSharedFileList_get(self.swigCPtr, i);
     BMXGroupSharedFile* ret = nil;
     if(cPtr) {
        ret = [[BMXGroupSharedFile alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXGroupSharedFile*)val {
  _wrap_BMXGroupSharedFileList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupSharedFileList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupAnnouncementList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupAnnouncementList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupAnnouncementList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXGroupAnnouncementList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXGroupAnnouncementList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXGroupAnnouncementList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXGroupAnnouncementList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXGroupAnnouncementList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXGroupAnnouncement*)x {
  _wrap_BMXGroupAnnouncementList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXGroupAnnouncement*)get:(int)i {
     void* cPtr = _wrap_BMXGroupAnnouncementList_get(self.swigCPtr, i);
     BMXGroupAnnouncement* ret = nil;
     if(cPtr) {
        ret = [[BMXGroupAnnouncement alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXGroupAnnouncement*)val {
  _wrap_BMXGroupAnnouncementList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupAnnouncementList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRosterServiceApplicationList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRosterServiceApplicationList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRosterServiceApplicationList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXRosterServiceApplicationList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXRosterServiceApplicationList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXRosterServiceApplicationList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXRosterServiceApplicationList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXRosterServiceApplicationList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXRosterServiceApplication*)x {
  _wrap_BMXRosterServiceApplicationList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXRosterServiceApplication*)get:(int)i {
     void* cPtr = _wrap_BMXRosterServiceApplicationList_get(self.swigCPtr, i);
     BMXRosterServiceApplication* ret = nil;
     if(cPtr) {
        ret = [[BMXRosterServiceApplication alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXRosterServiceApplication*)val {
  _wrap_BMXRosterServiceApplicationList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRosterServiceApplicationList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupApplicationList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupApplicationList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupApplicationList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXGroupApplicationList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXGroupApplicationList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXGroupApplicationList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXGroupApplicationList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXGroupApplicationList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXGroupApplication*)x {
  _wrap_BMXGroupApplicationList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXGroupApplication*)get:(int)i {
     void* cPtr = _wrap_BMXGroupApplicationList_get(self.swigCPtr, i);
     BMXGroupApplication* ret = nil;
     if(cPtr) {
        ret = [[BMXGroupApplication alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXGroupApplication*)val {
  _wrap_BMXGroupApplicationList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupApplicationList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupInvitationList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupInvitationList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupInvitationList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXGroupInvitationList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXGroupInvitationList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXGroupInvitationList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXGroupInvitationList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXGroupInvitationList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXGroupInvitation*)x {
  _wrap_BMXGroupInvitationList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXGroupInvitation*)get:(int)i {
     void* cPtr = _wrap_BMXGroupInvitationList_get(self.swigCPtr, i);
     BMXGroupInvitation* ret = nil;
     if(cPtr) {
        ret = [[BMXGroupInvitation alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXGroupInvitation*)val {
  _wrap_BMXGroupInvitationList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupInvitationList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation ListOfLongLong

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_ListOfLongLong__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_ListOfLongLong__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_ListOfLongLong_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_ListOfLongLong_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_ListOfLongLong_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_ListOfLongLong_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_ListOfLongLong_clear(self.swigCPtr);
}

- (void)addWithX:(long long *)x {
  _wrap_ListOfLongLong_add(self.swigCPtr, x);
}

- (long long *)get:(int)i {
   return _wrap_ListOfLongLong_get(self.swigCPtr, i); 
}

- (void)set:(int)i val:(long long *)val {
  _wrap_ListOfLongLong_set(self.swigCPtr, i, val);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_ListOfLongLong((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXError

+ (instancetype)errorCode:(BMXErrorCode)code {
    if (code == BMXErrorCode_NoError) {
        return nil;
    }
    BMXError *error = [[BMXError alloc] initWithErrorCode:code];
    return error;
}

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)initWithErrorCode:(BMXErrorCode)errorCode {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXError((int)errorCode);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (BMXErrorCode)errorCode {
   return (BMXErrorCode)_wrap_BMXError_errorCode(self.swigCPtr); 
}

- (NSString*)description {
  {
    return _wrap_BMXError_description(self.swigCPtr);
  }
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXError((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end

const int CONNECT_MAX_RETRY = (const int) _wrap_CONNECT_MAX_RETRY_get();

@implementation BMXDevice

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (int)deviceSN {
   return _wrap_BMXDevice_deviceSN(self.swigCPtr); 
}

- (long long)userId {
   return _wrap_BMXDevice_userId(self.swigCPtr); 
}

- (int)platform {
   return _wrap_BMXDevice_platform(self.swigCPtr); 
}

- (NSString*)userAgent {
  {
    return _wrap_BMXDevice_userAgent(self.swigCPtr);
  }
}

- (void)setUserAgent:(NSString*)userAgent {
  _wrap_BMXDevice_setUserAgent(self.swigCPtr, userAgent);
}

- (BOOL)isCurrentDevice {
   return _wrap_BMXDevice_isCurrentDevice(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXDevice((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end
#import "BMXDelegatesContainer.h"

#include "bmx_group_service_listener.h"

    class GroupServiceListener : public floo::BMXGroupServiceListener {
    public:
        
        /**
         * 多设备同步创建群组
         **/
        virtual void onGroupCreate(floo::BMXGroupPtr group)  override;
        
        /**
         * 退出了某群
         **/
        virtual void onGroupLeft(floo::BMXGroupPtr group, const std::string& reason)  override;
        
        /**
         * 收到入群邀请
         **/
        virtual void onInvitated(int64_t groupId, int64_t inviter, const std::string& message)  override;
        
        /**
         * 入群邀请被接受
         **/
        virtual void onInvitationAccepted(floo::BMXGroupPtr group, int64_t inviteeId)  override;
        
        /**
         * 入群申请被拒绝
         **/
        virtual void onInvitationDeclined(floo::BMXGroupPtr group, int64_t inviteeId, const std::string& reason)  override;
        
        /**
         * 收到入群申请
         **/
        virtual void onApplied(floo::BMXGroupPtr group, int64_t applicantId, const std::string& message)  override;
        
        /**
         * 入群申请被接受
         **/
        virtual void onApplicationAccepted(floo::BMXGroupPtr group, int64_t approver)  override;
        
        /**
         * 入群申请被拒绝
         **/
        virtual void onApplicationDeclined(floo::BMXGroupPtr group, int64_t approver, const std::string& reason)  override;
        
        /**
         * 群成员被禁言
         **/
        virtual void onMembersBanned(floo::BMXGroupPtr group, const std::vector<int64_t>& members, int64_t duration)  override;
        
        /**
         * 群成员被解除禁言
         **/
        virtual void onMembersUnbanned(floo::BMXGroupPtr group, const std::vector<int64_t>& members)  override;
        
        /**
         * 加入新成员
         **/
        virtual void onMemberJoined(floo::BMXGroupPtr group, int64_t memberId, int64_t inviter)  override;
        
        /**
         * 群成员退出
         **/
        virtual void onMemberLeft(floo::BMXGroupPtr group, int64_t memberId, const std::string& reason)  override;
        
        /**
         * 添加了新管理员
         **/
        virtual void onAdminsAdded(floo::BMXGroupPtr group, const std::vector<int64_t>& members)  override;
        
        /**
         * 移除了管理员
         **/
        virtual void onAdminsRemoved(floo::BMXGroupPtr group, const std::vector<int64_t>& members, const std::string& reason)  override;
        
        /**
         * 成为群主
         **/
        virtual void onOwnerAssigned(floo::BMXGroupPtr group)  override;
        
        /**
         * 群组信息变更
         **/
        virtual void onGroupInfoUpdate(floo::BMXGroupPtr group, floo::BMXGroup::UpdateInfoType type) override;
        
        /**
         * 群成员更改群内昵称
         **/
        virtual void onMemberChangeNickName(floo::BMXGroupPtr group, int64_t memberId, const std::string& nickName) override;
        
        /**
         * 收到群公告
         **/
        virtual void onAnnouncementUpdate(floo::BMXGroupPtr group, floo::BMXGroup::AnnouncementPtr announcement) override;

        /**
         * 收到共享文件
         **/
        virtual void onSharedFileUploaded(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile) override;
        
        /**
         * 删除了共享文件
         **/
        virtual void onSharedFileDeleted(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile) override;
        
        
        /**
         * 共享文件更新文件名
         **/
        virtual void onSharedFileUpdated(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile) override;
        
        
        virtual void addDelegate(id<BMXGroupServiceProtocol> delegate, dispatch_queue_t queue);
        
        virtual void removeDelegate(id<BMXGroupServiceProtocol> delegate);
        
        BMXDelegatesContainer<BMXGroupServiceProtocol> *container;
        
    private:
        NSObject *containerLock;
        
    };
    /**
     * 多设备同步创建群组
     **/
    void GroupServiceListener:: onGroupCreate(floo::BMXGroupPtr group) {
        if (group && container) {
            BMXGroup2Void(group)
            BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
            [container groupDidCreated:g];
        }
    }
    
    
    /**
     * 退出了某群
     **/
     void GroupServiceListener:: onGroupLeft(floo::BMXGroupPtr group,
                                             const std::string& reason) {
         if (container && group) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             NSString *reasonStr = [BMXStringUtil stdToNSString:reason];
             [container groupLeft:g reason:reasonStr];
         }
    }
    
    /**
     * 收到入群邀请
     **/
     void GroupServiceListener:: onInvitated(int64_t groupId, int64_t inviter, const std::string& message) {
         if (container) {
             NSString *messageStr = [BMXStringUtil stdToNSString:message];
             [container groupDidRecieveInviter:(NSInteger)inviter groupId:(NSInteger)groupId message:messageStr];
         }
    }
    
    /**
     * 入群邀请被接受
     **/
     void GroupServiceListener:: onInvitationAccepted(floo::BMXGroupPtr group,
                                                      int64_t inviteeId) {
         if (container && group) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             [container groupInvitationAccepted:g inviteeId:(NSInteger)inviteeId];
         }
    }
    
    /**
     * 入群申请被拒绝
     **/
     void GroupServiceListener:: onInvitationDeclined(floo::BMXGroupPtr group,
                                                      int64_t inviteeId, const
                                                      std::string& reason) {
         if (container && group) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             [container groupInvitationAccepted:g inviteeId:(NSInteger)inviteeId];
         }
    }
    
    /**
     * 收到入群申请
     **/
     void GroupServiceListener:: onApplied(floo::BMXGroupPtr group,
                                           int64_t applicantId,
                                           const std::string& message) {
         
         if (container && group) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             NSString *messageStr = [BMXStringUtil stdToNSString:message];
             [container groupDidRecieveApplied:g
                                   applicantId:(NSInteger)applicantId
                                       message:messageStr];
         }
    }
    
    /**
     * 入群申请被接受
     **/
     void GroupServiceListener:: onApplicationAccepted(floo::BMXGroupPtr group,
                                                       int64_t approver) {
         if (container && group) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             [container groupApplicationAccepted:g approver:(NSInteger)approver];
         }
    }
    
    /**
     * 入群申请被拒绝
     **/
     void GroupServiceListener:: onApplicationDeclined(floo::BMXGroupPtr group,
                                                       int64_t approver,
                                                       const std::string& reason) {
         if (container && group) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             NSString *reasonStr = [BMXStringUtil stdToNSString:reason];
             [container groupApplicationDeclined:g approver:(NSInteger)approver reason:reasonStr];
         }
    }
    
    /**
     * 群成员被禁言
     **/
     void GroupServiceListener:: onMembersBanned(floo::BMXGroupPtr group, const std::vector<int64_t> &members, int64_t duration) {
         if (container && members.size()) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             NSMutableArray *groupIdList = [NSMutableArray array];
             for(int64_t userId : members) {
                 [groupIdList addObject:[NSNumber numberWithLongLong:(long long)userId]];
             }
             [container groupMembersMutedGroup:g members:groupIdList duration:duration];
         }
    }
    
    /**
     * 群成员被解除禁言
     **/
     void GroupServiceListener:: onMembersUnbanned(floo::BMXGroupPtr group, const std::vector<int64_t>& members) {
         if (container && members.size()) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             NSMutableArray *groupIdList = [NSMutableArray array];
             for(int64_t userId : members) {
                 [groupIdList addObject:[NSNumber numberWithLongLong:(long long)userId]];
             }
             [container groupMembersUnMutedGroup:g Unmuted:groupIdList];
         }

    }
    /**
     * 加入新成员
     **/
     void GroupServiceListener:: onMemberJoined(floo::BMXGroupPtr group, int64_t memberId, int64_t inviter) {
         if (container && group) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             [container groupMemberJoined:g memberId:(NSInteger)memberId inviter:(NSInteger)inviter];
         }
    }
    
    /**
     * 群成员退出
     **/
     void GroupServiceListener:: onMemberLeft(floo::BMXGroupPtr group, int64_t memberId, const std::string& reason) {
         if (container && group) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             NSString *reasonStr = [BMXStringUtil stdToNSString:reason];
             [container groupMemberLeft:g memberId:(NSInteger)memberId reason:reasonStr];
         }
    }
    
    /**
     * 添加了新管理员
     **/
    void GroupServiceListener:: onAdminsAdded(floo::BMXGroupPtr group, const std::vector<int64_t>& members) {
         if (container && members.size()) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             NSMutableArray *groupIdList = [NSMutableArray array];
             for(int64_t userId : members) {
                 [groupIdList addObject: [NSNumber numberWithLongLong:(long long)userId]];
             }
             [container groupAdminsAddedGroup:g members:groupIdList];
         }
     };
    
    /**
     * 移除了管理员
     **/
    void GroupServiceListener:: onAdminsRemoved(floo::BMXGroupPtr group, const std::vector<int64_t>& members, const std::string& reason) {
         if (container && members.size()) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             NSMutableArray *groupIdList = [NSMutableArray array];
             for(int64_t userId : members) {
                 [groupIdList addObject:[NSNumber numberWithLongLong: (long long)userId]];
             }
             [container groupAdminsRemovedFromGroup:g members:groupIdList reason:[BMXStringUtil stdToNSString:reason]];
         }
        
     };
    /**
     * 成为群主
     **/
     void GroupServiceListener:: onOwnerAssigned(floo::BMXGroupPtr group) {
         if (container && group) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             [container groupOwnerAssigned:g];
         }
     };
    
    /**
     * 群组信息变更
     **/
     void GroupServiceListener:: onGroupInfoUpdate(floo::BMXGroupPtr group, floo::BMXGroup::UpdateInfoType type) {
         if (container && group) {
             BMXGroup2Void(group)
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
             [container groupInfoDidUpdate:g updateInfoType:(BMXGroup_UpdateInfoType)type];
         }
    }
    
    /**
     * 群成员更改群内昵称
     **/
    void GroupServiceListener:: onMemberChangeNickName(floo::BMXGroupPtr group, int64_t memberId, const std::string& nickName) {
        if (container && group) {
            BMXGroup2Void(group)
            BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
            [container groupMemberDidChangeNickName:g memberId:(long long)memberId nickName:[BMXStringUtil stdToNSString:nickName]];
        }
    }


    /**
     * 收到群公告
     **/
     void GroupServiceListener:: onAnnouncementUpdate(floo::BMXGroupPtr group, floo::BMXGroup::AnnouncementPtr announcement) {
         if (container && group) {
             void *pGroup;
             {
                 BMXGroup2Void(group)
                 pGroup =(void *)lresult;
             }
             void *pAnn;
             {
                 BMXGroupAnnouncement2Void(announcement)
                 pAnn = (void *)lresult;
             }
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:pGroup swigOwnCObject:NO];
             BMXGroupAnnouncement *ann = [[[BMXGroupAnnouncement alloc] init] initWithCptr:pAnn swigOwnCObject:NO];
             [container groupAnnouncementUpdate:g announcement:ann];
         }
     };
    
    /**
     * 收到共享文件
     **/
     void GroupServiceListener:: onSharedFileUploaded(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile) {
         if (container && group) {
             void *pGroup;
             {
                 BMXGroup2Void(group)
                 pGroup =(void *)lresult;
             }
             void *pSharedFile;
             {
                 BMXGroupSharedFile2Void(sharedFile)
                 pSharedFile = (void *)lresult;
             }
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:pGroup swigOwnCObject:NO];
             BMXGroupSharedFile *file = [[[BMXGroupSharedFile alloc] init] initWithCptr:pSharedFile swigOwnCObject:NO];
             [container groupSharedFileUploaded:g sharedFile:file];
         }
     };
    
    /**
     * 删除了共享文件
     **/
     void GroupServiceListener:: onSharedFileDeleted(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile) {
         if (container && group) {
             void *pGroup;
             {
                 BMXGroup2Void(group)
                 pGroup =(void *)lresult;
             }
             void *pSharedFile;
             {
                 BMXGroupSharedFile2Void(sharedFile)
                 pSharedFile = (void *)lresult;
             }
             BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:pGroup swigOwnCObject:NO];
             BMXGroupSharedFile *file = [[[BMXGroupSharedFile alloc] init] initWithCptr:pSharedFile swigOwnCObject:NO];
             [container groupSharedFileDeleted:g sharedFile:file];
         }
        
     };
    
    /**
     * 共享文件更新文件名
     **/
    void GroupServiceListener::onSharedFileUpdated(floo::BMXGroupPtr group, floo::BMXGroup::SharedFilePtr sharedFile) {
        if (container && group) {
            void *pGroup;
            {
                BMXGroup2Void(group)
                pGroup =(void *)lresult;
            }
            void *pSharedFile;
            {
                BMXGroupSharedFile2Void(sharedFile)
                pSharedFile = (void *)lresult;
            }
            BMXGroup *g = [[[BMXGroup alloc] init] initWithCptr:pGroup swigOwnCObject:NO];
            BMXGroupSharedFile *file = [[[BMXGroupSharedFile alloc] init] initWithCptr:pSharedFile swigOwnCObject:NO];
            [container groupShareFileDidUpdated:g sharedFile:file];
        }
    }
    
    void GroupServiceListener::addDelegate(id<BMXGroupServiceProtocol> delegate, dispatch_queue_t queue) {
        if (!container) {
            container = [(BMXDelegatesContainer<BMXGroupServiceProtocol> *)[BMXDelegatesContainer alloc] init];
        }
        
        if (!containerLock) {
            containerLock = [[NSObject alloc] init];
        }
        
        if (delegate) {
            if (!queue) {
                queue = dispatch_get_main_queue();
            }
            
            @synchronized (containerLock) {
                [container addDelegate:delegate delegateQueue:queue];
            }
        }
        
    }
    
    void GroupServiceListener::removeDelegate(id<BMXGroupServiceProtocol> delegate) {
        if (container && delegate) {
            if (!containerLock) {
                containerLock = [[NSObject alloc] init];
            }
            @synchronized (containerLock) {
                [container removeDelegate:delegate];
            }
        }
    }


#include "bmx_user_service_listener.h"
    class UserServiceListener : public floo::BMXUserServiceListener {
        
    public:

        virtual void onConnectStatusChanged(floo::BMXConnectStatus status) override;
        virtual void onUserSignIn(floo::BMXUserProfilePtr profile) override;
        virtual void onUserSignOut(floo::BMXErrorCode error, int64_t userId) override;
        
        
        /**
         * 同步用户信息更新（其他设备操作发生用户信息变更）
         **/
        virtual void onInfoUpdated(floo::BMXUserProfilePtr profile) override;
        
        /**
         * 用户在其他设备上登陆
         **/
        virtual void onOtherDeviceSingIn(int deviceSN)  override;
        
        /**
         * 用户在其他设备上登出
         **/
        virtual void onOtherDeviceSingOut(int deviceSN)  override;

        virtual void addDelegate(id<BMXUserServiceProtocol> delegate, dispatch_queue_t queue);
        virtual void removeDelegate(id<BMXUserServiceProtocol> delegate);
        
        BMXDelegatesContainer<BMXUserServiceProtocol> *container;
        
    private:
        NSObject *containerLock;

    };
       
    void UserServiceListener:: onConnectStatusChanged(floo::BMXConnectStatus status){
        if (container) {
            [container connectStatusDidChanged:(BMXConnectStatus)status];
        }
    };
    
    void UserServiceListener:: onUserSignIn(floo::BMXUserProfilePtr profile) {
        if (container) {
            BMXUserProfile2Void(profile)
            BMXUserProfile *profileModel = [[[BMXUserProfile alloc]init] initWithCptr:(void *)lresult swigOwnCObject:NO];
            [container userSignIn:profileModel];
        }
        
    };
    
    void UserServiceListener:: onUserSignOut(floo::BMXErrorCode error, int64_t userId) {
        if (container) {
            BMXError *errorCode = [BMXError errorCode: (BMXErrorCode)error];
            [container userSignOut:errorCode userId:(long long)userId];
        }
    };
    
    /**
     * 同步用户信息更新（其他设备操作发生用户信息变更）
     **/
    void UserServiceListener:: onInfoUpdated(floo::BMXUserProfilePtr profile)  {
        if (container) {
            BMXUserProfile2Void(profile)
            BMXUserProfile *profileModel = [[[BMXUserProfile alloc]init] initWithCptr:(void *)lresult swigOwnCObject:NO];
            [container userInfoDidUpdated:profileModel];
        }
    }
    
    /**
     * 用户在其他设备上登陆
     **/
    void UserServiceListener:: onOtherDeviceSingIn(int deviceSN) {
        if (container) {
            [container userOtherDeviceDidSignIn:deviceSN];
        }
    }
    
    /**
     * 用户在其他设备上登出
     **/
    void UserServiceListener:: onOtherDeviceSingOut(int deviceSN) {
        if (container) {
            [container userOtherDeviceDidSignOut:deviceSN];
        }
    }
    
    void UserServiceListener::addDelegate(id<BMXUserServiceProtocol> delegate, dispatch_queue_t queue) {
        if (!container) {
            container = [(BMXDelegatesContainer<BMXUserServiceProtocol> *)[BMXDelegatesContainer alloc] init];
        }
        
        if (!containerLock) {
            containerLock = [[NSObject alloc] init];
        }
        
        if (delegate) {
            if (!queue) {
                queue = dispatch_get_main_queue();
            }
            
            @synchronized (containerLock) {
                [container addDelegate:delegate delegateQueue:queue];
            }
        }
    };
    
    void UserServiceListener::removeDelegate(id<BMXUserServiceProtocol> delegate) {
        if (container && delegate) {
            if (!containerLock) {
                containerLock = [[NSObject alloc] init];
            }
            
            @synchronized (containerLock) {
                [container removeDelegate:delegate];
            }
            
        }
    };
 
    
#include "bmx_roster_service_listener.h"

class RosterServiceListener : public floo::BMXRosterServiceListener {

public:

    /**
     * 添加好友
     **/
    virtual void onFriendAdded(int64_t sponsorId, int64_t recipientId) override;
    
    /**
     * 删除好友
     **/
    virtual void onFriendRemoved(int64_t sponsorId, int64_t recipientId) override;
    
    /**
     * 收到加好友申请
     **/
    virtual void onApplied(int64_t sponsorId, int64_t recipientId, const std::string& message) override;
    
    /**
     * 加好友申请被通过了
     **/
    virtual void onApplicationAccepted(int64_t sponsorId, int64_t recipientId) override;
    
    /**
     * 加好友申请被拒绝了
     **/
    virtual void onApplicationDeclined(int64_t sponsorId, int64_t recipientId, const std::string& reason) override;
    
    /**
     * 添加黑名单
     **/
    virtual void onBlockListAdded(int64_t sponsorId, int64_t recipientId) override;
    
    /**
     * 删除黑名单
     **/
    virtual void onBlockListRemoved(int64_t sponsorId, int64_t recipientId) override;
    
    
    /**
     * 用户信息更新
     **/
    virtual void onRosterInfoUpdate(floo:: BMXRosterItemPtr item) override;
    
    virtual void addDelegate(id<BMXRosterServiceProtocol> delegate, dispatch_queue_t queue);
    
    virtual void removeDelegate(id<BMXRosterServiceProtocol> delegate);
    
    BMXDelegatesContainer<BMXRosterServiceProtocol> *container;
    
    
private:
    NSObject *containerLock;
    
};

void RosterServiceListener :: onFriendAdded(int64_t sponsorId, int64_t recipientId) {
    if (container) {
        [container friendAddedSponsorId:(long long)sponsorId recipientId:(long long)recipientId];
    }
};

void RosterServiceListener :: onFriendRemoved(int64_t sponsorId, int64_t recipientId) {
    if (container) {
        [container friendRemovedSponsorId:(long long)sponsorId recipientId:(long long)recipientId];
    }
};

void RosterServiceListener:: onApplied(int64_t sponsorId, int64_t recipientId, const std::string &message) {
    if (container) {
        [container friendDidRecivedAppliedSponsorId:(long long)sponsorId recipientId:(long long)recipientId message:[BMXStringUtil stdToNSString:message]];
    }
};

void RosterServiceListener:: onApplicationAccepted(int64_t sponsorId, int64_t recipientId) {
    if (container) {
        [container friendDidApplicationAcceptedFromSponsorId:(long long)sponsorId recipientId:(long long)recipientId];
    }
    
};

void RosterServiceListener:: onApplicationDeclined(int64_t sponsorId, int64_t recipientId, const std::string &reason) {
    if (container) {
        [container friendDidApplicationDeclinedFromSponsorId:(long long)sponsorId recipientId:(long long)recipientId reson:[BMXStringUtil stdToNSString:reason]];
    }
};


/**
 * 添加黑名单
 **/
void RosterServiceListener:: onBlockListAdded(int64_t sponsorId, int64_t recipientId) {
    if (container) {
        [container friendAddedtoBlockListSponsorId:(long long)sponsorId recipientId:(long long)recipientId];
    }
}

/**
 * 删除黑名单
 **/
 void RosterServiceListener:: onBlockListRemoved(int64_t sponsorId, int64_t recipientId) {
     if (container) {
         [container friendRemovedFromBlockListSponsorId:(long long)sponsorId recipientId:(long long)recipientId];
     }
}

void RosterServiceListener::onRosterInfoUpdate(floo:: BMXRosterItemPtr item) {
     if (container) {
         BMXRosterItem2Void(item)
         BMXRosterItem *roster = [[[BMXRosterItem alloc]init] initWithCptr:(void *)lresult swigOwnCObject:NO];
         [container rosterInfoDidUpdate: roster];
     }
}


void RosterServiceListener::addDelegate(id<BMXRosterServiceProtocol> delegate, dispatch_queue_t queue) {
    if (!container) {
        container = [(BMXDelegatesContainer<BMXRosterServiceProtocol> *)[BMXDelegatesContainer alloc] init];
    }
    
    if (!containerLock) {
        containerLock = [[NSObject alloc] init];
    }
    
    if (delegate) {
        if (!queue) {
            queue = dispatch_get_main_queue();
        }
        
        @synchronized (containerLock) {
            [container addDelegate:delegate delegateQueue:queue];
        }
    }
};

void RosterServiceListener::removeDelegate(id<BMXRosterServiceProtocol> delegate) {
    if (container && delegate) {
        if (!containerLock) {
            containerLock = [[NSObject alloc] init];
        }
        
        @synchronized (containerLock) {
            [container removeDelegate:delegate];
        }
        
    }
};



#include "bmx_message.h"
#include "bmx_chat_service_listener.h"



class ChatServiceListener : public floo::BMXChatServiceListener {
public:
    /**
     * 消息发送状态发生变化
     **/
    virtual void onStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error)  override;
    /**
     * 附件上传进度发送变化
     **/
    virtual void onAttachmentUploadProgressChanged(floo::BMXMessagePtr msg, int percent)  override;
    /**
     * 消息撤回状态发送变化
     **/
    virtual void onRecallStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error)  override;
    /**
     * 收到消息
     **/
    virtual void onReceive(const floo::BMXMessageList& list)  override;
    /**
     * @brief 收到命令消息
     **/
    virtual void onReceiveCommandMessages(const floo::BMXMessageList& list) override;
    /**
     * 收到系统通知消息
     **/
    virtual void onReceiveSystemMessages(const floo::BMXMessageList& list)  override;
    /**
     * 收到消息已读回执
     **/
    virtual void onReceiveReadAcks(const floo::BMXMessageList& list)  override;
    /**
     * 收到消息已送达回执
     **/
    virtual void onReceiveDeliverAcks(const floo::BMXMessageList& list)  override;
    /**
     * 收到撤回消息
     **/
    virtual void onReceiveRecallMessages(const floo::BMXMessageList& list)  override;
    /**
     * 收到消息已读取消（多设备其他设备同步消息已读状态变为未读）
     **/
    virtual void onReceiveReadCancels(const floo::BMXMessageList& list) override;
    /**
     * 收到消息全部已读（多设备同步某消息之前消息全部设置为已读）
     **/
    virtual void onReceiveReadAllMessages(const floo::BMXMessageList& list) override;
    /**
     * 收到删除消息 （多设备同步删除消息）
     **/
    virtual void onReceiveDeleteMessages(const floo::BMXMessageList& list) override;
    /**
     * 附件下载状态发生变化
     **/
    virtual void onAttachmentStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error, int percent)  override;
    /**
     * 拉取历史消息
     **/
    virtual void onRetrieveHistoryMessages(floo::BMXConversationPtr conversation) override;
    virtual void onLoadAllConversation() override;
    virtual void onConversationCreate(floo::BMXConversationPtr conversation, floo::BMXMessagePtr msg) override;
    virtual void onConversationDelete(int64_t conversationId, floo:: BMXErrorCode error) override;
    virtual void onTotalUnreadCountChanged(int unreadCount) override;
    //delegate
    virtual void addDelegate(id<BMXChatServiceProtocol> delegate, dispatch_queue_t queue);
    virtual void removeDelegate(id<BMXChatServiceProtocol> delegate);
    BMXDelegatesContainer<BMXChatServiceProtocol> *container;
    //
private:
    NSObject *containerLock;
};

void ChatServiceListener :: onStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error) {
    if (container && msg) {
        BMXMessage2Void(msg)
        BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
        [container messageStatusChanged:message error:[BMXError errorCode:(BMXErrorCode)error]];
    }
}

void ChatServiceListener :: onAttachmentUploadProgressChanged(floo::BMXMessagePtr msg, int percent) {
    if (container && msg) {
        BMXMessage2Void(msg)
        BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
        [container messageAttachmentUploadProgressChanged:message  percent:percent];
    }
}

void ChatServiceListener :: onRecallStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error) {
    if (container && msg) {
        BMXMessage2Void(msg)
        BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr:(void *)lresult swigOwnCObject:NO];
        [container messageRecallStatusDidChanged:message error:[BMXError errorCode:(BMXErrorCode)error]];
    }
}

NSMutableArray *BMXMessageList2NSArray(const floo::BMXMessageList &list){
  NSMutableArray *messages = [NSMutableArray array];
  floo::BMXMessageList::const_iterator ite = list.begin();
  for (; ite != list.end(); ++ite) {
      if ((*ite).get() != nullptr) {
          BMXMessage2Void(*ite)
          BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
          [messages addObject:message];
      }
  }
  return messages;
}

BMXMessageList *BMXMessageList2OC(const floo::BMXMessageList &list){
  BMXMessageList *messages = [[BMXMessageList alloc] init];
  floo::BMXMessageList::const_iterator ite = list.begin();
  for (; ite != list.end(); ++ite) {
      if ((*ite).get() != nullptr) {
          BMXMessage2Void(*ite)
          BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
          [messages addWithX:message];
      }
  }
  return messages;
}

void ChatServiceListener :: onReceive(const floo::BMXMessageList &list) {
    if (list.size() && container) {
        [container receivedMessages:BMXMessageList2NSArray(list)];
    }
}

void ChatServiceListener:: onReceiveCommandMessages(const floo::BMXMessageList& list) {
    if (list.size() && container) {
        [container receivedCommandMessages:BMXMessageList2NSArray(list)];
    }


}

/**
 * 收到系统通知消息
 **/
void ChatServiceListener :: onReceiveSystemMessages(const floo::BMXMessageList& list)  {
    if (container && list.size() ) {
        [container receivedMessages:BMXMessageList2NSArray(list)];
    }
}

/**
 * 收到消息已读回执
 **/
void ChatServiceListener :: onReceiveReadAcks(const floo::BMXMessageList& list)   {
    if (container && list.size()) {
        [container receivedReadAcks:BMXMessageList2NSArray(list)];
    }
}

/**
 * 收到消息已送达回执
 **/
void ChatServiceListener ::  onReceiveDeliverAcks(const floo::BMXMessageList& list)  {
    if (container && list.size()) {
        [container receivedDeliverAcks:BMXMessageList2NSArray(list)];
    }
}

/**
 * 收到撤回消息
 **/
void ChatServiceListener ::  onReceiveRecallMessages(const floo::BMXMessageList& list) {
    if (container && list.size()) {
        [container receivedRecallMessages:BMXMessageList2NSArray(list)];
    }
}


/**
 * 收到消息已读取消（多设备其他设备同步消息已读状态变为未读）
 **/
void ChatServiceListener :: onReceiveReadCancels(const floo::BMXMessageList& list) {
    if (container && list.size()) {
        [container receiveReadCancelsMessages:BMXMessageList2NSArray(list)];
    }
    
}

/**
 * 收到消息全部已读（多设备同步某消息之前消息全部设置为已读）
 **/
void ChatServiceListener ::onReceiveReadAllMessages(const floo::BMXMessageList& list) {
    if (container && list.size()) {
        [container receiveReadAllMessages:BMXMessageList2NSArray(list)];
    }
    
}

/**
 * 收到删除消息 （多设备同步删除消息）
 **/
void ChatServiceListener :: onReceiveDeleteMessages(const floo::BMXMessageList& list){
    if (container && list.size()) {
        [container receiveDeleteMessages:BMXMessageList2NSArray(list)];
    }
}

/**
 * 附件下载状态发生变化
 **/
void ChatServiceListener ::  onAttachmentStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error, int percent) {
    if (container) {
        BMXMessage2Void(msg)
        BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
        [container messageAttachmentStatusDidChanged:message error:[BMXError errorCode:(BMXErrorCode)error] percent:percent];
    }
}

void ChatServiceListener:: onRetrieveHistoryMessages(floo::BMXConversationPtr conversation) {
    if (container) {
        BMXConversation2Void(conversation)
        BMXConversation *c = [[[BMXConversation alloc]init] initWithCptr: (void*)lresult swigOwnCObject:NO];
        [container retrieveHistoryMessagesConversation:c];
    }
}

void ChatServiceListener:: onLoadAllConversation() {
    if (container) {
        [container loadAllConversationDidFinished];
    }
}

void ChatServiceListener:: onConversationCreate(floo::BMXConversationPtr conversation, floo::BMXMessagePtr msg) {
    if (container) {
        void *pConv;
        void *pMsg;
        {
          BMXConversation2Void(conversation)
          pConv = (void*)lresult;
        }
        {
          BMXMessage2Void(msg)
          pMsg = (void*)lresult;
        }
        BMXConversation *c = [[[BMXConversation alloc]init] initWithCptr: pConv swigOwnCObject:NO];
        BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr: pMsg swigOwnCObject:NO];
        [container conversationDidCreatedConversation:c message:message];
    }
}


void ChatServiceListener:: onConversationDelete(int64_t conversationId, floo::BMXErrorCode error) {
    if (container) {
        [container conversationDidDeletedConversationId:(NSInteger)conversationId error:[BMXError errorCode:(BMXErrorCode)error]];
    }
}

void ChatServiceListener:: onTotalUnreadCountChanged(int unreadCount) {
    if (container) {
        [container conversationTotalCountChanged:(NSInteger)unreadCount];
    }
}



void ChatServiceListener::addDelegate(id<BMXChatServiceProtocol> delegate, dispatch_queue_t queue) {
    if (!container) {
        container = [(BMXDelegatesContainer<BMXChatServiceProtocol> *)[BMXDelegatesContainer alloc] init];
    }
    
    if (!containerLock) {
        containerLock = [[NSObject alloc] init];
    }
    
    if (delegate) {
        if (!queue) {
            queue = dispatch_get_main_queue();
        }
        
        @synchronized (containerLock) {
            [container addDelegate:delegate delegateQueue:queue];
        }
    }
}

void ChatServiceListener::removeDelegate(id<BMXChatServiceProtocol> delegate) {
    if (container && delegate) {
        if (!containerLock) {
            containerLock = [[NSObject alloc] init];
        }
        
        @synchronized (containerLock) {
            [container removeDelegate:delegate];
        }
        
    }
}



@implementation BMXBaseObject

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXBaseObject();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXBaseObject((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXSDKConfigHostConfig

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXSDKConfigHostConfig__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithIm:(NSString*)im port:(int)port rest:(NSString*)rest {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXSDKConfigHostConfig__SWIG_1(im, port, rest);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setImHost:(NSString*)value {
  _wrap_BMXSDKConfigHostConfig_imHost_set(self.swigCPtr, value);
}

- (NSString*)getImHost {
  {
    return _wrap_BMXSDKConfigHostConfig_imHost_get(self.swigCPtr);
  }
}

- (void)setImPort:(int)value {
  _wrap_BMXSDKConfigHostConfig_imPort_set(self.swigCPtr, value);
}

- (int)getImPort {
   return _wrap_BMXSDKConfigHostConfig_imPort_get(self.swigCPtr); 
}

- (void)setRestHost:(NSString*)value {
  _wrap_BMXSDKConfigHostConfig_restHost_set(self.swigCPtr, value);
}

- (NSString*)getRestHost {
  {
    return _wrap_BMXSDKConfigHostConfig_restHost_get(self.swigCPtr);
  }
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXSDKConfigHostConfig((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupMember

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)initWithUid:(long long)uid nickname:(NSString*)nickname createTime:(long long)createTime {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupMember(uid, nickname, createTime);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMUid:(long long)value {
  _wrap_BMXGroupMember_mUid_set(self.swigCPtr, value);
}

- (long long)getMUid {
   return _wrap_BMXGroupMember_mUid_get(self.swigCPtr); 
}

- (void)setMGroupNickname:(NSString*)value {
  _wrap_BMXGroupMember_mGroupNickname_set(self.swigCPtr, value);
}

- (NSString*)getMGroupNickname {
  {
    return _wrap_BMXGroupMember_mGroupNickname_get(self.swigCPtr);
  }
}

- (void)setMCreateTime:(long long)value {
  _wrap_BMXGroupMember_mCreateTime_set(self.swigCPtr, value);
}

- (long long)getMCreateTime {
   return _wrap_BMXGroupMember_mCreateTime_get(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupMember((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupBannedMember

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupBannedMember();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMUid:(long long)value {
  _wrap_BMXGroupBannedMember_mUid_set(self.swigCPtr, value);
}

- (long long)getMUid {
   return _wrap_BMXGroupBannedMember_mUid_get(self.swigCPtr); 
}

- (void)setMGroupNickname:(NSString*)value {
  _wrap_BMXGroupBannedMember_mGroupNickname_set(self.swigCPtr, value);
}

- (NSString*)getMGroupNickname {
  {
    return _wrap_BMXGroupBannedMember_mGroupNickname_get(self.swigCPtr);
  }
}

- (void)setMCreateTime:(long long)value {
  _wrap_BMXGroupBannedMember_mCreateTime_set(self.swigCPtr, value);
}

- (long long)getMCreateTime {
   return _wrap_BMXGroupBannedMember_mCreateTime_get(self.swigCPtr); 
}

- (void)setMExpired:(long long)value {
  _wrap_BMXGroupBannedMember_mExpired_set(self.swigCPtr, value);
}

- (long long)getMExpired {
   return _wrap_BMXGroupBannedMember_mExpired_get(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupBannedMember((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupSharedFile

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupSharedFile();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMFileId:(long long)value {
  _wrap_BMXGroupSharedFile_mFileId_set(self.swigCPtr, value);
}

- (long long)getMFileId {
   return _wrap_BMXGroupSharedFile_mFileId_get(self.swigCPtr); 
}

- (void)setMGroupId:(long long)value {
  _wrap_BMXGroupSharedFile_mGroupId_set(self.swigCPtr, value);
}

- (long long)getMGroupId {
   return _wrap_BMXGroupSharedFile_mGroupId_get(self.swigCPtr); 
}

- (void)setMUploader:(long long)value {
  _wrap_BMXGroupSharedFile_mUploader_set(self.swigCPtr, value);
}

- (long long)getMUploader {
   return _wrap_BMXGroupSharedFile_mUploader_get(self.swigCPtr); 
}

- (void)setMSize:(int)value {
  _wrap_BMXGroupSharedFile_mSize_set(self.swigCPtr, value);
}

- (int)getMSize {
   return _wrap_BMXGroupSharedFile_mSize_get(self.swigCPtr); 
}

- (void)setMCreateTime:(long long)value {
  _wrap_BMXGroupSharedFile_mCreateTime_set(self.swigCPtr, value);
}

- (long long)getMCreateTime {
   return _wrap_BMXGroupSharedFile_mCreateTime_get(self.swigCPtr); 
}

- (void)setMUpdateTime:(long long)value {
  _wrap_BMXGroupSharedFile_mUpdateTime_set(self.swigCPtr, value);
}

- (long long)getMUpdateTime {
   return _wrap_BMXGroupSharedFile_mUpdateTime_get(self.swigCPtr); 
}

- (void)setMRatelUrl:(NSString*)value {
  _wrap_BMXGroupSharedFile_mRatelUrl_set(self.swigCPtr, value);
}

- (NSString*)getMRatelUrl {
  {
    return _wrap_BMXGroupSharedFile_mRatelUrl_get(self.swigCPtr);
  }
}

- (void)setMUrl:(NSString*)value {
  _wrap_BMXGroupSharedFile_mUrl_set(self.swigCPtr, value);
}

- (NSString*)getMUrl {
  {
    return _wrap_BMXGroupSharedFile_mUrl_get(self.swigCPtr);
  }
}

- (void)setMPath:(NSString*)value {
  _wrap_BMXGroupSharedFile_mPath_set(self.swigCPtr, value);
}

- (NSString*)getMPath {
  {
    return _wrap_BMXGroupSharedFile_mPath_get(self.swigCPtr);
  }
}

- (void)setMDisplayName:(NSString*)value {
  _wrap_BMXGroupSharedFile_mDisplayName_set(self.swigCPtr, value);
}

- (NSString*)getMDisplayName {
  {
    return _wrap_BMXGroupSharedFile_mDisplayName_get(self.swigCPtr);
  }
}

- (void)setMType:(NSString*)value {
  _wrap_BMXGroupSharedFile_mType_set(self.swigCPtr, value);
}

- (NSString*)getMType {
  {
    return _wrap_BMXGroupSharedFile_mType_get(self.swigCPtr);
  }
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupSharedFile((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupAnnouncement

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupAnnouncement();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMTitle:(NSString*)value {
  _wrap_BMXGroupAnnouncement_mTitle_set(self.swigCPtr, value);
}

- (NSString*)getMTitle {
  {
    return _wrap_BMXGroupAnnouncement_mTitle_get(self.swigCPtr);
  }
}

- (void)setMContent:(NSString*)value {
  _wrap_BMXGroupAnnouncement_mContent_set(self.swigCPtr, value);
}

- (NSString*)getMContent {
  {
    return _wrap_BMXGroupAnnouncement_mContent_get(self.swigCPtr);
  }
}

- (void)setMAuthor:(long long)value {
  _wrap_BMXGroupAnnouncement_mAuthor_set(self.swigCPtr, value);
}

- (long long)getMAuthor {
   return _wrap_BMXGroupAnnouncement_mAuthor_get(self.swigCPtr); 
}

- (void)setMCreateTime:(long long)value {
  _wrap_BMXGroupAnnouncement_mCreateTime_set(self.swigCPtr, value);
}

- (long long)getMCreateTime {
   return _wrap_BMXGroupAnnouncement_mCreateTime_get(self.swigCPtr); 
}

- (void)setMId:(long long)value {
  _wrap_BMXGroupAnnouncement_mId_set(self.swigCPtr, value);
}

- (long long)getMId {
   return _wrap_BMXGroupAnnouncement_mId_get(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupAnnouncement((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupInvitation

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupInvitation();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMGroupId:(long long)value {
  _wrap_BMXGroupInvitation_mGroupId_set(self.swigCPtr, value);
}

- (long long)getMGroupId {
   return _wrap_BMXGroupInvitation_mGroupId_get(self.swigCPtr); 
}

- (void)setMInviterId:(long long)value {
  _wrap_BMXGroupInvitation_mInviterId_set(self.swigCPtr, value);
}

- (long long)getMInviterId {
   return _wrap_BMXGroupInvitation_mInviterId_get(self.swigCPtr); 
}

- (void)setMReason:(NSString*)value {
  _wrap_BMXGroupInvitation_mReason_set(self.swigCPtr, value);
}

- (NSString*)getMReason {
  {
    return _wrap_BMXGroupInvitation_mReason_get(self.swigCPtr);
  }
}

- (void)setMStatus:(BMXGroup_InvitationStatus)value {
  _wrap_BMXGroupInvitation_mStatus_set(self.swigCPtr, (int)value);
}

- (BMXGroup_InvitationStatus)getMStatus {
   return (BMXGroup_InvitationStatus)_wrap_BMXGroupInvitation_mStatus_get(self.swigCPtr); 
}

- (void)setMExpired:(long long)value {
  _wrap_BMXGroupInvitation_mExpired_set(self.swigCPtr, value);
}

- (long long)getMExpired {
   return _wrap_BMXGroupInvitation_mExpired_get(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupInvitation((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupApplication

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupApplication();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMGroupId:(long long)value {
  _wrap_BMXGroupApplication_mGroupId_set(self.swigCPtr, value);
}

- (long long)getMGroupId {
   return _wrap_BMXGroupApplication_mGroupId_get(self.swigCPtr); 
}

- (void)setMApplicationId:(long long)value {
  _wrap_BMXGroupApplication_mApplicationId_set(self.swigCPtr, value);
}

- (long long)getMApplicationId {
   return _wrap_BMXGroupApplication_mApplicationId_get(self.swigCPtr); 
}

- (void)setMReason:(NSString*)value {
  _wrap_BMXGroupApplication_mReason_set(self.swigCPtr, value);
}

- (NSString*)getMReason {
  {
    return _wrap_BMXGroupApplication_mReason_get(self.swigCPtr);
  }
}

- (void)setMStatus:(BMXGroup_ApplicationStatus)value {
  _wrap_BMXGroupApplication_mStatus_set(self.swigCPtr, (int)value);
}

- (BMXGroup_ApplicationStatus)getMStatus {
   return (BMXGroup_ApplicationStatus)_wrap_BMXGroupApplication_mStatus_get(self.swigCPtr); 
}

- (void)setMExpired:(long long)value {
  _wrap_BMXGroupApplication_mExpired_set(self.swigCPtr, value);
}

- (long long)getMExpired {
   return _wrap_BMXGroupApplication_mExpired_get(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupApplication((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupServiceCreateGroupOptions

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupServiceCreateGroupOptions__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithName:(NSString*)name description:(NSString*)description isPublic:(BOOL)isPublic isChatroom:(BOOL)isChatroom {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupServiceCreateGroupOptions__SWIG_1(name, description, isPublic, isChatroom);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithName:(NSString*)name description:(NSString*)description isPublic:(BOOL)isPublic {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupServiceCreateGroupOptions__SWIG_2(name, description, isPublic);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithName:(NSString*)name description:(NSString*)description {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupServiceCreateGroupOptions__SWIG_3(name, description);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMName:(NSString*)value {
  _wrap_BMXGroupServiceCreateGroupOptions_mName_set(self.swigCPtr, value);
}

- (NSString*)getMName {
  {
    return _wrap_BMXGroupServiceCreateGroupOptions_mName_get(self.swigCPtr);
  }
}

- (void)setMDescription:(NSString*)value {
  _wrap_BMXGroupServiceCreateGroupOptions_mDescription_set(self.swigCPtr, value);
}

- (NSString*)getMDescription {
  {
    return _wrap_BMXGroupServiceCreateGroupOptions_mDescription_get(self.swigCPtr);
  }
}

- (void)setMIsPublic:(BOOL)value {
  _wrap_BMXGroupServiceCreateGroupOptions_mIsPublic_set(self.swigCPtr, value);
}

- (BOOL)getMIsPublic {
   return _wrap_BMXGroupServiceCreateGroupOptions_mIsPublic_get(self.swigCPtr); 
}

- (void)setMIsChatroom:(BOOL)value {
  _wrap_BMXGroupServiceCreateGroupOptions_mIsChatroom_set(self.swigCPtr, value);
}

- (BOOL)getMIsChatroom {
   return _wrap_BMXGroupServiceCreateGroupOptions_mIsChatroom_get(self.swigCPtr); 
}

- (void)setMMessage:(NSString*)value {
  _wrap_BMXGroupServiceCreateGroupOptions_mMessage_set(self.swigCPtr, value);
}

- (NSString*)getMMessage {
  {
    return _wrap_BMXGroupServiceCreateGroupOptions_mMessage_get(self.swigCPtr);
  }
}

- (void)setMMembers:(ListOfLongLong*)value {
  _wrap_BMXGroupServiceCreateGroupOptions_mMembers_set(self.swigCPtr, value.swigCPtr);
}

- (ListOfLongLong*)getMMembers {
     void* cPtr = _wrap_BMXGroupServiceCreateGroupOptions_mMembers_get(self.swigCPtr);
     ListOfLongLong* ret = nil;
     if(cPtr) {
        ret = [[ListOfLongLong alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupServiceCreateGroupOptions((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXMessageAttachmentSize

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)initWithWidth:(double)width height:(double)height {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessageAttachmentSize__SWIG_0(width, height);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithWidth:(double)width {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessageAttachmentSize__SWIG_1(width);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessageAttachmentSize__SWIG_2();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMWidth:(double)value {
  _wrap_BMXMessageAttachmentSize_mWidth_set(self.swigCPtr, value);
}

- (double)getMWidth {
   return _wrap_BMXMessageAttachmentSize_mWidth_get(self.swigCPtr); 
}

- (void)setMHeight:(double)value {
  _wrap_BMXMessageAttachmentSize_mHeight_set(self.swigCPtr, value);
}

- (double)getMHeight {
   return _wrap_BMXMessageAttachmentSize_mHeight_get(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXMessageAttachmentSize((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXPushUserProfileMessagePushSetting

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXPushUserProfileMessagePushSetting();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMPushEnabled:(BOOL)value {
  _wrap_BMXPushUserProfileMessagePushSetting_mPushEnabled_set(self.swigCPtr, value);
}

- (BOOL)getMPushEnabled {
   return _wrap_BMXPushUserProfileMessagePushSetting_mPushEnabled_get(self.swigCPtr); 
}

- (void)setMSilenceStartTime:(int)value {
  _wrap_BMXPushUserProfileMessagePushSetting_mSilenceStartTime_set(self.swigCPtr, value);
}

- (int)getMSilenceStartTime {
   return _wrap_BMXPushUserProfileMessagePushSetting_mSilenceStartTime_get(self.swigCPtr); 
}

- (void)setMSilenceEndTime:(int)value {
  _wrap_BMXPushUserProfileMessagePushSetting_mSilenceEndTime_set(self.swigCPtr, value);
}

- (int)getMSilenceEndTime {
   return _wrap_BMXPushUserProfileMessagePushSetting_mSilenceEndTime_get(self.swigCPtr); 
}

- (void)setMPushStartTime:(int)value {
  _wrap_BMXPushUserProfileMessagePushSetting_mPushStartTime_set(self.swigCPtr, value);
}

- (int)getMPushStartTime {
   return _wrap_BMXPushUserProfileMessagePushSetting_mPushStartTime_get(self.swigCPtr); 
}

- (void)setMPushEndTime:(int)value {
  _wrap_BMXPushUserProfileMessagePushSetting_mPushEndTime_set(self.swigCPtr, value);
}

- (int)getMPushEndTime {
   return _wrap_BMXPushUserProfileMessagePushSetting_mPushEndTime_get(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXPushUserProfileMessagePushSetting((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRosterServiceApplication

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRosterServiceApplication();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMRosterId:(long long)value {
  _wrap_BMXRosterServiceApplication_mRosterId_set(self.swigCPtr, value);
}

- (long long)getMRosterId {
   return _wrap_BMXRosterServiceApplication_mRosterId_get(self.swigCPtr); 
}

- (void)setMReason:(NSString*)value {
  _wrap_BMXRosterServiceApplication_mReason_set(self.swigCPtr, value);
}

- (NSString*)getMReason {
  {
    return _wrap_BMXRosterServiceApplication_mReason_get(self.swigCPtr);
  }
}

- (void)setMStatus:(BMXRosterService_ApplicationStatus)value {
  _wrap_BMXRosterServiceApplication_mStatus_set(self.swigCPtr, (int)value);
}

- (BMXRosterService_ApplicationStatus)getMStatus {
   return (BMXRosterService_ApplicationStatus)_wrap_BMXRosterServiceApplication_mStatus_get(self.swigCPtr); 
}

- (void)setMExpire:(long long)value {
  _wrap_BMXRosterServiceApplication_mExpire_set(self.swigCPtr, value);
}

- (long long)getMExpire {
   return _wrap_BMXRosterServiceApplication_mExpire_get(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRosterServiceApplication((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXUserProfileAuthQuestion

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXUserProfileAuthQuestion();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMQuestion:(NSString*)value {
  _wrap_BMXUserProfileAuthQuestion_mQuestion_set(self.swigCPtr, value);
}

- (NSString*)getMQuestion {
  {
    return _wrap_BMXUserProfileAuthQuestion_mQuestion_get(self.swigCPtr);
  }
}

- (void)setMAnswer:(NSString*)value {
  _wrap_BMXUserProfileAuthQuestion_mAnswer_set(self.swigCPtr, value);
}

- (NSString*)getMAnswer {
  {
    return _wrap_BMXUserProfileAuthQuestion_mAnswer_get(self.swigCPtr);
  }
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXUserProfileAuthQuestion((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXUserProfileMessageSetting

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXUserProfileMessageSetting();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMPushEnabled:(BOOL)value {
  _wrap_BMXUserProfileMessageSetting_mPushEnabled_set(self.swigCPtr, value);
}

- (BOOL)getMPushEnabled {
   return _wrap_BMXUserProfileMessageSetting_mPushEnabled_get(self.swigCPtr); 
}

- (void)setMPushDetail:(BOOL)value {
  _wrap_BMXUserProfileMessageSetting_mPushDetail_set(self.swigCPtr, value);
}

- (BOOL)getMPushDetail {
   return _wrap_BMXUserProfileMessageSetting_mPushDetail_get(self.swigCPtr); 
}

- (void)setMPushNickname:(NSString*)value {
  _wrap_BMXUserProfileMessageSetting_mPushNickname_set(self.swigCPtr, value);
}

- (NSString*)getMPushNickname {
  {
    return _wrap_BMXUserProfileMessageSetting_mPushNickname_get(self.swigCPtr);
  }
}

- (void)setMNotificationSound:(BOOL)value {
  _wrap_BMXUserProfileMessageSetting_mNotificationSound_set(self.swigCPtr, value);
}

- (BOOL)getMNotificationSound {
   return _wrap_BMXUserProfileMessageSetting_mNotificationSound_get(self.swigCPtr); 
}

- (void)setMNotificationVibrate:(BOOL)value {
  _wrap_BMXUserProfileMessageSetting_mNotificationVibrate_set(self.swigCPtr, value);
}

- (BOOL)getMNotificationVibrate {
   return _wrap_BMXUserProfileMessageSetting_mNotificationVibrate_get(self.swigCPtr); 
}

- (void)setMAutoDownloadAttachment:(BOOL)value {
  _wrap_BMXUserProfileMessageSetting_mAutoDownloadAttachment_set(self.swigCPtr, value);
}

- (BOOL)getMAutoDownloadAttachment {
   return _wrap_BMXUserProfileMessageSetting_mAutoDownloadAttachment_get(self.swigCPtr); 
}

- (void)setMSilenceStartTime:(int)value {
  _wrap_BMXUserProfileMessageSetting_mSilenceStartTime_set(self.swigCPtr, value);
}

- (int)getMSilenceStartTime {
   return _wrap_BMXUserProfileMessageSetting_mSilenceStartTime_get(self.swigCPtr); 
}

- (void)setMSilenceEndTime:(int)value {
  _wrap_BMXUserProfileMessageSetting_mSilenceEndTime_set(self.swigCPtr, value);
}

- (int)getMSilenceEndTime {
   return _wrap_BMXUserProfileMessageSetting_mSilenceEndTime_get(self.swigCPtr); 
}

- (void)setMPushStartTime:(int)value {
  _wrap_BMXUserProfileMessageSetting_mPushStartTime_set(self.swigCPtr, value);
}

- (int)getMPushStartTime {
   return _wrap_BMXUserProfileMessageSetting_mPushStartTime_get(self.swigCPtr); 
}

- (void)setMPushEndTime:(int)value {
  _wrap_BMXUserProfileMessageSetting_mPushEndTime_set(self.swigCPtr, value);
}

- (int)getMPushEndTime {
   return _wrap_BMXUserProfileMessageSetting_mPushEndTime_get(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXUserProfileMessageSetting((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRoomCreateOptions

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)initWithRoomId:(int)roomId description:(NSString*)description secret:(NSString*)secret pin:(NSString*)pin isPermanent:(BOOL)isPermanent isPrivate:(BOOL)isPrivate {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomCreateOptions__SWIG_0(roomId, description, secret, pin, isPermanent, isPrivate);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithRoomId:(int)roomId description:(NSString*)description secret:(NSString*)secret pin:(NSString*)pin isPermanent:(BOOL)isPermanent {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomCreateOptions__SWIG_1(roomId, description, secret, pin, isPermanent);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithRoomId:(int)roomId description:(NSString*)description secret:(NSString*)secret pin:(NSString*)pin {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomCreateOptions__SWIG_2(roomId, description, secret, pin);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithRoomId:(int)roomId description:(NSString*)description secret:(NSString*)secret {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomCreateOptions__SWIG_3(roomId, description, secret);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithRoomId:(int)roomId description:(NSString*)description {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomCreateOptions__SWIG_4(roomId, description);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithRoomId:(int)roomId {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomCreateOptions__SWIG_5(roomId);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomCreateOptions__SWIG_6();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMRoomId:(long long)value {
  _wrap_BMXRoomCreateOptions_mRoomId_set(self.swigCPtr, value);
}

- (long long)getMRoomId {
   return _wrap_BMXRoomCreateOptions_mRoomId_get(self.swigCPtr);
}

- (void)setMDescription:(NSString*)value {
  _wrap_BMXRoomCreateOptions_mDescription_set(self.swigCPtr, value);
}

- (NSString*)getMDescription {
  {
    return _wrap_BMXRoomCreateOptions_mDescription_get(self.swigCPtr);
  }
}

- (void)setMSecret:(NSString*)value {
  _wrap_BMXRoomCreateOptions_mSecret_set(self.swigCPtr, value);
}

- (NSString*)getMSecret {
  {
    return _wrap_BMXRoomCreateOptions_mSecret_get(self.swigCPtr);
  }
}

- (void)setMPin:(NSString*)value {
  _wrap_BMXRoomCreateOptions_mPin_set(self.swigCPtr, value);
}

- (NSString*)getMPin {
  {
    return _wrap_BMXRoomCreateOptions_mPin_get(self.swigCPtr);
  }
}

- (void)setMIsPermanent:(BOOL)value {
  _wrap_BMXRoomCreateOptions_mIsPermanent_set(self.swigCPtr, value);
}

- (BOOL)getMIsPermanent {
   return _wrap_BMXRoomCreateOptions_mIsPermanent_get(self.swigCPtr);
}

- (void)setMIsPrivate:(BOOL)value {
  _wrap_BMXRoomCreateOptions_mIsPrivate_set(self.swigCPtr, value);
}

- (BOOL)getMIsPrivate {
   return _wrap_BMXRoomCreateOptions_mIsPrivate_get(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRoomCreateOptions((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRoomEditOptions

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)initWithNewDescription:(NSString*)newDescription newSecret:(NSString*)newSecret newPin:(NSString*)newPin newIsPermanent:(BOOL)newIsPermanent newIsPrivate:(BOOL)newIsPrivate {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomEditOptions__SWIG_0(newDescription, newSecret, newPin, newIsPermanent, newIsPrivate);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithNewDescription:(NSString*)newDescription newSecret:(NSString*)newSecret newPin:(NSString*)newPin newIsPermanent:(BOOL)newIsPermanent {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomEditOptions__SWIG_1(newDescription, newSecret, newPin, newIsPermanent);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithNewDescription:(NSString*)newDescription newSecret:(NSString*)newSecret newPin:(NSString*)newPin {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomEditOptions__SWIG_2(newDescription, newSecret, newPin);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithNewDescription:(NSString*)newDescription newSecret:(NSString*)newSecret {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomEditOptions__SWIG_3(newDescription, newSecret);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithNewDescription:(NSString*)newDescription {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomEditOptions__SWIG_4(newDescription);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomEditOptions__SWIG_5();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMNewDescription:(NSString*)value {
  _wrap_BMXRoomEditOptions_mNewDescription_set(self.swigCPtr, value);
}

- (NSString*)getMNewDescription {
  {
    return _wrap_BMXRoomEditOptions_mNewDescription_get(self.swigCPtr);
  }
}

- (void)setMNewSecret:(NSString*)value {
  _wrap_BMXRoomEditOptions_mNewSecret_set(self.swigCPtr, value);
}

- (NSString*)getMNewSecret {
  {
    return _wrap_BMXRoomEditOptions_mNewSecret_get(self.swigCPtr);
  }
}

- (void)setMNewPin:(NSString*)value {
  _wrap_BMXRoomEditOptions_mNewPin_set(self.swigCPtr, value);
}

- (NSString*)getMNewPin {
  {
    return _wrap_BMXRoomEditOptions_mNewPin_get(self.swigCPtr);
  }
}

- (void)setMNewIsPermanent:(BOOL)value {
  _wrap_BMXRoomEditOptions_mNewIsPermanent_set(self.swigCPtr, value);
}

- (BOOL)getMNewIsPermanent {
   return _wrap_BMXRoomEditOptions_mNewIsPermanent_get(self.swigCPtr);
}

- (void)setMNewIsPrivate:(BOOL)value {
  _wrap_BMXRoomEditOptions_mNewIsPrivate_set(self.swigCPtr, value);
}

- (BOOL)getMNewIsPrivate {
   return _wrap_BMXRoomEditOptions_mNewIsPrivate_get(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRoomEditOptions((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRoomAllowdOptions

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomAllowdOptions();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setAction:(AllowedAction)value {
  _wrap_BMXRoomAllowdOptions_action_set(self.swigCPtr, (int)value);
}

- (AllowedAction)getAction {
   return (AllowedAction)_wrap_BMXRoomAllowdOptions_action_get(self.swigCPtr);
}

- (void)setTokens:(TagList*)value {
  _wrap_BMXRoomAllowdOptions_tokens_set(self.swigCPtr, value.swigCPtr);
}

- (TagList*)getTokens {
     void* cPtr = _wrap_BMXRoomAllowdOptions_tokens_get(self.swigCPtr);
     TagList* ret = nil;
     if(cPtr) {
        ret = [[TagList alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
       [ret autorelease];
#endif
     }
    return ret;
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRoomAllowdOptions((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRoomModerateOptions

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomModerateOptions__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithUserId:(long long)userId muteAudio:(BOOL)muteAudio muteVideo:(BOOL)muteVideo muteData:(BOOL)muteData {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomModerateOptions__SWIG_1(userId, muteAudio, muteVideo, muteData);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithUserId:(long long)userId muteAudio:(BOOL)muteAudio muteVideo:(BOOL)muteVideo {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomModerateOptions__SWIG_2(userId, muteAudio, muteVideo);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithUserId:(long long)userId muteAudio:(BOOL)muteAudio {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomModerateOptions__SWIG_3(userId, muteAudio);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithUserId:(long long)userId {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomModerateOptions__SWIG_4(userId);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMUserId:(long long)value {
  _wrap_BMXRoomModerateOptions_mUserId_set(self.swigCPtr, value);
}

- (long long)getMUserId {
   return _wrap_BMXRoomModerateOptions_mUserId_get(self.swigCPtr);
}

- (void)setMMuteAudio:(BOOL)value {
  _wrap_BMXRoomModerateOptions_mMuteAudio_set(self.swigCPtr, value);
}

- (BOOL)getMMuteAudio {
   return _wrap_BMXRoomModerateOptions_mMuteAudio_get(self.swigCPtr);
}

- (void)setMMuteVideo:(BOOL)value {
  _wrap_BMXRoomModerateOptions_mMuteVideo_set(self.swigCPtr, value);
}

- (BOOL)getMMuteVideo {
   return _wrap_BMXRoomModerateOptions_mMuteVideo_get(self.swigCPtr);
}

- (void)setMMuteData:(BOOL)value {
  _wrap_BMXRoomModerateOptions_mMuteData_set(self.swigCPtr, value);
}

- (BOOL)getMMuteData {
   return _wrap_BMXRoomModerateOptions_mMuteData_get(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRoomModerateOptions((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXPubRoomJoinOptions

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXPubRoomJoinOptions__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithUserId:(long long)userId roomId:(long long)roomId pin:(NSString*)pin description:(NSString*)description token:(NSString*)token {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXPubRoomJoinOptions__SWIG_1(userId, roomId, pin, description, token);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithUserId:(long long)userId roomId:(long long)roomId pin:(NSString*)pin description:(NSString*)description {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXPubRoomJoinOptions__SWIG_2(userId, roomId, pin, description);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithUserId:(long long)userId roomId:(long long)roomId pin:(NSString*)pin {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXPubRoomJoinOptions__SWIG_3(userId, roomId, pin);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithUserId:(long long)userId roomId:(long long)roomId {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXPubRoomJoinOptions__SWIG_4(userId, roomId);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMUserId:(long long)value {
  _wrap_BMXPubRoomJoinOptions_mUserId_set(self.swigCPtr, value);
}

- (long long)getMUserId {
   return _wrap_BMXPubRoomJoinOptions_mUserId_get(self.swigCPtr);
}

- (void)setMRoomId:(long long)value {
  _wrap_BMXPubRoomJoinOptions_mRoomId_set(self.swigCPtr, value);
}

- (long long)getMRoomId {
   return _wrap_BMXPubRoomJoinOptions_mRoomId_get(self.swigCPtr);
}

- (void)setMRoomPin:(NSString*)value {
  _wrap_BMXPubRoomJoinOptions_mRoomPin_set(self.swigCPtr, value);
}

- (NSString*)getMRoomPin {
  {
    return _wrap_BMXPubRoomJoinOptions_mRoomPin_get(self.swigCPtr);
  }
}

- (void)setMDescription:(NSString*)value {
  _wrap_BMXPubRoomJoinOptions_mDescription_set(self.swigCPtr, value);
}

- (NSString*)getMDescription {
  {
    return _wrap_BMXPubRoomJoinOptions_mDescription_get(self.swigCPtr);
  }
}

- (void)setMToken:(NSString*)value {
  _wrap_BMXPubRoomJoinOptions_mToken_set(self.swigCPtr, value);
}

- (NSString*)getMToken {
  {
    return _wrap_BMXPubRoomJoinOptions_mToken_get(self.swigCPtr);
  }
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXPubRoomJoinOptions((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRoomPubConfigureOptions

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo width:(int)width height:(int)height bitrate:(int)bitrate enableData:(BOOL)enableData display:(NSString*)display {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomPubConfigureOptions__SWIG_0(enableAudio, enableVideo, width, height, bitrate, enableData, display);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo width:(int)width height:(int)height bitrate:(int)bitrate enableData:(BOOL)enableData {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomPubConfigureOptions__SWIG_1(enableAudio, enableVideo, width, height, bitrate, enableData);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo width:(int)width height:(int)height bitrate:(int)bitrate {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomPubConfigureOptions__SWIG_2(enableAudio, enableVideo, width, height, bitrate);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo width:(int)width height:(int)height {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomPubConfigureOptions__SWIG_3(enableAudio, enableVideo, width, height);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo width:(int)width {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomPubConfigureOptions__SWIG_4(enableAudio, enableVideo, width);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomPubConfigureOptions__SWIG_5(enableAudio, enableVideo);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithEnableAudio:(BOOL)enableAudio {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomPubConfigureOptions__SWIG_6(enableAudio);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomPubConfigureOptions__SWIG_7();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMEnableAudio:(BOOL)value {
  _wrap_BMXRoomPubConfigureOptions_mEnableAudio_set(self.swigCPtr, value);
}

- (BOOL)getMEnableAudio {
   return _wrap_BMXRoomPubConfigureOptions_mEnableAudio_get(self.swigCPtr);
}

- (void)setMEnableVideo:(BOOL)value {
  _wrap_BMXRoomPubConfigureOptions_mEnableVideo_set(self.swigCPtr, value);
}

- (BOOL)getMEnableVideo {
   return _wrap_BMXRoomPubConfigureOptions_mEnableVideo_get(self.swigCPtr);
}

- (void)setMEnableData:(BOOL)value {
  _wrap_BMXRoomPubConfigureOptions_mEnableData_set(self.swigCPtr, value);
}

- (BOOL)getMEnableData {
   return _wrap_BMXRoomPubConfigureOptions_mEnableData_get(self.swigCPtr);
}

- (void)setMDisplay:(NSString*)value {
  _wrap_BMXRoomPubConfigureOptions_mDisplay_set(self.swigCPtr, value);
}

- (NSString*)getMDisplay {
  {
    return _wrap_BMXRoomPubConfigureOptions_mDisplay_get(self.swigCPtr);
  }
}

- (void)setMWidth:(int)value {
  _wrap_BMXRoomPubConfigureOptions_mWidth_set(self.swigCPtr, value);
}

- (int)getMWidth {
   return _wrap_BMXRoomPubConfigureOptions_mWidth_get(self.swigCPtr);
}

- (void)setMHeight:(int)value {
  _wrap_BMXRoomPubConfigureOptions_mHeight_set(self.swigCPtr, value);
}

- (int)getMHeight {
   return _wrap_BMXRoomPubConfigureOptions_mHeight_get(self.swigCPtr);
}

- (void)setMBitrate:(int)value {
  _wrap_BMXRoomPubConfigureOptions_mBitrate_set(self.swigCPtr, value);
}

- (int)getMBitrate {
   return _wrap_BMXRoomPubConfigureOptions_mBitrate_get(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRoomPubConfigureOptions((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRoomSubJoinOptions

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubJoinOptions__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams privateId:(long long)privateId enableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo enableData:(BOOL)enableData autoClosePc:(BOOL)autoClosePc {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubJoinOptions__SWIG_1(janusStreams.swigCPtr, privateId, enableAudio, enableVideo, enableData, autoClosePc);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams privateId:(long long)privateId enableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo enableData:(BOOL)enableData {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubJoinOptions__SWIG_2(janusStreams.swigCPtr, privateId, enableAudio, enableVideo, enableData);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams privateId:(long long)privateId enableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubJoinOptions__SWIG_3(janusStreams.swigCPtr, privateId, enableAudio, enableVideo);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams privateId:(long long)privateId enableAudio:(BOOL)enableAudio {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubJoinOptions__SWIG_4(janusStreams.swigCPtr, privateId, enableAudio);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams privateId:(long long)privateId {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubJoinOptions__SWIG_5(janusStreams.swigCPtr, privateId);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithJanusStreams:(BMXRTCStreams*)janusStreams {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubJoinOptions__SWIG_6(janusStreams.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMUserId:(long long)value {
  _wrap_BMXRoomSubJoinOptions_mUserId_set(self.swigCPtr, value);
}

- (long long)getMUserId {
   return _wrap_BMXRoomSubJoinOptions_mUserId_get(self.swigCPtr);
}

- (void)setMRoomId:(long long)value {
  _wrap_BMXRoomSubJoinOptions_mRoomId_set(self.swigCPtr, value);
}

- (long long)getMRoomId {
   return _wrap_BMXRoomSubJoinOptions_mRoomId_get(self.swigCPtr);
}

- (void)setMRoomPin:(NSString*)value {
  _wrap_BMXRoomSubJoinOptions_mRoomPin_set(self.swigCPtr, value);
}

- (NSString*)getMRoomPin {
  {
    return _wrap_BMXRoomSubJoinOptions_mRoomPin_get(self.swigCPtr);
  }
}

- (void)setMDescription:(NSString*)value {
  _wrap_BMXRoomSubJoinOptions_mDescription_set(self.swigCPtr, value);
}

- (NSString*)getMDescription {
  {
    return _wrap_BMXRoomSubJoinOptions_mDescription_get(self.swigCPtr);
  }
}

- (void)setMToken:(NSString*)value {
  _wrap_BMXRoomSubJoinOptions_mToken_set(self.swigCPtr, value);
}

- (NSString*)getMToken {
  {
    return _wrap_BMXRoomSubJoinOptions_mToken_get(self.swigCPtr);
  }
}

- (void)setMPrivateId:(long long)value {
  _wrap_BMXRoomSubJoinOptions_mPrivateId_set(self.swigCPtr, value);
}

- (long long)getMPrivateId {
   return _wrap_BMXRoomSubJoinOptions_mPrivateId_get(self.swigCPtr);
}

- (void)setMEnableAudio:(BOOL)value {
  _wrap_BMXRoomSubJoinOptions_mEnableAudio_set(self.swigCPtr, value);
}

- (BOOL)getMEnableAudio {
   return _wrap_BMXRoomSubJoinOptions_mEnableAudio_get(self.swigCPtr);
}

- (void)setMEnableVideo:(BOOL)value {
  _wrap_BMXRoomSubJoinOptions_mEnableVideo_set(self.swigCPtr, value);
}

- (BOOL)getMEnableVideo {
   return _wrap_BMXRoomSubJoinOptions_mEnableVideo_get(self.swigCPtr);
}

- (void)setMEnableData:(BOOL)value {
  _wrap_BMXRoomSubJoinOptions_mEnableData_set(self.swigCPtr, value);
}

- (BOOL)getMEnableData {
   return _wrap_BMXRoomSubJoinOptions_mEnableData_get(self.swigCPtr);
}

- (void)setMAutoClosePc:(BOOL)value {
  _wrap_BMXRoomSubJoinOptions_mAutoClosePc_set(self.swigCPtr, value);
}

- (BOOL)getMAutoClosePc {
   return _wrap_BMXRoomSubJoinOptions_mAutoClosePc_get(self.swigCPtr);
}

- (void)setStreams:(BMXRTCStreams*)value {
  _wrap_BMXRoomSubJoinOptions_streams_set(self.swigCPtr, value.swigCPtr);
}

- (BMXRTCStreams*)getStreams {
     void* cPtr = _wrap_BMXRoomSubJoinOptions_streams_get(self.swigCPtr);
     BMXRTCStreams* ret = nil;
     if(cPtr) {
        ret = [[BMXRTCStreams alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
       [ret autorelease];
#endif
     }
    return ret;
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRoomSubJoinOptions((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRoomSubConfigureOptions

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo enableData:(BOOL)enableData {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubConfigureOptions__SWIG_0(enableAudio, enableVideo, enableData);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithEnableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubConfigureOptions__SWIG_1(enableAudio, enableVideo);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithEnableAudio:(BOOL)enableAudio {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubConfigureOptions__SWIG_2(enableAudio);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubConfigureOptions__SWIG_3();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMEnableAudio:(BOOL)value {
  _wrap_BMXRoomSubConfigureOptions_mEnableAudio_set(self.swigCPtr, value);
}

- (BOOL)getMEnableAudio {
   return _wrap_BMXRoomSubConfigureOptions_mEnableAudio_get(self.swigCPtr);
}

- (void)setMEnableVideo:(BOOL)value {
  _wrap_BMXRoomSubConfigureOptions_mEnableVideo_set(self.swigCPtr, value);
}

- (BOOL)getMEnableVideo {
   return _wrap_BMXRoomSubConfigureOptions_mEnableVideo_get(self.swigCPtr);
}

- (void)setMEnableData:(BOOL)value {
  _wrap_BMXRoomSubConfigureOptions_mEnableData_set(self.swigCPtr, value);
}

- (BOOL)getMEnableData {
   return _wrap_BMXRoomSubConfigureOptions_mEnableData_get(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRoomSubConfigureOptions((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRoomSubSwitchOptions

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubSwitchOptions__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithFeedId:(long long)feedId enableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo enableData:(BOOL)enableData {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubSwitchOptions__SWIG_1(feedId, enableAudio, enableVideo, enableData);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithFeedId:(long long)feedId enableAudio:(BOOL)enableAudio enableVideo:(BOOL)enableVideo {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubSwitchOptions__SWIG_2(feedId, enableAudio, enableVideo);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithFeedId:(long long)feedId enableAudio:(BOOL)enableAudio {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubSwitchOptions__SWIG_3(feedId, enableAudio);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithFeedId:(long long)feedId {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSubSwitchOptions__SWIG_4(feedId);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMFeedId:(long long)value {
  _wrap_BMXRoomSubSwitchOptions_mFeedId_set(self.swigCPtr, value);
}

- (long long)getMFeedId {
   return _wrap_BMXRoomSubSwitchOptions_mFeedId_get(self.swigCPtr);
}

- (void)setMEnableAudio:(BOOL)value {
  _wrap_BMXRoomSubSwitchOptions_mEnableAudio_set(self.swigCPtr, value);
}

- (BOOL)getMEnableAudio {
   return _wrap_BMXRoomSubSwitchOptions_mEnableAudio_get(self.swigCPtr);
}

- (void)setMEnableVideo:(BOOL)value {
  _wrap_BMXRoomSubSwitchOptions_mEnableVideo_set(self.swigCPtr, value);
}

- (BOOL)getMEnableVideo {
   return _wrap_BMXRoomSubSwitchOptions_mEnableVideo_get(self.swigCPtr);
}

- (void)setMEnableData:(BOOL)value {
  _wrap_BMXRoomSubSwitchOptions_mEnableData_set(self.swigCPtr, value);
}

- (BOOL)getMEnableData {
   return _wrap_BMXRoomSubSwitchOptions_mEnableData_get(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRoomSubSwitchOptions((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXMessageAttachment

- (BMXMessageAttachment_Type)type {
   return (BMXMessageAttachment_Type)_wrap_BMXMessageAttachment_type(self.swigCPtr); 
}

- (BMXMessageAttachment*)clone {
     void* cPtr = _wrap_BMXMessageAttachment_clone(self.swigCPtr);
     BMXMessageAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXMessageAttachment((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXMessageConfig

- (void)setMentionAll:(BOOL)mentionAll {
  _wrap_BMXMessageConfig_setMentionAll(self.swigCPtr, mentionAll);
}

- (BOOL)getMentionAll {
   return _wrap_BMXMessageConfig_getMentionAll(self.swigCPtr); 
}

- (void)setMentionList:(ListOfLongLong*)mentionList {
  _wrap_BMXMessageConfig_setMentionList(self.swigCPtr, mentionList.swigCPtr);
}

- (ListOfLongLong*)getMentionList {
     void* cPtr = _wrap_BMXMessageConfig_getMentionList(self.swigCPtr);
     ListOfLongLong* ret = nil;
     if(cPtr) {
        ret = [[ListOfLongLong alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)setMentionedMessage:(NSString*)mentionedMessage {
  _wrap_BMXMessageConfig_setMentionedMessage(self.swigCPtr, mentionedMessage);
}

- (NSString*)getMentionedMessage {
  {
    return _wrap_BMXMessageConfig_getMentionedMessage(self.swigCPtr);
  }
}

- (void)setPushMessage:(NSString*)pushMessage {
  _wrap_BMXMessageConfig_setPushMessage(self.swigCPtr, pushMessage);
}

- (NSString*)getPushMessage {
  {
    return _wrap_BMXMessageConfig_getPushMessage(self.swigCPtr);
  }
}

- (void)setSenderNickname:(NSString*)senderNickname {
  _wrap_BMXMessageConfig_setSenderNickname(self.swigCPtr, senderNickname);
}

- (NSString*)getSenderNickname {
  {
    return _wrap_BMXMessageConfig_getSenderNickname(self.swigCPtr);
  }
}

- (void)setGroupMemberList:(ListOfLongLong*)groupMemberList {
  _wrap_BMXMessageConfig_setGroupMemberList(self.swigCPtr, groupMemberList.swigCPtr);
}

- (ListOfLongLong*)getGroupMemberList {
     void* cPtr = _wrap_BMXMessageConfig_getGroupMemberList(self.swigCPtr);
     ListOfLongLong* ret = nil;
     if(cPtr) {
        ret = [[ListOfLongLong alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)addGroupMemberWithMemberId:(long long)memberId {
  _wrap_BMXMessageConfig_addGroupMember(self.swigCPtr, memberId);
}

- (void)removeGroupMemberWithMemberId:(long long)memberId {
  _wrap_BMXMessageConfig_removeGroupMember(self.swigCPtr, memberId);
}

- (void)clearGroupMemberList {
  _wrap_BMXMessageConfig_clearGroupMemberList(self.swigCPtr);
}

- (void)setIOSConfig:(NSString*)iosConfig {
  _wrap_BMXMessageConfig_setIOSConfig(self.swigCPtr, iosConfig);
}

- (NSString*)getIOSConfig {
  {
    return _wrap_BMXMessageConfig_getIOSConfig(self.swigCPtr);
  }
}

- (void)setAndroidConfig:(NSString*)androidConfig {
  _wrap_BMXMessageConfig_setAndroidConfig(self.swigCPtr, androidConfig);
}

- (NSString*)getAndroidConfig {
  {
    return _wrap_BMXMessageConfig_getAndroidConfig(self.swigCPtr);
  }
}

- (void)setPushShowBeginTime:(int)beginTime {
  _wrap_BMXMessageConfig_setPushShowBeginTime(self.swigCPtr, beginTime);
}

- (int)getPushShowBeginTime {
   return _wrap_BMXMessageConfig_getPushShowBeginTime(self.swigCPtr); 
}

- (void)setPushShowEndTime:(int)endTime {
  _wrap_BMXMessageConfig_setPushShowEndTime(self.swigCPtr, endTime);
}

- (int)getPushShowEndTime {
   return _wrap_BMXMessageConfig_getPushShowEndTime(self.swigCPtr); 
}

- (void)setPushTitle:(NSString*)pushTitle {
  _wrap_BMXMessageConfig_setPushTitle(self.swigCPtr, pushTitle);
}

- (NSString*)getPushTitle {
  {
    return _wrap_BMXMessageConfig_getPushTitle(self.swigCPtr);
  }
}

- (void)setPushTitleLocKey:(NSString*)pushTitleLocKey {
  _wrap_BMXMessageConfig_setPushTitleLocKey(self.swigCPtr, pushTitleLocKey);
}

- (NSString*)getPushTitleLocKey {
  {
    return _wrap_BMXMessageConfig_getPushTitleLocKey(self.swigCPtr);
  }
}

- (void)setPushTitleLocArgs:(NSString*)pushTitleLocArgs {
  _wrap_BMXMessageConfig_setPushTitleLocArgs(self.swigCPtr, pushTitleLocArgs);
}

- (NSString*)getPushTitleLocArgs {
  {
    return _wrap_BMXMessageConfig_getPushTitleLocArgs(self.swigCPtr);
  }
}

- (void)setPushMessageLocKey:(NSString*)pushMessageLocKey {
  _wrap_BMXMessageConfig_setPushMessageLocKey(self.swigCPtr, pushMessageLocKey);
}

- (NSString*)getPushMessageLocKey {
  {
    return _wrap_BMXMessageConfig_getPushMessageLocKey(self.swigCPtr);
  }
}

- (void)setPushMessageLocArgs:(NSString*)pushMessageLocArgs {
  _wrap_BMXMessageConfig_setPushMessageLocArgs(self.swigCPtr, pushMessageLocArgs);
}

- (NSString*)getPushMessageLocArgs {
  {
    return _wrap_BMXMessageConfig_getPushMessageLocArgs(self.swigCPtr);
  }
}

- (BOOL)isSilence {
   return _wrap_BMXMessageConfig_isSilence(self.swigCPtr); 
}

- (BMXMessageConfig_BadgeCountType)getBadgeCountType {
   return (BMXMessageConfig_BadgeCountType)_wrap_BMXMessageConfig_getBadgeCountType(self.swigCPtr); 
}

- (int)getBadgeCount:(int)count {
   return _wrap_BMXMessageConfig_getBadgeCount(self.swigCPtr, count); 
}

- (void)setUsername:(NSString*)username {
  _wrap_BMXMessageConfig_setUsername(self.swigCPtr, username);
}

- (NSString*)getUsername {
  {
    return _wrap_BMXMessageConfig_getUsername(self.swigCPtr);
  }
}

- (void)setRTCCallInfo:(BMXMessageConfig_RTCCallType)calltype roomId:(long long)roomId initiator:(long long)initiator roomType:(BMXMessageConfig_RTCRoomType)roomType pin:(NSString*)pin {
  _wrap_BMXMessageConfig_setRTCCallInfo(self.swigCPtr, (int)calltype, roomId, initiator, (int)roomType, pin);
}

- (void)setRTCPickupInfo:(NSString*)callId {
  _wrap_BMXMessageConfig_setRTCPickupInfo(self.swigCPtr, callId);
}

- (void)setRTCHangupInfo:(NSString*)callId {
  _wrap_BMXMessageConfig_setRTCHangupInfo(self.swigCPtr, callId);
}

- (NSString*)getRTCAction {
  {
    return _wrap_BMXMessageConfig_getRTCAction(self.swigCPtr);
  }
}

- (BMXMessageConfig_RTCCallType)getRTCCallType {
   return (BMXMessageConfig_RTCCallType)_wrap_BMXMessageConfig_getRTCCallType(self.swigCPtr); 
}

- (long long)getRTCRoomId {
   return _wrap_BMXMessageConfig_getRTCRoomId(self.swigCPtr); 
}

- (long long)getRTCInitiator {
   return _wrap_BMXMessageConfig_getRTCInitiator(self.swigCPtr); 
}

- (NSString*)getRTCCallId {
  {
    return _wrap_BMXMessageConfig_getRTCCallId(self.swigCPtr);
  }
}

- (BMXMessageConfig_RTCRoomType)getRTCRoomType {
   return (BMXMessageConfig_RTCRoomType)_wrap_BMXMessageConfig_getRTCRoomType(self.swigCPtr); 
}

- (NSString*)getRTCPin {
  {
    return _wrap_BMXMessageConfig_getRTCPin(self.swigCPtr);
  }
}

+ (BMXMessageConfig*)createMessageConfigWithMentionAll:(BOOL)mentionAll {
     void* cPtr = _wrap_BMXMessageConfig_createMessageConfig(mentionAll);
     BMXMessageConfig* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageConfig alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXMessageConfig((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXMessage

- (long long)msgId {
   return _wrap_BMXMessage_msgId(self.swigCPtr); 
}

- (long long)clientMsgId {
   return _wrap_BMXMessage_clientMsgId(self.swigCPtr); 
}

- (long long)fromId {
   return _wrap_BMXMessage_fromId(self.swigCPtr); 
}

- (long long)toId {
   return _wrap_BMXMessage_toId(self.swigCPtr); 
}

- (BMXMessage_MessageType)type {
   return (BMXMessage_MessageType)_wrap_BMXMessage_type(self.swigCPtr); 
}

- (long long)conversationId {
   return _wrap_BMXMessage_conversationId(self.swigCPtr); 
}

- (BMXMessage_DeliveryStatus)deliveryStatus {
   return (BMXMessage_DeliveryStatus)_wrap_BMXMessage_deliveryStatus(self.swigCPtr); 
}

- (void)setDeliveryStatus:(BMXMessage_DeliveryStatus)arg1 {
  _wrap_BMXMessage_setDeliveryStatus(self.swigCPtr, (int)arg1);
}

- (long long)serverTimestamp {
   return _wrap_BMXMessage_serverTimestamp(self.swigCPtr); 
}

- (void)setServerTimestamp:(long long)arg1 {
  _wrap_BMXMessage_setServerTimestamp(self.swigCPtr, arg1);
}

- (long long)clientTimestamp {
   return _wrap_BMXMessage_clientTimestamp(self.swigCPtr); 
}

- (void)setClientTimestamp:(long long)arg1 {
  _wrap_BMXMessage_setClientTimestamp(self.swigCPtr, arg1);
}

- (BOOL)isPlayed {
   return _wrap_BMXMessage_isPlayed(self.swigCPtr); 
}

- (void)setIsPlayed:(BOOL)arg1 {
  _wrap_BMXMessage_setIsPlayed(self.swigCPtr, arg1);
}

- (BOOL)isPlayAcked {
   return _wrap_BMXMessage_isPlayAcked(self.swigCPtr); 
}

- (void)setIsPlayAcked:(BOOL)arg1 {
  _wrap_BMXMessage_setIsPlayAcked(self.swigCPtr, arg1);
}

- (BOOL)isReceiveMsg {
   return _wrap_BMXMessage_isReceiveMsg(self.swigCPtr); 
}

- (void)setIsReceiveMsg:(BOOL)arg1 {
  _wrap_BMXMessage_setIsReceiveMsg(self.swigCPtr, arg1);
}

- (BOOL)isRead {
   return _wrap_BMXMessage_isRead(self.swigCPtr); 
}

- (void)setIsRead:(BOOL)arg1 {
  _wrap_BMXMessage_setIsRead(self.swigCPtr, arg1);
}

- (BOOL)isReadAcked {
   return _wrap_BMXMessage_isReadAcked(self.swigCPtr); 
}

- (void)setIsReadAcked:(BOOL)arg1 {
  _wrap_BMXMessage_setIsReadAcked(self.swigCPtr, arg1);
}

- (BOOL)isDeliveryAcked {
   return _wrap_BMXMessage_isDeliveryAcked(self.swigCPtr); 
}

- (void)setIsDeliveryAcked:(BOOL)arg1 {
  _wrap_BMXMessage_setIsDeliveryAcked(self.swigCPtr, arg1);
}

- (NSString*)content {
  {
    return _wrap_BMXMessage_content(self.swigCPtr);
  }
}

- (void)setContent:(NSString*)content {
  _wrap_BMXMessage_setContent(self.swigCPtr, content);
}

- (BMXMessage_ContentType)contentType {
   return (BMXMessage_ContentType)_wrap_BMXMessage_contentType(self.swigCPtr); 
}

- (BMXMessageAttachment*)attachment {
     void* cPtr = _wrap_BMXMessage_attachment(self.swigCPtr);
     BMXMessageAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXMessageConfig*)config {
     void* cPtr = _wrap_BMXMessage_config(self.swigCPtr);
     BMXMessageConfig* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageConfig alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)setConfig:(BMXMessageConfig*)arg1 {
  _wrap_BMXMessage_setConfig(self.swigCPtr, arg1.swigCPtr);
}

- (NSString*)extension {
  {
    return _wrap_BMXMessage_extension(self.swigCPtr);
  }
}

- (void)setExtension:(NSString*)arg1 {
  _wrap_BMXMessage_setExtension(self.swigCPtr, arg1);
}

- (BMXMessage_DeliveryQos)deliveryQos {
   return (BMXMessage_DeliveryQos)_wrap_BMXMessage_deliveryQos(self.swigCPtr); 
}

- (void)setDeliveryQos:(BMXMessage_DeliveryQos)qos {
  _wrap_BMXMessage_setDeliveryQos(self.swigCPtr, (int)qos);
}

- (NSString*)senderName {
  {
    return _wrap_BMXMessage_senderName(self.swigCPtr);
  }
}

- (void)setSenderName:(NSString*)senderName {
  _wrap_BMXMessage_setSenderName(self.swigCPtr, senderName);
}

- (int)groupAckCount {
   return _wrap_BMXMessage_groupAckCount(self.swigCPtr); 
}

- (void)setGroupAckCount:(int)count {
  _wrap_BMXMessage_setGroupAckCount(self.swigCPtr, count);
}

- (int)groupAckUnreadCount {
   return _wrap_BMXMessage_groupAckUnreadCount(self.swigCPtr); 
}

- (void)setGroupAckUnreadCount:(int)count {
  _wrap_BMXMessage_setGroupAckUnreadCount(self.swigCPtr, count);
}

- (BOOL)groupAckReadAll {
   return _wrap_BMXMessage_groupAckReadAll(self.swigCPtr); 
}

- (int)groupPlayAckCount {
   return _wrap_BMXMessage_groupPlayAckCount(self.swigCPtr); 
}

- (void)setGroupPlayAckCount:(int)count {
  _wrap_BMXMessage_setGroupPlayAckCount(self.swigCPtr, count);
}

- (int)groupPlayAckUnreadCount {
   return _wrap_BMXMessage_groupPlayAckUnreadCount(self.swigCPtr); 
}

- (void)setGroupPlayAckUnreadCount:(int)count {
  _wrap_BMXMessage_setGroupPlayAckUnreadCount(self.swigCPtr, count);
}

- (BOOL)groupPlayAckReadAll {
   return _wrap_BMXMessage_groupPlayAckReadAll(self.swigCPtr); 
}

- (void)setPriority:(int)priority {
  _wrap_BMXMessage_setPriority(self.swigCPtr, priority);
}

- (int)priority {
   return _wrap_BMXMessage_priority(self.swigCPtr); 
}

- (void)setPushMessageMode:(BOOL)arg1 {
  _wrap_BMXMessage_setPushMessageMode(self.swigCPtr, arg1);
}

- (BOOL)isPushMessage {
   return _wrap_BMXMessage_isPushMessage(self.swigCPtr); 
}

+ (BMXMessage*)createMessageWithFrom:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content {
     void* cPtr = _wrap_BMXMessage_createMessage__SWIG_0(from, to, (int)type, conversationId, content);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

+ (BMXMessage*)createMessageWithFrom:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId attachment:(BMXMessageAttachment*)attachment {
     void* cPtr = _wrap_BMXMessage_createMessage__SWIG_1(from, to, (int)type, conversationId, attachment.swigCPtr, attachment.type);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

+ (BMXMessage*)createCommandMessageWithFrom:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content {
     void* cPtr = _wrap_BMXMessage_createCommandMessage__SWIG_0(from, to, (int)type, conversationId, content);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

+ (BMXMessage*)createRTCMessageWithFrom:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content {
     void* cPtr = _wrap_BMXMessage_createRTCMessage__SWIG_0(from, to, (int)type, conversationId, content);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}
+ (BMXMessage*)createMessageWithMsgId:(long long)msgId from:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content serverTimestamp:(long long)serverTimestamp {
     void* cPtr = _wrap_BMXMessage_createMessage__SWIG_2(msgId, from, to, (int)type, conversationId, content, serverTimestamp);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

+ (BMXMessage*)createMessageWithMsgId:(long long)msgId from:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId attachment:(BMXMessageAttachment*)attachment serverTimestamp:(long long)serverTimestamp {
     void* cPtr = _wrap_BMXMessage_createMessage__SWIG_3(msgId, from, to, (int)type, conversationId, attachment.swigCPtr, serverTimestamp, attachment.type);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

+ (BMXMessage*)createCommandMessageWithMsgId:(long long)msgId from:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content serverTimestamp:(long long)serverTimestamp {
     void* cPtr = _wrap_BMXMessage_createCommandMessage__SWIG_1(msgId, from, to, (int)type, conversationId, content, serverTimestamp);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

+ (BMXMessage*)createRTCMessageWithMsgId:(long long)msgId from:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId content:(NSString*)content serverTimestamp:(long long)serverTimestamp {
     void* cPtr = _wrap_BMXMessage_createRTCMessage__SWIG_1(msgId, from, to, (int)type, conversationId, content, serverTimestamp);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}
+ (BMXMessage*)createForwardMessageWithMsg:(BMXMessage*)msg from:(long long)from to:(long long)to type:(BMXMessage_MessageType)type conversationId:(long long)conversationId {
     void* cPtr = _wrap_BMXMessage_createForwardMessage(msg.swigCPtr, from, to, (int)type, conversationId);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXMessage((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXConversation

- (long long)conversationId {
   return _wrap_BMXConversation_conversationId(self.swigCPtr); 
}

- (BMXConversation_Type)type {
   return (BMXConversation_Type)_wrap_BMXConversation_type(self.swigCPtr); 
}

- (BMXMessage*)lastMsg {
     void* cPtr = _wrap_BMXConversation_lastMsg(self.swigCPtr);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (int)unreadNumber {
   return _wrap_BMXConversation_unreadNumber(self.swigCPtr); 
}

- (int)messageCount {
   return _wrap_BMXConversation_messageCount(self.swigCPtr); 
}

- (BOOL)isMuteNotification {
   return _wrap_BMXConversation_isMuteNotification(self.swigCPtr); 
}

- (NSString*)extension {
  {
    return _wrap_BMXConversation_extension(self.swigCPtr);
  }
}

- (BMXErrorCode)setExtension:(NSString*)ext {
   return (BMXErrorCode)_wrap_BMXConversation_setExtension(self.swigCPtr, ext); 
}

- (NSString*)editMessage {
  {
    return _wrap_BMXConversation_editMessage(self.swigCPtr);
  }
}

- (BMXErrorCode)setEditMessage:(NSString*)editMessage {
   return (BMXErrorCode)_wrap_BMXConversation_setEditMessage(self.swigCPtr, editMessage); 
}

- (BMXErrorCode)setMessagePlayedStatus:(BMXMessage*)msg status:(BOOL)status {
   return (BMXErrorCode)_wrap_BMXConversation_setMessagePlayedStatus(self.swigCPtr, msg.swigCPtr, status); 
}

- (BMXErrorCode)setMessageReadStatus:(BMXMessage*)msg status:(BOOL)status {
   return (BMXErrorCode)_wrap_BMXConversation_setMessageReadStatus(self.swigCPtr, msg.swigCPtr, status); 
}

- (BMXErrorCode)setAllMessagesRead {
   return (BMXErrorCode)_wrap_BMXConversation_setAllMessagesRead(self.swigCPtr); 
}

- (BMXErrorCode)updateMessageExtensionWithMsg:(BMXMessage*)msg {
   return (BMXErrorCode)_wrap_BMXConversation_updateMessageExtension(self.swigCPtr, msg.swigCPtr); 
}

- (BMXErrorCode)insertMessageWithMsg:(BMXMessage*)msg {
   return (BMXErrorCode)_wrap_BMXConversation_insertMessage(self.swigCPtr, msg.swigCPtr); 
}

- (BMXMessage*)loadMessageWithMsgId:(long long)msgId {
     void* cPtr = _wrap_BMXConversation_loadMessage(self.swigCPtr, msgId);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXErrorCode)removeAllMessages {
   return (BMXErrorCode)_wrap_BMXConversation_removeAllMessages(self.swigCPtr); 
}

- (BMXErrorCode)loadMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size result:(BMXMessageList*)result arg4:(BMXConversation_Direction)arg4 {
   return (BMXErrorCode)_wrap_BMXConversation_loadMessages__SWIG_0(self.swigCPtr, refMsgId, size, result.swigCPtr, (int)arg4); 
}

- (BMXErrorCode)loadMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size result:(BMXMessageList*)result {
   return (BMXErrorCode)_wrap_BMXConversation_loadMessages__SWIG_1(self.swigCPtr, refMsgId, size, result.swigCPtr); 
}

- (BMXErrorCode)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageList*)result arg5:(BMXConversation_Direction)arg5 {
   return (BMXErrorCode)_wrap_BMXConversation_searchMessagesByKeyWords__SWIG_0(self.swigCPtr, keywords, refTime, size, result.swigCPtr, (int)arg5); 
}

- (BMXErrorCode)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageList*)result {
   return (BMXErrorCode)_wrap_BMXConversation_searchMessagesByKeyWords__SWIG_1(self.swigCPtr, keywords, refTime, size, result.swigCPtr); 
}

- (BMXErrorCode)searchMessagesByTypeWithType:(BMXMessage_ContentType)type refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageList*)result arg5:(BMXConversation_Direction)arg5 {
   return (BMXErrorCode)_wrap_BMXConversation_searchMessagesByType__SWIG_0(self.swigCPtr, (int)type, refTime, size, result.swigCPtr, (int)arg5); 
}

- (BMXErrorCode)searchMessagesByTypeWithType:(BMXMessage_ContentType)type refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageList*)result {
   return (BMXErrorCode)_wrap_BMXConversation_searchMessagesByType__SWIG_1(self.swigCPtr, (int)type, refTime, size, result.swigCPtr); 
}

- (BMXErrorCode)refreshConversation {
   return (BMXErrorCode)_wrap_BMXConversation_refreshConversation(self.swigCPtr); 
}




- (void)setMessagePlayedStatus:(BMXMessage*)msg status:(BOOL)status completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXConversation_setMessagePlayedStatus(self.swigCPtr, msg.swigCPtr, status);
    } completion:resBlock];
}

- (void)setMessageReadStatus:(BMXMessage*)msg status:(BOOL)status completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXConversation_setMessageReadStatus(self.swigCPtr, msg.swigCPtr, status);
    } completion:resBlock];
}

- (void)setAllMessagesReadWithCompletion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXConversation_setAllMessagesRead(self.swigCPtr);
    } completion:resBlock];
}

- (void)updateMessageExtensionWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXConversation_updateMessageExtension(self.swigCPtr, msg.swigCPtr);
    } completion:resBlock];
}

- (void)insertMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXConversation_insertMessage(self.swigCPtr, msg.swigCPtr);
    } completion:resBlock];
}

- (void)loadMessageWithMsgId:(long long)msgId completion:(void (^)(BMXMessage *res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXMessage:^BMXErrorCode(BMXMessage *res) {
        void* cPtr = _wrap_BMXConversation_loadMessage(self.swigCPtr, msgId);
        BMXMessage* ret = nil;
        if(cPtr) {
           ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
   #if !__has_feature(objc_arc)
          [ret autorelease];
   #endif
        }
        res = ret;
        return BMXErrorCode_NoError;
    } completion: resBlock];
}

- (void)removeAllMessagesWithCompletion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXConversation_removeAllMessages(self.swigCPtr);
    } completion:resBlock];
}

- (void)loadMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size arg4:(BMXConversation_Direction)arg4 completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXMessageList:^BMXErrorCode(BMXMessageList *result) {
        return (BMXErrorCode)_wrap_BMXConversation_loadMessages__SWIG_0(self.swigCPtr, refMsgId, size, result.swigCPtr, (int)arg4);
    } completion: resBlock];
}

- (void)loadMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXMessageList:^BMXErrorCode(BMXMessageList *result) {
        return (BMXErrorCode)_wrap_BMXConversation_loadMessages__SWIG_1(self.swigCPtr, refMsgId, size, result.swigCPtr);
    } completion: resBlock];
}

- (void)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size arg5:(BMXConversation_Direction)arg5 completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXMessageList:^BMXErrorCode(BMXMessageList *result) {
        return (BMXErrorCode)_wrap_BMXConversation_searchMessagesByKeyWords__SWIG_0(self.swigCPtr, keywords, refTime, size, result.swigCPtr, (int)arg5);
    } completion: resBlock];
}

- (void)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXMessageList:^BMXErrorCode(BMXMessageList *result) {
        return (BMXErrorCode)_wrap_BMXConversation_searchMessagesByKeyWords__SWIG_1(self.swigCPtr, keywords, refTime, size, result.swigCPtr);
    } completion: resBlock];
}

- (void)searchMessagesByTypeWithType:(BMXMessage_ContentType)type refTime:(long long)refTime size:(unsigned long)size arg5:(BMXConversation_Direction)arg5 completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXMessageList:^BMXErrorCode(BMXMessageList *result) {
        return (BMXErrorCode)_wrap_BMXConversation_searchMessagesByType__SWIG_0(self.swigCPtr, (int)type, refTime, size, result.swigCPtr, (int)arg5);
    } completion: resBlock];
}

- (void)searchMessagesByTypeWithType:(BMXMessage_ContentType)type refTime:(long long)refTime size:(unsigned long)size completion:(void (^)(BMXMessageList *result, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXMessageList:^BMXErrorCode(BMXMessageList *result) {
        return (BMXErrorCode)_wrap_BMXConversation_searchMessagesByType__SWIG_1(self.swigCPtr, (int)type, refTime, size, result.swigCPtr);
    } completion: resBlock];
}

- (void)refreshConversationWithCompletion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXConversation_refreshConversation(self.swigCPtr);
    } completion: resBlock];
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXConversation((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXSDKConfig

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)initWithType:(BMXClientType)type vsn:(NSString*)vsn dataDir:(NSString*)dataDir cacheDir:(NSString*)cacheDir sDKVersion:(NSString*)SDKVersion pushCertName:(NSString*)pushCertName userAgent:(NSString*)userAgent deliveryAck:(BOOL)deliveryAck {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXSDKConfig__SWIG_0((int)type, vsn, dataDir, cacheDir, SDKVersion, pushCertName, userAgent, deliveryAck);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithType:(BMXClientType)type vsn:(NSString*)vsn dataDir:(NSString*)dataDir cacheDir:(NSString*)cacheDir sDKVersion:(NSString*)SDKVersion pushCertName:(NSString*)pushCertName userAgent:(NSString*)userAgent {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXSDKConfig__SWIG_1((int)type, vsn, dataDir, cacheDir, SDKVersion, pushCertName, userAgent);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithType:(BMXClientType)type vsn:(NSString*)vsn dataDir:(NSString*)dataDir cacheDir:(NSString*)cacheDir sDKVersion:(NSString*)SDKVersion pushCertName:(NSString*)pushCertName userAgent:(NSString*)userAgent appId:(NSString*)appId appSecret:(NSString*)appSecret deliveryAck:(BOOL)deliveryAck {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXSDKConfig__SWIG_2((int)type, vsn, dataDir, cacheDir, SDKVersion, pushCertName, userAgent, appId, appSecret, deliveryAck);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithType:(BMXClientType)type vsn:(NSString*)vsn dataDir:(NSString*)dataDir cacheDir:(NSString*)cacheDir sDKVersion:(NSString*)SDKVersion pushCertName:(NSString*)pushCertName userAgent:(NSString*)userAgent appId:(NSString*)appId appSecret:(NSString*)appSecret {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXSDKConfig__SWIG_3((int)type, vsn, dataDir, cacheDir, SDKVersion, pushCertName, userAgent, appId, appSecret);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (NSString*)getDataDir {
  {
    return _wrap_BMXSDKConfig_getDataDir(self.swigCPtr);
  }
}

- (NSString*)getCacheDir {
  {
    return _wrap_BMXSDKConfig_getCacheDir(self.swigCPtr);
  }
}

- (BMXClientType)getClientType {
   return (BMXClientType)_wrap_BMXSDKConfig_getClientType(self.swigCPtr); 
}

- (NSString*)getVsn {
  {
    return _wrap_BMXSDKConfig_getVsn(self.swigCPtr);
  }
}

- (NSString*)getSDKVersion {
  {
    return _wrap_BMXSDKConfig_getSDKVersion(self.swigCPtr);
  }
}

- (NSString*)getPushCertName {
  {
    return _wrap_BMXSDKConfig_getPushCertName(self.swigCPtr);
  }
}

- (void)setPushCertName:(NSString*)arg1 {
  _wrap_BMXSDKConfig_setPushCertName(self.swigCPtr, arg1);
}

- (NSString*)getUserAgent {
  {
    return _wrap_BMXSDKConfig_getUserAgent(self.swigCPtr);
  }
}

- (BOOL)carryUsernameInMessage {
   return _wrap_BMXSDKConfig_carryUsernameInMessage(self.swigCPtr); 
}

- (void)setCarryUsernameInMessage:(BOOL)arg1 {
  _wrap_BMXSDKConfig_setCarryUsernameInMessage(self.swigCPtr, arg1);
}

- (BOOL)enableDeliveryAck {
   return _wrap_BMXSDKConfig_enableDeliveryAck(self.swigCPtr); 
}

- (void)setEnableDeliveryAck:(BOOL)arg1 {
  _wrap_BMXSDKConfig_setEnableDeliveryAck(self.swigCPtr, arg1);
}

- (BMXLogLevel)getLogLevel {
   return (BMXLogLevel)_wrap_BMXSDKConfig_getLogLevel(self.swigCPtr); 
}

- (void)setLogLevel:(BMXLogLevel)arg1 {
  _wrap_BMXSDKConfig_setLogLevel(self.swigCPtr, (int)arg1);
}

- (BOOL)getConsoleOutput {
   return _wrap_BMXSDKConfig_getConsoleOutput(self.swigCPtr); 
}

- (void)setConsoleOutput:(BOOL)arg1 {
  _wrap_BMXSDKConfig_setConsoleOutput(self.swigCPtr, arg1);
}

- (void)setHostConfig:(BMXSDKConfigHostConfig*)config {
  _wrap_BMXSDKConfig_setHostConfig(self.swigCPtr, config.swigCPtr);
}

- (BMXSDKConfigHostConfig*)getHostConfig {
     void* cPtr = _wrap_BMXSDKConfig_getHostConfig(self.swigCPtr);
     BMXSDKConfigHostConfig* ret = nil;
     if(cPtr) {
        ret = [[BMXSDKConfigHostConfig alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BOOL)getLoadAllServerConversations {
   return _wrap_BMXSDKConfig_getLoadAllServerConversations(self.swigCPtr); 
}

- (void)setLoadAllServerConversations:(BOOL)enable {
  _wrap_BMXSDKConfig_setLoadAllServerConversations__SWIG_0(self.swigCPtr, enable);
}

- (void)setLoadAllServerConversations {
  _wrap_BMXSDKConfig_setLoadAllServerConversations__SWIG_1(self.swigCPtr);
}

- (NSString*)getDeviceUuid {
  {
    return _wrap_BMXSDKConfig_getDeviceUuid(self.swigCPtr);
  }
}

- (void)setDeviceUuid:(NSString*)uuid {
  _wrap_BMXSDKConfig_setDeviceUuid(self.swigCPtr, uuid);
}

- (NSString*)getDBCryptoKey {
  {
    return _wrap_BMXSDKConfig_getDBCryptoKey(self.swigCPtr);
  }
}

- (void)setDBCryptoKey:(NSString*)cryptoKey {
  _wrap_BMXSDKConfig_setDBCryptoKey(self.swigCPtr, cryptoKey);
}

- (BOOL)getVerifyCertificate {
   return _wrap_BMXSDKConfig_getVerifyCertificate(self.swigCPtr); 
}

- (void)setVerifyCertificate:(BOOL)verify {
  _wrap_BMXSDKConfig_setVerifyCertificate__SWIG_0(self.swigCPtr, verify);
}

- (void)setVerifyCertificate {
  _wrap_BMXSDKConfig_setVerifyCertificate__SWIG_1(self.swigCPtr);
}

- (BOOL)getEnableDNS {
   return _wrap_BMXSDKConfig_getEnableDNS(self.swigCPtr); 
}

- (void)setEnableDNS:(BOOL)enable {
  _wrap_BMXSDKConfig_setEnableDNS__SWIG_0(self.swigCPtr, enable);
}

- (void)setEnableDNS {
  _wrap_BMXSDKConfig_setEnableDNS__SWIG_1(self.swigCPtr);
}

- (NSString*)getUserDNSAddress {
  {
    return _wrap_BMXSDKConfig_getUserDNSAddress(self.swigCPtr);
  }
}

- (void)setUserDNSAddress:(NSString*)dns {
  _wrap_BMXSDKConfig_setUserDNSAddress(self.swigCPtr, dns);
}

- (NSString*)getAppID {
  {
    return _wrap_BMXSDKConfig_getAppID(self.swigCPtr);
  }
}

- (void)setAppID:(NSString*)appID {
  _wrap_BMXSDKConfig_setAppID(self.swigCPtr, appID);
}

- (NSString*)getAppSecret {
  {
    return _wrap_BMXSDKConfig_getAppSecret(self.swigCPtr);
  }
}

- (void)setAppSecret:(NSString*)appSecret {
  _wrap_BMXSDKConfig_setAppSecret(self.swigCPtr, appSecret);
}

- (BMXPushProviderType)getPushProviderType {
   return (BMXPushProviderType)_wrap_BMXSDKConfig_getPushProviderType(self.swigCPtr); 
}

- (void)setPushProviderType:(BMXPushProviderType)type {
  _wrap_BMXSDKConfig_setPushProviderType(self.swigCPtr, (int)type);
}

- (BMXPushEnvironmentType)getPushEnvironmentType {
   return (BMXPushEnvironmentType)_wrap_BMXSDKConfig_getPushEnvironmentType(self.swigCPtr); 
}

- (void)setEnvironmentType:(BMXPushEnvironmentType)type {
  _wrap_BMXSDKConfig_setEnvironmentType(self.swigCPtr, (int)type);
}

- (long long)getDebugLogReceiverId {
   return _wrap_BMXSDKConfig_getDebugLogReceiverId(self.swigCPtr); 
}

- (void)setDebugLogReceiverId:(long long)uid {
  _wrap_BMXSDKConfig_setDebugLogReceiverId(self.swigCPtr, uid);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXSDKConfig((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXNetworkListener

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (void)onNetworkChangedWithType:(BMXNetworkType)type reconnect:(BOOL)reconnect {
  _wrap_BMXNetworkListener_onNetworkChanged(self.swigCPtr, (int)type, reconnect);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXNetworkListener((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXChatService
{
    ChatServiceListener *chatListener;
}

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
    if (!chatListener) {
      chatListener = new ChatServiceListener();
    }
    if (chatListener) {
      BMXChatServiceListener * listener = [[[BMXChatServiceListener alloc] init] initWithCptr:chatListener swigOwnCObject:NO];
      [self addChatListenerWithListener: listener];
    }
  }
    
  return self;
}

- (void)sendMessageWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_sendMessage(self.swigCPtr, msg.swigCPtr);
}

- (void)resendMessageWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_resendMessage(self.swigCPtr, msg.swigCPtr);
}

- (void)recallMessageWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_recallMessage(self.swigCPtr, msg.swigCPtr);
}

- (BMXErrorCode)forwardMessageWithList:(BMXMessageList*)list to:(BMXConversation*)to newMsg:(BMXMessage*)newMsg {
   return (BMXErrorCode)_wrap_BMXChatService_forwardMessage__SWIG_0(self.swigCPtr, list.swigCPtr, to.swigCPtr, newMsg.swigCPtr); 
}

- (void)forwardMessageWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_forwardMessage__SWIG_1(self.swigCPtr, msg.swigCPtr);
}

- (void)ackMessageWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_ackMessage(self.swigCPtr, msg.swigCPtr);
}

- (void)ackMessageDeliveredWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_ackMessageDelivered(self.swigCPtr, msg.swigCPtr);
}

- (void)ackPlayMessageWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_ackPlayMessage(self.swigCPtr, msg.swigCPtr);
}

- (void)readCancelWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_readCancel(self.swigCPtr, msg.swigCPtr);
}

- (void)readAllMessageWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_readAllMessage(self.swigCPtr, msg.swigCPtr);
}

- (void)removeMessageWithMsg:(BMXMessage*)msg synchronize:(BOOL)synchronize {
  _wrap_BMXChatService_removeMessage__SWIG_0(self.swigCPtr, msg.swigCPtr, synchronize);
}

- (void)removeMessageWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_removeMessage__SWIG_1(self.swigCPtr, msg.swigCPtr);
}

- (void)downloadThumbnailWithMsg:(BMXMessage*)msg strategy:(BMXChatService_ThumbnailStrategy)strategy {
  _wrap_BMXChatService_downloadThumbnail__SWIG_0(self.swigCPtr, msg.swigCPtr, (int)strategy);
}

- (void)downloadThumbnailWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_downloadThumbnail__SWIG_1(self.swigCPtr, msg.swigCPtr);
}

- (void)downloadAttachmentWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_downloadAttachment(self.swigCPtr, msg.swigCPtr);
}

- (void)downloadAttachmentByUrlWithMsgId:(long long)msgId url:(NSString*)url path:(NSString*)path {
  _wrap_BMXChatService_downloadAttachmentByUrl(self.swigCPtr, msgId, url, path);
}

- (void)cancelUploadAttachmentWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_cancelUploadAttachment(self.swigCPtr, msg.swigCPtr);
}

- (void)cancelDownloadAttachmentWithMsg:(BMXMessage*)msg {
  _wrap_BMXChatService_cancelDownloadAttachment(self.swigCPtr, msg.swigCPtr);
}

- (int)transferingNum {
   return _wrap_BMXChatService_transferingNum(self.swigCPtr); 
}

- (BMXErrorCode)insertMessagesWithList:(BMXMessageList*)list {
   return (BMXErrorCode)_wrap_BMXChatService_insertMessages(self.swigCPtr, list.swigCPtr); 
}

- (BMXMessage*)getMessage:(long long)msgId {
     void* cPtr = _wrap_BMXChatService_getMessage(self.swigCPtr, msgId);
     BMXMessage* ret = nil;
     if(cPtr) {
        ret = [[BMXMessage alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)deleteConversationWithConversationId:(long long)conversationId synchronize:(BOOL)synchronize {
  _wrap_BMXChatService_deleteConversation__SWIG_0(self.swigCPtr, conversationId, synchronize);
}

- (void)deleteConversationWithConversationId:(long long)conversationId {
  _wrap_BMXChatService_deleteConversation__SWIG_1(self.swigCPtr, conversationId);
}

- (BMXConversation*)openConversationWithConversationId:(long long)conversationId type:(BMXConversation_Type)type createIfNotExist:(BOOL)createIfNotExist {
     void* cPtr = _wrap_BMXChatService_openConversation__SWIG_0(self.swigCPtr, conversationId, (int)type, createIfNotExist);
     BMXConversation* ret = nil;
     if(cPtr) {
        ret = [[BMXConversation alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXConversation*)openConversationWithConversationId:(long long)conversationId type:(BMXConversation_Type)type {
     void* cPtr = _wrap_BMXChatService_openConversation__SWIG_1(self.swigCPtr, conversationId, (int)type);
     BMXConversation* ret = nil;
     if(cPtr) {
        ret = [[BMXConversation alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (NSString*)attachmentDir {
  {
    return _wrap_BMXChatService_attachmentDir(self.swigCPtr);
  }
}

- (NSString*)attachmentDirForConversationWithConversationId:(long long)conversationId {
  {
    return _wrap_BMXChatService_attachmentDirForConversation(self.swigCPtr, conversationId);
  }
}

- (BMXConversationList*)getAllConversations {
     void* cPtr = _wrap_BMXChatService_getAllConversations(self.swigCPtr);
     BMXConversationList* ret = nil;
     if(cPtr) {
        ret = [[BMXConversationList alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (int)getAllConversationsUnreadCount {
   return _wrap_BMXChatService_getAllConversationsUnreadCount(self.swigCPtr); 
}

- (BMXErrorCode)retrieveHistoryMessagesWithConversation:(BMXConversation*)conversation refMsgId:(long long)refMsgId size:(unsigned long)size result:(BMXMessageList*)result {
   return (BMXErrorCode)_wrap_BMXChatService_retrieveHistoryMessages(self.swigCPtr, conversation.swigCPtr, refMsgId, size, result.swigCPtr); 
}

- (BMXErrorCode)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageListList*)result arg5:(BMXConversation_Direction)arg5 {
   return (BMXErrorCode)_wrap_BMXChatService_searchMessagesByKeyWords__SWIG_0(self.swigCPtr, keywords, refTime, size, result.swigCPtr, (int)arg5); 
}

- (BMXErrorCode)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size result:(BMXMessageListList*)result {
   return (BMXErrorCode)_wrap_BMXChatService_searchMessagesByKeyWords__SWIG_1(self.swigCPtr, keywords, refTime, size, result.swigCPtr); 
}

- (BMXErrorCode)getGroupAckMessageUserIdList:(BMXMessage*)msg groupMemberIdList:(ListOfLongLong*)groupMemberIdList {
   return (BMXErrorCode)_wrap_BMXChatService_getGroupAckMessageUserIdList(self.swigCPtr, msg.swigCPtr, groupMemberIdList.swigCPtr); 
}

- (BMXErrorCode)getGroupAckMessageUnreadUserIdList:(BMXMessage*)msg groupMemberIdList:(ListOfLongLong*)groupMemberIdList {
   return (BMXErrorCode)_wrap_BMXChatService_getGroupAckMessageUnreadUserIdList(self.swigCPtr, msg.swigCPtr, groupMemberIdList.swigCPtr); 
}

- (BMXErrorCode)getGroupPlayAckMessageUserIdList:(BMXMessage*)msg groupMemberIdList:(ListOfLongLong*)groupMemberIdList {
   return (BMXErrorCode)_wrap_BMXChatService_getGroupPlayAckMessageUserIdList(self.swigCPtr, msg.swigCPtr, groupMemberIdList.swigCPtr); 
}

- (BMXErrorCode)getGroupUnPlayAckMessageUserIdList:(BMXMessage*)msg groupMemberIdList:(ListOfLongLong*)groupMemberIdList {
   return (BMXErrorCode)_wrap_BMXChatService_getGroupUnPlayAckMessageUserIdList(self.swigCPtr, msg.swigCPtr, groupMemberIdList.swigCPtr); 
}

- (void)sendMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_sendMessage(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)resendMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_resendMessage(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)recallMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_recallMessage(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)forwardMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock{
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_forwardMessage__SWIG_1(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)ackMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_ackMessage(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)ackMessageDeliveredWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_ackMessageDelivered(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)ackPlayMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_ackPlayMessage(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)readCancelWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_readCancel(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)readAllMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_readAllMessage(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)removeMessageWithMsg:(BMXMessage*)msg synchronize:(BOOL)synchronize completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_removeMessage__SWIG_0(self.swigCPtr, msg.swigCPtr, synchronize);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)removeMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_removeMessage__SWIG_1(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)downloadThumbnailWithMsg:(BMXMessage*)msg strategy:(BMXChatService_ThumbnailStrategy)strategy completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_downloadThumbnail__SWIG_0(self.swigCPtr, msg.swigCPtr, (int)strategy);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)downloadThumbnailWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_downloadThumbnail__SWIG_1(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)downloadAttachmentWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_downloadAttachment(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)downloadAttachmentByUrlWithMsgId:(long long)msgId url:(NSString*)url path:(NSString*)path completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_downloadAttachmentByUrl(self.swigCPtr, msgId, url, path);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)cancelUploadAttachmentWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_cancelUploadAttachment(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)cancelDownloadAttachmentWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_cancelDownloadAttachment(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)insertMessagesWithList:(BMXMessageList*)list completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXChatService_insertMessages(self.swigCPtr, list.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)deleteConversationWithConversationId:(long long)conversationId synchronize:(BOOL)synchronize completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_deleteConversation__SWIG_0(self.swigCPtr, conversationId, synchronize);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)deleteConversationWithConversationId:(long long)conversationId completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXChatService_deleteConversation__SWIG_1(self.swigCPtr, conversationId);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)getAllConversationsWithCompletion:(void (^)(BMXConversationList *res)) resBlock {
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        BMXConversationList *list = nil;
        void* cPtr = _wrap_BMXChatService_getAllConversations(self.swigCPtr);
        if(cPtr) {
          list = [[BMXConversationList alloc] initWithCptr:cPtr swigOwnCObject:NO];
          #if !__has_feature(objc_arc)
          [ret autorelease];
          #endif
        }

        dispatch_async(dispatch_get_main_queue(), ^{
            resBlock(list);
        });
    });

}

- (void)retrieveHistoryMessagesWithConversation:(BMXConversation*)conversation refMsgId:(long long)refMsgId size:(unsigned long)size completion:(void (^)(BMXMessageList *res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXMessageList:^BMXErrorCode(BMXMessageList *res) {
        return (BMXErrorCode)_wrap_BMXChatService_retrieveHistoryMessages(self.swigCPtr, conversation.swigCPtr, refMsgId, size, res.swigCPtr);
    } completion: resBlock];
}

- (void)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size arg5:(BMXConversation_Direction)arg5 completion:(void (^)(BMXMessageListList *res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXMessageListList:^BMXErrorCode(BMXMessageListList *res) {
        return (BMXErrorCode)_wrap_BMXChatService_searchMessagesByKeyWords__SWIG_0(self.swigCPtr, keywords, refTime, size, res.swigCPtr, (int)arg5);
    } completion: resBlock];
}

- (void)searchMessagesByKeyWordsWithKeywords:(NSString*)keywords refTime:(long long)refTime size:(unsigned long)size completion:(void (^)(BMXMessageListList *res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXMessageListList:^BMXErrorCode(BMXMessageListList *res) {
        return (BMXErrorCode)_wrap_BMXChatService_searchMessagesByKeyWords__SWIG_1(self.swigCPtr, keywords, refTime, size, res.swigCPtr);
    } completion: resBlock];
}

- (void)getGroupAckMessageUserIdList:(BMXMessage*)msg completion:(void(^)(ListOfLongLong *res, BMXError *error)) resBlock {
    [BMXAsync asyncWithListOfLongLong:^BMXErrorCode(ListOfLongLong *res) {
        return (BMXErrorCode)_wrap_BMXChatService_getGroupAckMessageUserIdList(self.swigCPtr, msg.swigCPtr, res.swigCPtr);
    } completion:resBlock];
}

- (void)getGroupAckMessageUnreadUserIdList:(BMXMessage*)msg completion:(void(^)(ListOfLongLong *res, BMXError *error)) resBlock {
    [BMXAsync asyncWithListOfLongLong:^BMXErrorCode(ListOfLongLong *res) {
        return (BMXErrorCode)_wrap_BMXChatService_getGroupAckMessageUnreadUserIdList(self.swigCPtr, msg.swigCPtr, res.swigCPtr);
    } completion:resBlock];
}

- (void)getGroupPlayAckMessageUserIdList:(BMXMessage*)msg completion:(void(^)(ListOfLongLong *res, BMXError *error)) resBlock {
    [BMXAsync asyncWithListOfLongLong:^BMXErrorCode(ListOfLongLong *res) {
        return (BMXErrorCode)_wrap_BMXChatService_getGroupPlayAckMessageUserIdList(self.swigCPtr, msg.swigCPtr, res.swigCPtr);
    } completion:resBlock];
}

- (void)getGroupUnPlayAckMessageUserIdList:(BMXMessage*)msg completion:(void(^)(ListOfLongLong *res, BMXError *error)) resBlock {
    [BMXAsync asyncWithListOfLongLong:^BMXErrorCode(ListOfLongLong *res) {
        return (BMXErrorCode)_wrap_BMXChatService_getGroupUnPlayAckMessageUserIdList(self.swigCPtr, msg.swigCPtr, res.swigCPtr);
    } completion:resBlock];
}

- (void)addChatListenerWithListener:(BMXChatServiceListener*)listener {
  _wrap_BMXChatService_addChatListener(self.swigCPtr, listener.swigCPtr);
}

- (void)removeChatListenerWithListener:(BMXChatServiceListener*)listener {
  _wrap_BMXChatService_removeChatListener(self.swigCPtr, listener.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXChatService((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}


- (void)addDelegate:(id<BMXChatServiceProtocol>)aDelegate {
    [self addDelegate:aDelegate delegateQueue:nil];
}

- (void)addDelegate:(id)aDelegate delegateQueue:(dispatch_queue_t)aQueue {
    if ([aDelegate conformsToProtocol:@protocol(BMXChatServiceProtocol)]) {
        chatListener->addDelegate(aDelegate, aQueue);
    }
}


- (void)removeDelegate:(id)aDelegate {
    if (aDelegate == nil) {
        return;
    }
    if ([aDelegate conformsToProtocol:@protocol(BMXChatServiceProtocol)]) {
        chatListener->removeDelegate(aDelegate);
    }
}

- (void)addChatListener:(id<BMXChatServiceProtocol>)listener {
    if (listener == nil) {
        return;
    }
    
    if ([listener conformsToProtocol:@protocol(BMXChatServiceProtocol)]) {
        chatListener->addDelegate(listener, nil);
    }
}

- (void)removeChatListener:(id<BMXChatServiceProtocol>)listener {
    if (listener == nil) {
        return;
    }
    chatListener->removeDelegate(listener);
}

- (void)removeChatListener {
    if (chatListener) {
      BMXChatServiceListener * listener = [[[BMXChatServiceListener alloc] init] initWithCptr:chatListener swigOwnCObject:NO];
      [self removeChatListenerWithListener: listener];
    }
}


@end


@implementation BMXChatServiceListener

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXChatServiceListener();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)onStatusChangedWithMsg:(BMXMessage*)msg error:(BMXErrorCode)error {
  _wrap_BMXChatServiceListener_onStatusChanged(self.swigCPtr, msg.swigCPtr, (int)error);
}

- (void)onAttachmentUploadProgressChangedWithMsg:(BMXMessage*)msg percent:(int)percent {
  _wrap_BMXChatServiceListener_onAttachmentUploadProgressChanged(self.swigCPtr, msg.swigCPtr, percent);
}

- (void)onRecallStatusChangedWithMsg:(BMXMessage*)msg error:(BMXErrorCode)error {
  _wrap_BMXChatServiceListener_onRecallStatusChanged(self.swigCPtr, msg.swigCPtr, (int)error);
}

- (void)onReceiveWithList:(BMXMessageList*)list {
  _wrap_BMXChatServiceListener_onReceive(self.swigCPtr, list.swigCPtr);
}

- (void)onReceiveCommandMessagesWithList:(BMXMessageList*)list {
  _wrap_BMXChatServiceListener_onReceiveCommandMessages(self.swigCPtr, list.swigCPtr);
}

- (void)onReceiveSystemMessagesWithList:(BMXMessageList*)list {
  _wrap_BMXChatServiceListener_onReceiveSystemMessages(self.swigCPtr, list.swigCPtr);
}

- (void)onReceiveReadAcksWithList:(BMXMessageList*)list {
  _wrap_BMXChatServiceListener_onReceiveReadAcks(self.swigCPtr, list.swigCPtr);
}

- (void)onReceiveDeliverAcksWithList:(BMXMessageList*)list {
  _wrap_BMXChatServiceListener_onReceiveDeliverAcks(self.swigCPtr, list.swigCPtr);
}

- (void)onReceiveRecallMessagesWithList:(BMXMessageList*)list {
  _wrap_BMXChatServiceListener_onReceiveRecallMessages(self.swigCPtr, list.swigCPtr);
}

- (void)onReceiveReadCancelsWithList:(BMXMessageList*)list {
  _wrap_BMXChatServiceListener_onReceiveReadCancels(self.swigCPtr, list.swigCPtr);
}

- (void)onReceiveReadAllMessagesWithList:(BMXMessageList*)list {
  _wrap_BMXChatServiceListener_onReceiveReadAllMessages(self.swigCPtr, list.swigCPtr);
}

- (void)onReceiveDeleteMessagesWithList:(BMXMessageList*)list {
  _wrap_BMXChatServiceListener_onReceiveDeleteMessages(self.swigCPtr, list.swigCPtr);
}

- (void)onReceivePlayAcksWithList:(BMXMessageList*)list {
  _wrap_BMXChatServiceListener_onReceivePlayAcks(self.swigCPtr, list.swigCPtr);
}

- (void)onAttachmentStatusChangedWithMsg:(BMXMessage*)msg error:(BMXErrorCode)error percent:(int)percent {
  _wrap_BMXChatServiceListener_onAttachmentStatusChanged(self.swigCPtr, msg.swigCPtr, (int)error, percent);
}

- (void)onAttachmentDownloadByUrlStatusChangedWithMsgId:(long long)msgId error:(BMXErrorCode)error percent:(int)percent {
  _wrap_BMXChatServiceListener_onAttachmentDownloadByUrlStatusChanged(self.swigCPtr, msgId, (int)error, percent);
}

- (void)onRetrieveHistoryMessagesWithConversation:(BMXConversation*)conversation {
  _wrap_BMXChatServiceListener_onRetrieveHistoryMessages(self.swigCPtr, conversation.swigCPtr);
}

- (void)onLoadAllConversation {
  _wrap_BMXChatServiceListener_onLoadAllConversation(self.swigCPtr);
}

- (void)onConversationCreateWithConversation:(BMXConversation*)conversation msg:(BMXMessage*)msg {
  _wrap_BMXChatServiceListener_onConversationCreate(self.swigCPtr, conversation.swigCPtr, msg.swigCPtr);
}

- (void)onConversationDeleteWithConversationId:(long long)conversationId error:(BMXErrorCode)error {
  _wrap_BMXChatServiceListener_onConversationDelete(self.swigCPtr, conversationId, (int)error);
}

- (void)onTotalUnreadCountChangedWithUnreadCount:(int)unreadCount {
  _wrap_BMXChatServiceListener_onTotalUnreadCountChanged(self.swigCPtr, unreadCount);
}

- (void)registerChatServiceWithService:(BMXChatService*)service {
  _wrap_BMXChatServiceListener_registerChatService(self.swigCPtr, service.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXChatServiceListener((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end

#include "bmx_push_service_listener.h"

class PushServiceListener : public floo::BMXPushServiceListener {
public:
    /**
     * @brief Push初始化完成通知。
     * @param bmxToken 当前push使用bmxToken
     **/
    virtual void onPushStart(const std::string bmxToken) override;
    /**
     * @brief Push功能停止通知。
     **/
    virtual void onPushStop() override;

    /**
     * @brief Push初始化完成后获取推送证书。
     * @param cert 从服务器获取的推送证书
     **/
    virtual void onCertRetrieved(const std::string cert) override;

    /**
     * @brief 设置用户推送成功回调。
     * @param operationId 操作id
     **/
    virtual void onSetTags(const std::string& operationId) override;

    /**
     * @brief 获取用户推送成功回调。
     * @param operationId 操作id
     **/
    virtual void onGetTags(const std::string& operationId) override;

    /**
     * @brief 删除用户推送成功回调。
     * @param operationId 操作id
     **/
    virtual void onDeleteTags(const std::string& operationId) override;
    /**
     * @brief 清空用户推送成功回调。
     * @param operationId 操作id
     **/
    virtual void onClearTags(const std::string& operationId) override;
    /**
     * @brief 接收到新的Push通知。
     * @param list Push通知列表
     **/
    virtual void onReceivePush(const floo::BMXMessageList& list) override;
    /**
     * @brief 发送Push上行消息状态变化通知。
     * @param msg 发生状态变化的上行消息
     * @param error 状态错误码
     **/
    virtual void onStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error) override;
    //delegate
    virtual void addDelegate(id<BMXPushServiceProtocol> delegate, dispatch_queue_t queue);
    virtual void removeDelegate(id<BMXPushServiceProtocol> delegate);
    BMXDelegatesContainer<BMXPushServiceProtocol> *container;
        //
    private:
        NSObject *containerLock;
};

/**
 * @brief Push初始化完成通知。
 * @param bmxToken 当前push使用bmxToken
 **/
void PushServiceListener ::  onPushStart(const std::string bmxToken) {
    if (container) {
        [container pushStartDidFinished:[BMXStringUtil stdToNSString:bmxToken]];
    }
}

/**
 * @brief Push功能停止通知。
 **/
void PushServiceListener ::  onPushStop() {
    if (container) {
        [container pushStartDidStopped];
    }
}

/**
 * @brief Push初始化完成后获取推送证书。
 * @param cert 从服务器获取的推送证书
 **/
void PushServiceListener ::  onCertRetrieved(const std::string cert) {
    if (container) {
        [container certRetrieved:[BMXStringUtil stdToNSString:cert]];
    }
}

/**
 * @brief 设置用户推送成功回调。
 * @param operationId 操作id
 **/
void PushServiceListener ::  onSetTags(const std::string& operationId) {
    if (container) {
        [container setTagsDidFinished:[BMXStringUtil stdToNSString:operationId]];
    }
}

/**
 * @brief 获取用户推送成功回调。
 * @param operationId 操作id
 **/
void PushServiceListener ::  onGetTags(const std::string& operationId) {
    if (container) {
        [container getTagsDidFinished:[BMXStringUtil stdToNSString:operationId]];
    }
}

/**
 * @brief 删除用户推送成功回调。
 * @param operationId 操作id
 **/
void PushServiceListener ::  onDeleteTags(const std::string& operationId) {
    if (container ) {
        [container deleteTagsDidFinished:[BMXStringUtil stdToNSString:operationId]];
    }
}

/**
 * @brief 清空用户推送成功回调。
 * @param operationId 操作id
 **/
void PushServiceListener ::  onClearTags(const std::string& operationId) {
    if (container) {
        [container clearedTags:[BMXStringUtil stdToNSString:operationId]];
    }
}

/**
 * @brief 接收到新的Push通知。
 * @param list Push通知列表
 **/
void PushServiceListener ::  onReceivePush(const floo::BMXMessageList& list) {
    if (container && list.size()) {
        [container receivedPush:BMXMessageList2NSArray(list)];
    }
}

/**
 * @brief 发送Push上行消息状态变化通知。
 * @param msg 发生状态变化的上行消息
 * @param error 状态错误码
 **/
void PushServiceListener ::  onStatusChanged(floo::BMXMessagePtr msg, floo::BMXErrorCode error) {
    BMXMessage2Void(msg)
    BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
    if (container) {
        [container pushMessageStatusChanged:message error: [BMXError errorCode:(BMXErrorCode)error]];
    }
}
        


//delegate
    
void PushServiceListener ::  addDelegate(id<BMXPushServiceProtocol> delegate, dispatch_queue_t queue) {
    if (!container) {
        container = [(BMXDelegatesContainer<BMXPushServiceProtocol> *)[BMXDelegatesContainer alloc] init];
    }
    
    if (!containerLock) {
        containerLock = [[NSObject alloc] init];
    }
    
    if (delegate) {
        if (!queue) {
            queue = dispatch_get_main_queue();
        }
        
        @synchronized (containerLock) {
            [container addDelegate:delegate delegateQueue:queue];
        }
    }


}
    
void PushServiceListener ::  removeDelegate(id<BMXPushServiceProtocol> delegate) {

        if (container && delegate) {
            if (!containerLock) {
                containerLock = [[NSObject alloc] init];
            }
            
            @synchronized (containerLock) {
                [container removeDelegate:delegate];
            }
            
        }
    }
    


@implementation BMXPushService
{
    PushServiceListener *pushListener;
}

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  if (!pushListener) {
      pushListener = new PushServiceListener();
  }
  if (pushListener) {
    BMXPushServiceListener * listener = [[[BMXPushServiceListener alloc] init] initWithCptr:pushListener swigOwnCObject:NO];
    [self addPushListenerWithListener: listener];
  }
 
  return self;
}

- (BMXErrorCode)startWithAlias:(NSString*)alias bmxToken:(NSString*)bmxToken {
   return (BMXErrorCode)_wrap_BMXPushService_start__SWIG_0(self.swigCPtr, alias, bmxToken); 
}

- (BMXErrorCode)startWithAlias:(NSString*)alias {
   return (BMXErrorCode)_wrap_BMXPushService_start__SWIG_1(self.swigCPtr, alias); 
}

- (BMXErrorCode)start {
   return (BMXErrorCode)_wrap_BMXPushService_start__SWIG_2(self.swigCPtr); 
}

- (BMXErrorCode)stop {
   return (BMXErrorCode)_wrap_BMXPushService_stop(self.swigCPtr); 
}

- (BMXErrorCode)resume {
   return (BMXErrorCode)_wrap_BMXPushService_resume(self.swigCPtr); 
}

- (BMXErrorCode)unbindAliasWithAlias:(NSString*)alias {
   return (BMXErrorCode)_wrap_BMXPushService_unbindAlias(self.swigCPtr, alias); 
}

- (NSString*)getToken {
  {
    return _wrap_BMXPushService_getToken(self.swigCPtr);
  }
}

- (NSString*)getCert {
  {
    return _wrap_BMXPushService_getCert(self.swigCPtr);
  }
}

- (BMXPushService_PushSdkStatus)status {
   return (BMXPushService_PushSdkStatus)_wrap_BMXPushService_status(self.swigCPtr); 
}

- (BMXErrorCode)bindDeviceTokenWithToken:(NSString*)token {
   return (BMXErrorCode)_wrap_BMXPushService_bindDeviceToken(self.swigCPtr, token); 
}

- (BMXErrorCode)bindVoipTokenWithToken:(NSString*)token {
   return (BMXErrorCode)_wrap_BMXPushService_bindVoipToken(self.swigCPtr, token); 
}

- (BMXErrorCode)getPushProfile:(BMXPushUserProfile*)pushProfile forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXPushService_getPushProfile(self.swigCPtr, pushProfile.swigCPtr, forceRefresh); 
}

- (BMXErrorCode)setTags:(TagList*)tags operationId:(NSString*)operationId {
   return (BMXErrorCode)_wrap_BMXPushService_setTags(self.swigCPtr, tags.swigCPtr, operationId); 
}

- (BMXErrorCode)getTags:(TagList*)tags operationId:(NSString*)operationId {
   return (BMXErrorCode)_wrap_BMXPushService_getTags(self.swigCPtr, tags.swigCPtr, operationId); 
}

- (BMXErrorCode)deleteTagsWithTags:(TagList*)tags operationId:(NSString*)operationId {
   return (BMXErrorCode)_wrap_BMXPushService_deleteTags(self.swigCPtr, tags.swigCPtr, operationId); 
}

- (BMXErrorCode)clearTagsWithOperationId:(NSString*)operationId {
   return (BMXErrorCode)_wrap_BMXPushService_clearTags(self.swigCPtr, operationId); 
}

- (BMXErrorCode)setBadge:(int)count {
   return (BMXErrorCode)_wrap_BMXPushService_setBadge(self.swigCPtr, count); 
}

- (BMXErrorCode)setPushMode:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXPushService_setPushMode__SWIG_0(self.swigCPtr, enable); 
}

- (BMXErrorCode)setPushMode {
   return (BMXErrorCode)_wrap_BMXPushService_setPushMode__SWIG_1(self.swigCPtr); 
}

- (BMXErrorCode)setPushTime:(int)startHour endHour:(int)endHour {
   return (BMXErrorCode)_wrap_BMXPushService_setPushTime(self.swigCPtr, startHour, endHour); 
}

- (BMXErrorCode)setSilenceTime:(int)startHour endHour:(int)endHour {
   return (BMXErrorCode)_wrap_BMXPushService_setSilenceTime(self.swigCPtr, startHour, endHour); 
}

- (BMXErrorCode)setRunBackgroundMode:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXPushService_setRunBackgroundMode__SWIG_0(self.swigCPtr, enable); 
}

- (BMXErrorCode)setRunBackgroundMode {
   return (BMXErrorCode)_wrap_BMXPushService_setRunBackgroundMode__SWIG_1(self.swigCPtr); 
}

- (BMXErrorCode)setGeoFenceMode:(BOOL)enable isAllow:(BOOL)isAllow {
   return (BMXErrorCode)_wrap_BMXPushService_setGeoFenceMode__SWIG_0(self.swigCPtr, enable, isAllow); 
}

- (BMXErrorCode)setGeoFenceMode:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXPushService_setGeoFenceMode__SWIG_1(self.swigCPtr, enable); 
}

- (BMXErrorCode)setGeoFenceMode {
   return (BMXErrorCode)_wrap_BMXPushService_setGeoFenceMode__SWIG_2(self.swigCPtr); 
}

- (void)clearNotificationWithNotificationId:(long long)notificationId {
  _wrap_BMXPushService_clearNotification(self.swigCPtr, notificationId);
}

- (void)clearAllNotifications {
  _wrap_BMXPushService_clearAllNotifications(self.swigCPtr);
}

- (void)sendMessageWithContent:(NSString*)content {
  _wrap_BMXPushService_sendMessage(self.swigCPtr, content);
}

- (BMXErrorCode)loadLocalPushMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size result:(BMXMessageList*)result arg4:(BMXPushService_PushDirection)arg4 {
   return (BMXErrorCode)_wrap_BMXPushService_loadLocalPushMessages__SWIG_0(self.swigCPtr, refMsgId, size, result.swigCPtr, (int)arg4); 
}

- (BMXErrorCode)loadLocalPushMessagesWithRefMsgId:(long long)refMsgId size:(unsigned long)size result:(BMXMessageList*)result {
   return (BMXErrorCode)_wrap_BMXPushService_loadLocalPushMessages__SWIG_1(self.swigCPtr, refMsgId, size, result.swigCPtr); 
}

- (void)addPushListenerWithListener:(BMXPushServiceListener*)listener {
  _wrap_BMXPushService_addPushListener(self.swigCPtr, listener.swigCPtr);
}

- (void)removePushListenerWithListener:(BMXPushServiceListener*)listener {
  _wrap_BMXPushService_removePushListener(self.swigCPtr, listener.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXPushService((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXPushServiceListener

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXPushServiceListener();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)onPushStartWithBmxToken:(NSString*)bmxToken {
  _wrap_BMXPushServiceListener_onPushStart(self.swigCPtr, bmxToken);
}

- (void)onPushStop {
  _wrap_BMXPushServiceListener_onPushStop(self.swigCPtr);
}

- (void)onCertRetrievedWithCert:(NSString*)cert {
  _wrap_BMXPushServiceListener_onCertRetrieved(self.swigCPtr, cert);
}

- (void)onSetTagsWithOperationId:(NSString*)operationId {
  _wrap_BMXPushServiceListener_onSetTags(self.swigCPtr, operationId);
}

- (void)onGetTagsWithOperationId:(NSString*)operationId {
  _wrap_BMXPushServiceListener_onGetTags(self.swigCPtr, operationId);
}

- (void)onDeleteTagsWithOperationId:(NSString*)operationId {
  _wrap_BMXPushServiceListener_onDeleteTags(self.swigCPtr, operationId);
}

- (void)onClearTagsWithOperationId:(NSString*)operationId {
  _wrap_BMXPushServiceListener_onClearTags(self.swigCPtr, operationId);
}

- (void)onReceivePushWithList:(BMXMessageList*)list {
  _wrap_BMXPushServiceListener_onReceivePush(self.swigCPtr, list.swigCPtr);
}

- (void)onStatusChangedWithMsg:(BMXMessage*)msg error:(BMXErrorCode)error {
  _wrap_BMXPushServiceListener_onStatusChanged(self.swigCPtr, msg.swigCPtr, (int)error);
}

- (void)registerPushServiceWithService:(BMXPushService*)service {
  _wrap_BMXPushServiceListener_registerPushService(self.swigCPtr, service.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXPushServiceListener((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end

static BMXClient *sharedClient = nil;

@implementation BMXClient

@synthesize userService = _userService;
@synthesize chatService = _chatService;
@synthesize rosterService = _rosterService;
@synthesize groupService = _groupService;
@synthesize pushService = _pushService;
@synthesize rtcService = _rtcService;

+ (instancetype)sharedClient {
    return sharedClient;
}

+ (BMXClient*)createWithConfig:(BMXSDKConfig*)config {
     void* cPtr = _wrap_BMXClient_create(config.swigCPtr);
     BMXClient* ret = nil;
     if(cPtr) {
        ret = [[BMXClient alloc] initWithCptr:cPtr swigOwnCObject:NO];
         sharedClient = ret;
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXUserService*)userService {
    if (_userService == nil) {
        _userService = [self getUserServiceImpl];
    }
    return _userService;
}

- (BMXChatService*)chatService {
    if (_chatService == nil) {
        _chatService = [self getChatServiceImpl];
    }
    return _chatService;
}

- (BMXRosterService*)rosterService {

    if (_rosterService == nil) {
        _rosterService = [self getRosterServiceImpl];
    }
    return _rosterService;
}

- (BMXGroupService*)groupService {
    if (_groupService == nil) {
        _groupService = [self getGroupServiceImpl];
    }
    return _groupService;
}

- (BMXPushService*)pushService {
    if (_pushService == nil) {
        _pushService = [self getPushServiceImpl];
    }
    return _pushService;
}

- (BMXRTCService*)rtcService {
    if (_rtcService == nil) {
        _rtcService = [self getRTCServiceImpl];
    }
    return _rtcService;
}

- (BMXSDKConfig*)getSDKConfig {
     void* cPtr = _wrap_BMXClient_getSDKConfig(self.swigCPtr);
     BMXSDKConfig* ret = nil;
     if(cPtr) {
        ret = [[BMXSDKConfig alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXUserService*)getUserServiceImpl {
     void* cPtr = _wrap_BMXClient_getUserService(self.swigCPtr);
     BMXUserService* ret = nil;
     if(cPtr) {
        ret = [[BMXUserService alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXChatService*)getChatServiceImpl {
     void* cPtr = _wrap_BMXClient_getChatService(self.swigCPtr);
     BMXChatService* ret = nil;
     if(cPtr) {
        ret = [[BMXChatService alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXGroupService*)getGroupServiceImpl {
     void* cPtr = _wrap_BMXClient_getGroupService(self.swigCPtr);
     BMXGroupService* ret = nil;
     if(cPtr) {
        ret = [[BMXGroupService alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXRosterService*)getRosterServiceImpl {
     void* cPtr = _wrap_BMXClient_getRosterService(self.swigCPtr);
     BMXRosterService* ret = nil;
     if(cPtr) {
        ret = [[BMXRosterService alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXPushService*)getPushServiceImpl {
     void* cPtr = _wrap_BMXClient_getPushService(self.swigCPtr);
     BMXPushService* ret = nil;
     if(cPtr) {
        ret = [[BMXPushService alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXRTCService*)getRTCServiceImpl {
     void* cPtr = _wrap_BMXClient_getRTCService(self.swigCPtr);
     BMXRTCService* ret = nil;
     if(cPtr) {
        ret = [[BMXRTCService alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}
- (BMXErrorCode)signUpNewUserWithUsername:(NSString*)username password:(NSString*)password bmxUserProfilePtr:(BMXUserProfile*)bmxUserProfilePtr {
    void *tmp = nullptr;
    BMXErrorCode err = (BMXErrorCode)_wrap_BMXClient_signUpNewUser(self.swigCPtr, username, password, &tmp);
    bmxUserProfilePtr.swigCPtr = tmp;
    return err;
}

- (BMXErrorCode)signInByNameWithName:(NSString*)name password:(NSString*)password {
   return (BMXErrorCode)_wrap_BMXClient_signInByName(self.swigCPtr, name, password); 
}

- (BMXErrorCode)signInByIdWithArg1:(long long)arg1 password:(NSString*)password {
   return (BMXErrorCode)_wrap_BMXClient_signInById(self.swigCPtr, arg1, password); 
}

- (BMXErrorCode)fastSignInByNameWithName:(NSString*)name password:(NSString*)password {
   return (BMXErrorCode)_wrap_BMXClient_fastSignInByName(self.swigCPtr, name, password); 
}

- (BMXErrorCode)fastSignInByIdWithUid:(long long)uid password:(NSString*)password {
   return (BMXErrorCode)_wrap_BMXClient_fastSignInById(self.swigCPtr, uid, password); 
}

- (BMXErrorCode)signOutWithUid:(long long)uid ignoreUnbindDevice:(BOOL)ignoreUnbindDevice {
   return (BMXErrorCode)_wrap_BMXClient_signOut__SWIG_0(self.swigCPtr, uid, ignoreUnbindDevice); 
}

- (BMXErrorCode)signOutWithUid:(long long)uid {
   return (BMXErrorCode)_wrap_BMXClient_signOut__SWIG_1(self.swigCPtr, uid); 
}

- (BMXErrorCode)signOut {
   return (BMXErrorCode)_wrap_BMXClient_signOut__SWIG_2(self.swigCPtr); 
}

- (BMXErrorCode)deleteAccountWithPassword:(NSString*)password {
   return (BMXErrorCode)_wrap_BMXClient_deleteAccount(self.swigCPtr, password); 
}

- (BMXConnectStatus)connectStatus {
   return (BMXConnectStatus)_wrap_BMXClient_connectStatus(self.swigCPtr); 
}

- (BMXSignInStatus)signInStatus {
   return (BMXSignInStatus)_wrap_BMXClient_signInStatus(self.swigCPtr); 
}

- (void)reconnect {
  _wrap_BMXClient_reconnect(self.swigCPtr);
}

- (void)onNetworkChangedWithType:(BMXNetworkType)type reconnect:(BOOL)reconnect {
  _wrap_BMXClient_onNetworkChanged(self.swigCPtr, (int)type, reconnect);
}

- (void)disconnect {
  _wrap_BMXClient_disconnect(self.swigCPtr);
}

- (BMXErrorCode)changeAppIdWithAppId:(NSString*)appId appSecret:(NSString*)appSecret {
   return (BMXErrorCode)_wrap_BMXClient_changeAppId__SWIG_0(self.swigCPtr, appId, appSecret); 
}

- (BMXErrorCode)changeAppIdWithAppId:(NSString*)appId {
   return (BMXErrorCode)_wrap_BMXClient_changeAppId__SWIG_1(self.swigCPtr, appId); 
}

- (BMXErrorCode)initializeServerConfigWithIsLocal:(BOOL)isLocal {
   return (BMXErrorCode)_wrap_BMXClient_initializeServerConfig(self.swigCPtr, isLocal); 
}

- (void)sendMessageWithMsg:(BMXMessage*)msg {
  _wrap_BMXClient_sendMessage(self.swigCPtr, msg.swigCPtr);
}

- (void)signUpNewUserWithUsername:(NSString*)username password:(NSString*)password completion:(void (^)(BMXUserProfile *profile, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXUserProfile:^BMXErrorCode(BMXUserProfile *res)  {
        void *tmp = nullptr;
        BMXErrorCode err = (BMXErrorCode)_wrap_BMXClient_signUpNewUser(self.swigCPtr, username, password, &tmp);
        res.swigCPtr = tmp;
        return err;
    } completion:resBlock];
}

- (void)getProfile:(BOOL)forceRefresh completion:(void (^)(BMXUserProfile*profile, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXUserProfile:^BMXErrorCode(BMXUserProfile *res) {
        void *tmp = nullptr;
        BMXErrorCode err = (BMXErrorCode)_wrap_BMXUserService_getProfile(self.swigCPtr, &tmp, forceRefresh);
        res.swigCPtr = tmp;
        return err;
    } completion:resBlock];
}

- (void)signInByNameWithName:(NSString*)name password:(NSString*)password completion:(void (^)(BMXError *aError)) resBlock  {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXClient_signInByName(self.swigCPtr, name, password);
    } completion:resBlock];
}

- (void)signInByIdWithArg1:(long long)arg1 password:(NSString*)password completion:(void (^)(BMXError *aError)) resBlock  {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXClient_signInById(self.swigCPtr, arg1, password);
    } completion:resBlock];
}

- (void)fastSignInByNameWithName:(NSString*)name password:(NSString*)password completion:(void (^)(BMXError *aError)) resBlock  {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXClient_fastSignInByName(self.swigCPtr, name, password);
    } completion:resBlock];
}

- (void)fastSignInByIdWithUid:(long long)uid password:(NSString*)password completion:(void (^)(BMXError *aError)) resBlock  {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXClient_fastSignInById(self.swigCPtr, uid, password);
    } completion:resBlock];
}

- (void)signOutWithUid:(long long)uid ignoreUnbindDevice:(BOOL)ignoreUnbindDevice completion:(void (^)(BMXError *aError)) resBlock  {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXClient_signOut__SWIG_0(self.swigCPtr, uid, ignoreUnbindDevice);
    } completion:resBlock];
}

- (void)signOutWithUid:(long long)uid completion:(void (^)(BMXError *aError)) resBlock  {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXClient_signOut__SWIG_1(self.swigCPtr, uid);
    } completion:resBlock];
}

- (void)signOutWithCompletion:(void (^)(BMXError *aError)) resBlock  {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXClient_signOut__SWIG_2(self.swigCPtr);
    } completion:resBlock];
}

- (void)deleteAccountWithPassword:(NSString*)password completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXClient_deleteAccount(self.swigCPtr, password);
    } completion:resBlock];
}

- (void)reconnectWithCompletion:(void (^)(BMXError *aError)) resBlock  {
    [BMXAsync async:^BMXErrorCode {
        _wrap_BMXClient_reconnect(self.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)disconnectWithCompletion:(void (^)(BMXError *aError)) resBlock  {
    [BMXAsync async:^BMXErrorCode {
        _wrap_BMXClient_disconnect(self.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)changeAppIdWithAppId:(NSString*)appId appSecret:(NSString*)appSecret completion:(void (^)(BMXError *aError)) resBlock  {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXClient_changeAppId__SWIG_0(self.swigCPtr, appId, appSecret);
    } completion:resBlock];
}

- (void)changeAppIdWithAppId:(NSString*)appId completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXClient_changeAppId__SWIG_1(self.swigCPtr, appId);
    } completion:resBlock];
}

- (void)initializeServerConfigWithIsLocal:(BOOL)isLocal completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode {
        return (BMXErrorCode)_wrap_BMXClient_initializeServerConfig(self.swigCPtr, isLocal);
    } completion:resBlock];
}

- (void)sendMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode {
        _wrap_BMXClient_sendMessage(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXClient((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXFileAttachment

- (NSString *)getLocalConversationId:(long long)conversationId
                            fileName:(NSString *)fileName {
    NSString *base = [[[BMXClient sharedClient] chatService] attachmentDir];
    NSString *path = [[[BMXClient sharedClient] chatService] attachmentDirForConversationWithConversationId:conversationId];
    return [base stringByAppendingPathComponent:[path stringByAppendingPathComponent:fileName]];
}

- (NSString *)getLocalPathWithConversationId:(long long)conversationId
               displayName:(NSString *)displayName data:(NSData *) aData{
    NSString *localPath = nil;
    long long time = [[NSDate date] timeIntervalSince1970] * 1000;
    if ([aData length]) {
        NSString *dirName = [NSString stringWithFormat:@"%lld",time];
        NSString *dir = [self getLocalConversationId:conversationId fileName:dirName];
        localPath = [NSString stringWithFormat:@"%@/%@",dir,displayName];
        NSFileManager *fileManager = [NSFileManager defaultManager];
        [fileManager createDirectoryAtPath:dir withIntermediateDirectories:YES attributes:nil error:nil];
        [aData writeToFile:localPath atomically:YES];
    }
    return localPath;
}

- (id)initWithData:(NSData *)aData
         displayName:(NSString *)displayName
         conversationId:(long long)conversationId {
    NSString *localPath = nil;
    if ([aData length]) {
        localPath = [self getLocalPathWithConversationId:conversationId displayName:displayName data:aData];
    }
    self = [self initWithPath:localPath displayName:displayName];
    return self;
}

- (id)initWithPath:(NSString*)path displayName:(NSString*)displayName {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXFileAttachment__SWIG_0(path, displayName);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithPath:(NSString*)path {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXFileAttachment__SWIG_1(path);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithRatelUrl:(NSString*)ratelUrl displayName:(NSString*)displayName fileLength:(long long)fileLength {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXFileAttachment__SWIG_2(ratelUrl, displayName, fileLength);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (BMXMessageAttachment_Type)type {
   return (BMXMessageAttachment_Type)_wrap_BMXFileAttachment_type(self.swigCPtr); 
}

- (BMXMessageAttachment*)clone {
     void* cPtr = _wrap_BMXFileAttachment_clone(self.swigCPtr);
     BMXMessageAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (NSString*)path {
  {
      NSString *path = _wrap_BMXFileAttachment_path(self.swigCPtr);
      if (![path containsString:sharedClient.getChatServiceImpl.attachmentDir]) {
          path = [sharedClient.getChatServiceImpl.attachmentDir stringByAppendingPathComponent:path];
      }
      return path;
  }
}

- (NSString*)displayName {
  {
    return _wrap_BMXFileAttachment_displayName(self.swigCPtr);
  }
}

- (NSString*)ratelUrl {
  {
    return _wrap_BMXFileAttachment_ratelUrl(self.swigCPtr);
  }
}

- (NSString*)url {
  {
    return _wrap_BMXFileAttachment_url(self.swigCPtr);
  }
}

- (long long)fileLength {
   return _wrap_BMXFileAttachment_fileLength(self.swigCPtr); 
}

- (BMXMessageAttachment_DownloadStatus)downloadStatus {
   return (BMXMessageAttachment_DownloadStatus)_wrap_BMXFileAttachment_downloadStatus(self.swigCPtr); 
}

+ (BMXFileAttachment*)dynamicCastWithAttachment:(BMXMessageAttachment*)attachment {
     void* cPtr = _wrap_BMXFileAttachment_dynamic_cast(attachment.swigCPtr);
     BMXFileAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXFileAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXFileAttachment((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXVideoConfig

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (void)setWidth:(int)value {
  _wrap_BMXVideoConfig_width_set(self.swigCPtr, value);
}

- (int)getWidth {
   return _wrap_BMXVideoConfig_width_get(self.swigCPtr);
}

- (void)setHeight:(int)value {
  _wrap_BMXVideoConfig_height_set(self.swigCPtr, value);
}

- (int)getHeight {
   return _wrap_BMXVideoConfig_height_get(self.swigCPtr);
}

- (void)setFrameRate:(int)value {
  _wrap_BMXVideoConfig_frameRate_set(self.swigCPtr, value);
}

- (int)getFrameRate {
   return _wrap_BMXVideoConfig_frameRate_get(self.swigCPtr);
}

- (void)setProfile:(BMXVideoProfile)value {
  _wrap_BMXVideoConfig_profile_set(self.swigCPtr, (int)value);
}

- (BMXVideoProfile)getProfile {
   return (BMXVideoProfile)_wrap_BMXVideoConfig_profile_get(self.swigCPtr);
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXVideoConfig();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXVideoConfig((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRoomAuth

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (void)setMRoomId:(long long)value {
  _wrap_BMXRoomAuth_mRoomId_set(self.swigCPtr, value);
}

- (long long)getMRoomId {
   return _wrap_BMXRoomAuth_mRoomId_get(self.swigCPtr);
}

- (void)setMToken:(NSString*)value {
  _wrap_BMXRoomAuth_mToken_set(self.swigCPtr, value);
}

- (NSString*)getMToken {
  {
    return _wrap_BMXRoomAuth_mToken_get(self.swigCPtr);
  }
}

- (void)setMOptionalInfo:(NSString*)value {
  _wrap_BMXRoomAuth_mOptionalInfo_set(self.swigCPtr, value);
}

- (NSString*)getMOptionalInfo {
  {
    return _wrap_BMXRoomAuth_mOptionalInfo_get(self.swigCPtr);
  }
}

- (void)setMUserId:(long long)value {
  _wrap_BMXRoomAuth_mUserId_set(self.swigCPtr, value);
}

- (long long)getMUserId {
   return _wrap_BMXRoomAuth_mUserId_get(self.swigCPtr);
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomAuth();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRoomAuth((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXStream

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (void)setMUserId:(long long)value {
  _wrap_BMXStream_mUserId_set(self.swigCPtr, value);
}

- (long long)getMUserId {
   return _wrap_BMXStream_mUserId_get(self.swigCPtr);
}

- (void)setMStreamId:(NSString*)value {
  _wrap_BMXStream_mStreamId_set(self.swigCPtr, value);
}

- (NSString*)getMStreamId {
  {
    return _wrap_BMXStream_mStreamId_get(self.swigCPtr);
  }
}

- (void)setMMediaType:(BMXVideoMediaType)value {
  _wrap_BMXStream_mMediaType_set(self.swigCPtr, (int)value);
}

- (BMXVideoMediaType)getMMediaType {
   return (BMXVideoMediaType)_wrap_BMXStream_mMediaType_get(self.swigCPtr);
}

- (void)setMEnableVideo:(BOOL)value {
  _wrap_BMXStream_mEnableVideo_set(self.swigCPtr, value);
}

- (BOOL)getMEnableVideo {
   return _wrap_BMXStream_mEnableVideo_get(self.swigCPtr);
}

- (void)setMEnableAudio:(BOOL)value {
  _wrap_BMXStream_mEnableAudio_set(self.swigCPtr, value);
}

- (BOOL)getMEnableAudio {
   return _wrap_BMXStream_mEnableAudio_get(self.swigCPtr);
}

- (void)setMEnableData:(BOOL)value {
  _wrap_BMXStream_mEnableData_set(self.swigCPtr, value);
}

- (BOOL)getMEnableData {
   return _wrap_BMXStream_mEnableData_get(self.swigCPtr);
}

- (void)setMMuteVideo:(BOOL)value {
  _wrap_BMXStream_mMuteVideo_set(self.swigCPtr, value);
}

- (BOOL)getMMuteVideo {
   return _wrap_BMXStream_mMuteVideo_get(self.swigCPtr);
}

- (void)setMMuteAudio:(BOOL)value {
  _wrap_BMXStream_mMuteAudio_set(self.swigCPtr, value);
}

- (BOOL)getMMuteAudio {
   return _wrap_BMXStream_mMuteAudio_get(self.swigCPtr);
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXStream();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXStream((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXVideoCanvas

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (void)setMView:(void*)value {
  _wrap_BMXVideoCanvas_mView_set(self.swigCPtr, value);
}

- (void*)getMView {
     return _wrap_BMXVideoCanvas_mView_get(self.swigCPtr);
}

- (void)setMUserId:(long long)value {
  _wrap_BMXVideoCanvas_mUserId_set(self.swigCPtr, value);
}

- (long long)getMUserId {
   return _wrap_BMXVideoCanvas_mUserId_get(self.swigCPtr);
}

- (void)setMStream:(BMXStream*)value {
  _wrap_BMXVideoCanvas_mStream_set(self.swigCPtr, value.swigCPtr);
}

- (BMXStream*)getMStream {
     void* cPtr = _wrap_BMXVideoCanvas_mStream_get(self.swigCPtr);
     BMXStream* ret = nil;
     if(cPtr) {
        ret = [[BMXStream alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
       [ret autorelease];
#endif
     }
    return ret;
}

- (void)setMRenderMode:(BMXRenderMode)value {
  _wrap_BMXVideoCanvas_mRenderMode_set(self.swigCPtr, (int)value);
}

- (BMXRenderMode)getMRenderMode {
   return (BMXRenderMode)_wrap_BMXVideoCanvas_mRenderMode_get(self.swigCPtr);
}

- (void)setMMirrodMode:(BMXMirrorMode)value {
  _wrap_BMXVideoCanvas_mMirrodMode_set(self.swigCPtr, (int)value);
}

- (BMXMirrorMode)getMMirrodMode {
   return (BMXMirrorMode)_wrap_BMXVideoCanvas_mMirrodMode_get(self.swigCPtr);
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXVideoCanvas();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXVideoCanvas((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXStreamStats

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (void)setMUserId:(int)value {
  _wrap_BMXStreamStats_mUserId_set(self.swigCPtr, value);
}

- (int)getMUserId {
   return _wrap_BMXStreamStats_mUserId_get(self.swigCPtr);
}

- (void)setMStreamId:(NSString*)value {
  _wrap_BMXStreamStats_mStreamId_set(self.swigCPtr, value);
}

- (NSString*)getMStreamId {
  {
    return _wrap_BMXStreamStats_mStreamId_get(self.swigCPtr);
  }
}

- (void)setMMediaType:(BMXVideoMediaType)value {
  _wrap_BMXStreamStats_mMediaType_set(self.swigCPtr, (int)value);
}

- (BMXVideoMediaType)getMMediaType {
   return (BMXVideoMediaType)_wrap_BMXStreamStats_mMediaType_get(self.swigCPtr);
}

- (void)setMTrackType:(BMXTrackType)value {
  _wrap_BMXStreamStats_mTrackType_set(self.swigCPtr, (int)value);
}

- (BMXTrackType)getMTrackType {
   return (BMXTrackType)_wrap_BMXStreamStats_mTrackType_get(self.swigCPtr);
}

- (void)setMAudioBitrate:(int)value {
  _wrap_BMXStreamStats_mAudioBitrate_set(self.swigCPtr, value);
}

- (int)getMAudioBitrate {
   return _wrap_BMXStreamStats_mAudioBitrate_get(self.swigCPtr);
}

- (void)setMVideoBitrate:(int)value {
  _wrap_BMXStreamStats_mVideoBitrate_set(self.swigCPtr, value);
}

- (int)getMVideoBitrate {
   return _wrap_BMXStreamStats_mVideoBitrate_get(self.swigCPtr);
}

- (void)setMWidth:(int)value {
  _wrap_BMXStreamStats_mWidth_set(self.swigCPtr, value);
}

- (int)getMWidth {
   return _wrap_BMXStreamStats_mWidth_get(self.swigCPtr);
}

- (void)setMHeight:(int)value {
  _wrap_BMXStreamStats_mHeight_set(self.swigCPtr, value);
}

- (int)getMHeight {
   return _wrap_BMXStreamStats_mHeight_get(self.swigCPtr);
}

- (void)setMFrameRate:(int)value {
  _wrap_BMXStreamStats_mFrameRate_set(self.swigCPtr, value);
}

- (int)getMFrameRate {
   return _wrap_BMXStreamStats_mFrameRate_get(self.swigCPtr);
}

- (void)setMPacketLostRate:(float)value {
  _wrap_BMXStreamStats_mPacketLostRate_set(self.swigCPtr, value);
}

- (float)getMPacketLostRate {
   return _wrap_BMXStreamStats_mPacketLostRate_get(self.swigCPtr);
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXStreamStats();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXStreamStats((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXJanusStreamInfo

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXJanusStreamInfo();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMFeedId:(long long)value {
  _wrap_BMXJanusStreamInfo_mFeedId_set(self.swigCPtr, value);
}

- (long long)getMFeedId {
   return _wrap_BMXJanusStreamInfo_mFeedId_get(self.swigCPtr);
}

- (void)setMFeedDisplay:(NSString*)value {
  _wrap_BMXJanusStreamInfo_mFeedDisplay_set(self.swigCPtr, value);
}

- (NSString*)getMFeedDisplay {
  {
    return _wrap_BMXJanusStreamInfo_mFeedDisplay_get(self.swigCPtr);
  }
}

- (void)setMFeedMid:(NSString*)value {
  _wrap_BMXJanusStreamInfo_mFeedMid_set(self.swigCPtr, value);
}

- (NSString*)getMFeedMid {
  {
    return _wrap_BMXJanusStreamInfo_mFeedMid_get(self.swigCPtr);
  }
}

- (void)setMType:(NSString*)value {
  _wrap_BMXJanusStreamInfo_mType_set(self.swigCPtr, value);
}

- (NSString*)getMType {
  {
    return _wrap_BMXJanusStreamInfo_mType_get(self.swigCPtr);
  }
}

- (void)setMMid:(NSString*)value {
  _wrap_BMXJanusStreamInfo_mMid_set(self.swigCPtr, value);
}

- (NSString*)getMMid {
  {
    return _wrap_BMXJanusStreamInfo_mMid_get(self.swigCPtr);
  }
}

- (void)setMCodec:(NSString*)value {
  _wrap_BMXJanusStreamInfo_mCodec_set(self.swigCPtr, value);
}

- (NSString*)getMCodec {
  {
    return _wrap_BMXJanusStreamInfo_mCodec_get(self.swigCPtr);
  }
}

- (void)setMMindex:(int)value {
  _wrap_BMXJanusStreamInfo_mMindex_set(self.swigCPtr, value);
}

- (int)getMMindex {
   return _wrap_BMXJanusStreamInfo_mMindex_get(self.swigCPtr);
}

- (void)setMTalking:(BOOL)value {
  _wrap_BMXJanusStreamInfo_mTalking_set(self.swigCPtr, value);
}

- (BOOL)getMTalking {
   return _wrap_BMXJanusStreamInfo_mTalking_get(self.swigCPtr);
}

- (void)setMActive:(BOOL)value {
  _wrap_BMXJanusStreamInfo_mActive_set(self.swigCPtr, value);
}

- (BOOL)getMActive {
   return _wrap_BMXJanusStreamInfo_mActive_get(self.swigCPtr);
}

- (void)setMReady:(BOOL)value {
  _wrap_BMXJanusStreamInfo_mReady_set(self.swigCPtr, value);
}

- (BOOL)getMReady {
   return _wrap_BMXJanusStreamInfo_mReady_get(self.swigCPtr);
}

- (void)setMSend:(BOOL)value {
  _wrap_BMXJanusStreamInfo_mSend_set(self.swigCPtr, value);
}

- (BOOL)getMSend {
   return _wrap_BMXJanusStreamInfo_mSend_get(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXJanusStreamInfo((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRoomParticipant

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomParticipant();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMUserId:(long long)value {
  _wrap_BMXRoomParticipant_mUserId_set(self.swigCPtr, value);
}

- (long long)getMUserId {
   return _wrap_BMXRoomParticipant_mUserId_get(self.swigCPtr);
}

- (void)setMDisplay:(NSString*)value {
  _wrap_BMXRoomParticipant_mDisplay_set(self.swigCPtr, value);
}

- (NSString*)getMDisplay {
  {
    return _wrap_BMXRoomParticipant_mDisplay_get(self.swigCPtr);
  }
}

- (void)setMIsPublisher:(BOOL)value {
  _wrap_BMXRoomParticipant_mIsPublisher_set(self.swigCPtr, value);
}

- (BOOL)getMIsPublisher {
   return _wrap_BMXRoomParticipant_mIsPublisher_get(self.swigCPtr);
}

- (void)setMIstalking:(BOOL)value {
  _wrap_BMXRoomParticipant_mIstalking_set(self.swigCPtr, value);
}

- (BOOL)getMIstalking {
   return _wrap_BMXRoomParticipant_mIstalking_get(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRoomParticipant((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXJanusPublisher

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)initWithUserId:(long long)userId {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXJanusPublisher(userId);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setMUserId:(long long)value {
  _wrap_BMXJanusPublisher_mUserId_set(self.swigCPtr, value);
}

- (long long)getMUserId {
   return _wrap_BMXJanusPublisher_mUserId_get(self.swigCPtr);
}

- (void)setMDisplay:(NSString*)value {
  _wrap_BMXJanusPublisher_mDisplay_set(self.swigCPtr, value);
}

- (NSString*)getMDisplay {
  {
    return _wrap_BMXJanusPublisher_mDisplay_get(self.swigCPtr);
  }
}

- (void)setMAudioCodec:(NSString*)value {
  _wrap_BMXJanusPublisher_mAudioCodec_set(self.swigCPtr, value);
}

- (NSString*)getMAudioCodec {
  {
    return _wrap_BMXJanusPublisher_mAudioCodec_get(self.swigCPtr);
  }
}

- (void)setMVideoCodec:(NSString*)value {
  _wrap_BMXJanusPublisher_mVideoCodec_set(self.swigCPtr, value);
}

- (NSString*)getMVideoCodec {
  {
    return _wrap_BMXJanusPublisher_mVideoCodec_get(self.swigCPtr);
  }
}

- (void)setMSimulcast:(BOOL)value {
  _wrap_BMXJanusPublisher_mSimulcast_set(self.swigCPtr, value);
}

- (BOOL)getMSimulcast {
   return _wrap_BMXJanusPublisher_mSimulcast_get(self.swigCPtr);
}

- (void)setMTalking:(BOOL)value {
  _wrap_BMXJanusPublisher_mTalking_set(self.swigCPtr, value);
}

- (BOOL)getMTalking {
   return _wrap_BMXJanusPublisher_mTalking_get(self.swigCPtr);
}

- (void)setStreams:(BMXRTCStreams*)value {
  _wrap_BMXJanusPublisher_streams_set(self.swigCPtr, value.swigCPtr);
}

- (BMXRTCStreams*)getStreams {
     void* cPtr = _wrap_BMXJanusPublisher_streams_get(self.swigCPtr);
     BMXRTCStreams* ret = nil;
     if(cPtr) {
        ret = [[BMXRTCStreams alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
       [ret autorelease];
#endif
     }
    return ret;
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXJanusPublisher((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRoomSDPInfo

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRoomSDPInfo();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)setSdp:(NSString*)value {
  _wrap_BMXRoomSDPInfo_sdp_set(self.swigCPtr, value);
}

- (NSString*)getSdp {
  {
    return _wrap_BMXRoomSDPInfo_sdp_get(self.swigCPtr);
  }
}

- (void)setType:(BMXRoomSDPType)value {
  _wrap_BMXRoomSDPInfo_type_set(self.swigCPtr, (int)value);
}

- (BMXRoomSDPType)getType {
   return (BMXRoomSDPType)_wrap_BMXRoomSDPInfo_type_get(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRoomSDPInfo((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end




@implementation BMXRTCConfig

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCConfig();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (NSString*)getVersion {
  {
    return _wrap_BMXRTCConfig_getVersion(self.swigCPtr);
  }
}

- (void)setLogLevel:(BMXLogLevel)level {
  _wrap_BMXRTCConfig_setLogLevel(self.swigCPtr, (int)level);
}

- (BMXLogLevel)getLogLevel {
   return (BMXLogLevel)_wrap_BMXRTCConfig_getLogLevel(self.swigCPtr);
}

- (void)setSDKMode:(BMXSDKMode)mode {
  _wrap_BMXRTCConfig_setSDKMode(self.swigCPtr, (int)mode);
}

- (BMXSDKMode)getSDKMode {
   return (BMXSDKMode)_wrap_BMXRTCConfig_getSDKMode(self.swigCPtr);
}

- (void)setAutoPublishMode:(BOOL)autoPublish {
  _wrap_BMXRTCConfig_setAutoPublishMode(self.swigCPtr, autoPublish);
}

- (BOOL)getAutoPublishMode {
   return _wrap_BMXRTCConfig_getAutoPublishMode(self.swigCPtr);
}

- (void)setAutoSubscribeMode:(BOOL)autoSubscribe {
  _wrap_BMXRTCConfig_setAutoSubscribeMode(self.swigCPtr, autoSubscribe);
}

- (BOOL)getAutoSubscribeMode {
   return _wrap_BMXRTCConfig_getAutoSubscribeMode(self.swigCPtr);
}

- (void)setAudioOnlyMode:(BOOL)audioOnly {
  _wrap_BMXRTCConfig_setAudioOnlyMode(self.swigCPtr, audioOnly);
}

- (BOOL)getAudioOnlyMode {
   return _wrap_BMXRTCConfig_getAudioOnlyMode(self.swigCPtr);
}

- (void)setEnableLocalAudio:(BOOL)enableLocalAudio {
  _wrap_BMXRTCConfig_setEnableLocalAudio(self.swigCPtr, enableLocalAudio);
}

- (BOOL)getEnableLocalAudio {
   return _wrap_BMXRTCConfig_getEnableLocalAudio(self.swigCPtr);
}

- (void)setEnableLocalVideo:(BOOL)enableLocalVideo {
  _wrap_BMXRTCConfig_setEnableLocalVideo(self.swigCPtr, enableLocalVideo);
}

- (BOOL)getEnableLocalVideo {
   return _wrap_BMXRTCConfig_getEnableLocalVideo(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCConfig((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end

@interface RTCEngineListener () <BMXRTCEngineProtocol>
{
    BMXDelegatesContainer<BMXRTCEngineProtocol> *container;
    NSObject *containerLock;
}
@end

@implementation RTCEngineListener

- (void)addDelegate:(id<BMXRTCEngineProtocol>) delegate queue:(dispatch_queue_t) queue{
    if (!container) {
        container = [(BMXDelegatesContainer<BMXRTCEngineProtocol> *)[BMXDelegatesContainer alloc] init];
    }
    
    if (!containerLock) {
        containerLock = [[NSObject alloc] init];
    }
    
    if (delegate) {
        if (!queue) {
            queue = dispatch_get_main_queue();
        }
        
        @synchronized (containerLock) {
            [container addDelegate:delegate delegateQueue:queue];
        }
    }
}
- (void)removeDelegate:(id<BMXRTCEngineProtocol>) delegate{
    if (container && delegate) {
        if (!containerLock) {
            containerLock = [[NSObject alloc] init];
        }
        
        @synchronized (containerLock) {
            [container removeDelegate:delegate];
        }
    }
}
- (void)onJoinRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error{
    if (container) {
        [container onJoinRoomWithInfo:info roomId:roomId error:error];
    }
}
- (void)onLeaveRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error reason:(NSString*)reason{
    if (container) {
        [container onLeaveRoomWithInfo:info roomId:roomId error:error reason:reason];
    }
}
- (void)onRejoiningWithRoomId:(long long)roomId error:(BMXErrorCode)error{
    if (container) {
        [container onRejoiningWithRoomId:roomId error:error];
    }
}
- (void)onReJoinRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error{
    if (container) {
        [container onReJoinRoomWithInfo:info roomId:roomId error:error];
    }
}
- (void)onMemberJoinedWithRoomId:(long long)roomId usedId:(long long)usedId{
    if (container) {
        [container onMemberJoinedWithRoomId:roomId usedId:usedId];
    }
}
- (void)onMemberExitedWithRoomId:(long long)roomId usedId:(long long)usedId reason:(NSString*)reason{
    if (container) {
        [container onMemberExitedWithRoomId:roomId usedId:usedId reason:reason];
    }
}
- (void)onLocalPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onLocalPublishWithStream:stream info:info error:error];
    }
}
- (void)onLocalUnPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onLocalUnPublishWithStream:stream info:info error:error];
    }
}
- (void)onRemotePublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onRemotePublishWithStream:stream info:info error:error];
    }
}
- (void)onRemoteUnPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onRemoteUnPublishWithStream:stream info:info error:error];
    }
}
- (void)onSubscribeWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onSubscribeWithStream:stream info:info error:error];
    }
}
- (void)onUnSubscribeWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onUnSubscribeWithStream:stream info:info error:error];
    }
}
- (void)onRemoteTrackNotifyWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onRemoteTrackNotifyWithStream:stream trackType:trackType info:info error:error];
    }
}
- (void)onLocalStreamMuteRspWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType mute:(BOOL)mute info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onLocalStreamMuteRspWithStream:stream trackType:trackType mute:mute info:info error:error];
    }
}
- (void)onRemoteStreamMuteRspWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType mute:(BOOL)mute info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onRemoteStreamMuteRspWithStream:stream trackType:trackType mute:mute info:info error:error];
    }
}
- (void)onSendRTCStatsWithStreamStats:(BMXStreamStats*)streamStats info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onSendRTCStatsWithStreamStats:streamStats info:info error:error];
    }
}
- (void)onRemoteRTCStatsWithStreamStats:(BMXStreamStats*)streamStats info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onRemoteRTCStatsWithStreamStats:streamStats info:info error:error];
    }
}
- (void)onLocalAudioLevelWithVolume:(int)volume{
    if (container) {
        [container onLocalAudioLevelWithVolume:volume];
    }
}
- (void)onRemoteAudioLevelWithUserId:(long long)userId volume:(int)volume{
    if (container) {
        [container onRemoteAudioLevelWithUserId:userId volume:volume];
    }
}
- (void)onKickoffWithInfo:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onKickoffWithInfo:info error:error];
    }
}
- (void)onWarningWithInfo:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onWarningWithInfo:info error:error];
    }
}
- (void)onErrorWithInfo:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onErrorWithInfo:info error:error];
    }
}
- (void)onNetworkQualityWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error{
    if (container) {
        [container onNetworkQualityWithStream:stream info:info error:error];
    }
}

@end




@implementation BMXRTCEngine
-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
    if (!rtcEngineListener) {
      rtcEngineListener = [[RTCEngineListener alloc] init];
    }
  }
  return self;
}

- (void)destroy {
  _wrap_BMXRTCEngine_destroy(self.swigCPtr);
}

- (void)addRTCEngineListenerWithListener:(BMXRTCEngineListener*)listener {
  _wrap_BMXRTCEngine_addRTCEngineListener(self.swigCPtr, listener.swigCPtr);
}

- (void)removeRTCEngineListenerWithListener:(BMXRTCEngineListener*)listener {
  _wrap_BMXRTCEngine_removeRTCEngineListener(self.swigCPtr, listener.swigCPtr);
}

- (BMXRTCConfig*)getRTCConfig {
     void* cPtr = _wrap_BMXRTCEngine_getRTCConfig(self.swigCPtr);
     BMXRTCConfig* ret = nil;
     if(cPtr) {
        ret = [[BMXRTCConfig alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
       [ret autorelease];
#endif
     }
    return ret;
}

- (BMXErrorCode)setRoomType:(BMXRoomType)type {
   return (BMXErrorCode)_wrap_BMXRTCEngine_setRoomType(self.swigCPtr, (int)type);
}

- (BMXErrorCode)setStreamRole:(BMXStreamRole)role {
   return (BMXErrorCode)_wrap_BMXRTCEngine_setStreamRole(self.swigCPtr, (int)role);
}

- (BMXErrorCode)setVideoCodec:(BMXVideoCodec)codec {
   return (BMXErrorCode)_wrap_BMXRTCEngine_setVideoCodec(self.swigCPtr, (int)codec);
}

- (BMXErrorCode)setVideoProfile:(BMXVideoConfig*)videoConfig {
   return (BMXErrorCode)_wrap_BMXRTCEngine_setVideoProfile(self.swigCPtr, videoConfig.swigCPtr);
}

- (BMXErrorCode)setAudioProfile:(BMXAudioProfile)profile {
   return (BMXErrorCode)_wrap_BMXRTCEngine_setAudioProfile(self.swigCPtr, (int)profile);
}

- (BMXErrorCode)joinRoomWithAuth:(BMXRoomAuth*)auth {
   return (BMXErrorCode)_wrap_BMXRTCEngine_joinRoom(self.swigCPtr, auth.swigCPtr);
}

- (BMXErrorCode)leaveRoom {
   return (BMXErrorCode)_wrap_BMXRTCEngine_leaveRoom(self.swigCPtr);
}

- (BMXErrorCode)publishWithType:(BMXVideoMediaType)type hasVideo:(BOOL)hasVideo hasAudio:(BOOL)hasAudio {
   return (BMXErrorCode)_wrap_BMXRTCEngine_publish(self.swigCPtr, (int)type, hasVideo, hasAudio);
}

- (BMXErrorCode)unPublishWithType:(BMXVideoMediaType)type {
   return (BMXErrorCode)_wrap_BMXRTCEngine_unPublish(self.swigCPtr, (int)type);
}

- (BMXErrorCode)subscribeWithStream:(BMXStream*)stream {
   return (BMXErrorCode)_wrap_BMXRTCEngine_subscribe(self.swigCPtr, stream.swigCPtr);
}

- (BMXErrorCode)unSubscribeWithStream:(BMXStream*)stream {
   return (BMXErrorCode)_wrap_BMXRTCEngine_unSubscribe(self.swigCPtr, stream.swigCPtr);
}

- (BMXErrorCode)startPreviewWithCanvas:(BMXVideoCanvas*)canvas {
   return (BMXErrorCode)_wrap_BMXRTCEngine_startPreview(self.swigCPtr, canvas.swigCPtr);
}

- (BMXErrorCode)stopPreviewWithCanvas:(BMXVideoCanvas*)canvas {
   return (BMXErrorCode)_wrap_BMXRTCEngine_stopPreview(self.swigCPtr, canvas.swigCPtr);
}

- (BMXErrorCode)startRemoteViewWithCanvas:(BMXVideoCanvas*)canvas {
   return (BMXErrorCode)_wrap_BMXRTCEngine_startRemoteView(self.swigCPtr, canvas.swigCPtr);
}

- (BMXErrorCode)stopRemoteViewWithCanvas:(BMXVideoCanvas*)canvas {
   return (BMXErrorCode)_wrap_BMXRTCEngine_stopRemoteView(self.swigCPtr, canvas.swigCPtr);
}

- (BMXErrorCode)muteLocalAudioWithMute:(BOOL)mute {
   return (BMXErrorCode)_wrap_BMXRTCEngine_muteLocalAudio(self.swigCPtr, mute);
}

- (BMXErrorCode)muteLocalVideoWithType:(BMXVideoMediaType)type mute:(BOOL)mute {
   return (BMXErrorCode)_wrap_BMXRTCEngine_muteLocalVideo(self.swigCPtr, (int)type, mute);
}

- (BMXErrorCode)muteRemoteAudioWithStream:(BMXStream*)stream mute:(BOOL)mute {
   return (BMXErrorCode)_wrap_BMXRTCEngine_muteRemoteAudio(self.swigCPtr, stream.swigCPtr, mute);
}

- (BMXErrorCode)muteRemoteVideoWithStream:(BMXStream*)stream mute:(BOOL)mute {
   return (BMXErrorCode)_wrap_BMXRTCEngine_muteRemoteVideo(self.swigCPtr, stream.swigCPtr, mute);
}

- (BMXErrorCode)switchCamera {
   return (BMXErrorCode)_wrap_BMXRTCEngine_switchCamera(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCEngine((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

- (void)addDelegate:(id<BMXRTCEngineProtocol>)aDelegate {
    [self addDelegate:aDelegate delegateQueue:nil];
}

- (void)addDelegate:(id)aDelegate delegateQueue:(dispatch_queue_t)aQueue {
    if ([aDelegate conformsToProtocol:@protocol(BMXRTCEngineProtocol)]) {
        [rtcEngineListener addDelegate:aDelegate queue:aQueue];
    }
}


- (void)removeDelegate:(id)aDelegate {
    if (aDelegate == nil) {
        return;
    }
    if ([aDelegate conformsToProtocol:@protocol(BMXRTCEngineProtocol)]) {
        [rtcEngineListener removeDelegate:aDelegate];
    }
}

- (void)addRTCEngineListener:(id<BMXRTCEngineProtocol>)listener {
    if (listener == nil) {
        return;
    }
    
    if ([listener conformsToProtocol:@protocol(BMXRTCEngineProtocol)]) {
        [rtcEngineListener addDelegate:listener queue: nil];
    }
}

- (void)removeRTCEngineListener:(id<BMXRTCEngineProtocol>)listener {
    if (listener == nil) {
        return;
    }
    [rtcEngineListener removeDelegate:listener];
}

@end


@implementation BMXRTCEngineListener

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (void)onJoinRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onJoinRoom(self.swigCPtr, info, roomId, (int)error);
}

- (void)onLeaveRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error reason:(NSString*)reason {
  _wrap_BMXRTCEngineListener_onLeaveRoom(self.swigCPtr, info, roomId, (int)error, reason);
}

- (void)onRejoiningWithRoomId:(long long)roomId error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onRejoining(self.swigCPtr, roomId, (int)error);
}

- (void)onReJoinRoomWithInfo:(NSString*)info roomId:(long long)roomId error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onReJoinRoom(self.swigCPtr, info, roomId, (int)error);
}

- (void)onMemberJoinedWithRoomId:(long long)roomId usedId:(long long)usedId {
  _wrap_BMXRTCEngineListener_onMemberJoined(self.swigCPtr, roomId, usedId);
}

- (void)onMemberExitedWithRoomId:(long long)roomId usedId:(long long)usedId reason:(NSString*)reason {
  _wrap_BMXRTCEngineListener_onMemberExited(self.swigCPtr, roomId, usedId, reason);
}

- (void)onLocalPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onLocalPublish(self.swigCPtr, stream.swigCPtr, info, (int)error);
}

- (void)onLocalUnPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onLocalUnPublish(self.swigCPtr, stream.swigCPtr, info, (int)error);
}

- (void)onRemotePublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onRemotePublish(self.swigCPtr, stream.swigCPtr, info, (int)error);
}

- (void)onRemoteUnPublishWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onRemoteUnPublish(self.swigCPtr, stream.swigCPtr, info, (int)error);
}

- (void)onSubscribeWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onSubscribe(self.swigCPtr, stream.swigCPtr, info, (int)error);
}

- (void)onUnSubscribeWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onUnSubscribe(self.swigCPtr, stream.swigCPtr, info, (int)error);
}

- (void)onRemoteTrackNotifyWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onRemoteTrackNotify(self.swigCPtr, stream.swigCPtr, (int)trackType, info, (int)error);
}

- (void)onLocalStreamMuteRspWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType mute:(BOOL)mute info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onLocalStreamMuteRsp(self.swigCPtr, stream.swigCPtr, (int)trackType, mute, info, (int)error);
}

- (void)onRemoteStreamMuteRspWithStream:(BMXStream*)stream trackType:(BMXTrackType)trackType mute:(BOOL)mute info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onRemoteStreamMuteRsp(self.swigCPtr, stream.swigCPtr, (int)trackType, mute, info, (int)error);
}

- (void)onSendRTCStatsWithStreamStats:(BMXStreamStats*)streamStats info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onSendRTCStats(self.swigCPtr, streamStats.swigCPtr, info, (int)error);
}

- (void)onRemoteRTCStatsWithStreamStats:(BMXStreamStats*)streamStats info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onRemoteRTCStats(self.swigCPtr, streamStats.swigCPtr, info, (int)error);
}

- (void)onLocalAudioLevelWithVolume:(int)volume {
  _wrap_BMXRTCEngineListener_onLocalAudioLevel(self.swigCPtr, volume);
}

- (void)onRemoteAudioLevelWithUserId:(long long)userId volume:(int)volume {
  _wrap_BMXRTCEngineListener_onRemoteAudioLevel(self.swigCPtr, userId, volume);
}

- (void)onKickoffWithInfo:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onKickoff(self.swigCPtr, info, (int)error);
}

- (void)onWarningWithInfo:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onWarning(self.swigCPtr, info, (int)error);
}

- (void)onErrorWithInfo:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onError(self.swigCPtr, info, (int)error);
}

- (void)onNetworkQualityWithStream:(BMXStream*)stream info:(NSString*)info error:(BMXErrorCode)error {
  _wrap_BMXRTCEngineListener_onNetworkQuality(self.swigCPtr, stream.swigCPtr, info, (int)error);
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCEngineListener();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCEngineListener((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRTCRoom

- (long long)roomId {
   return _wrap_BMXRTCRoom_roomId(self.swigCPtr);
}

- (void)setRoomSecret:(NSString*)roomSecret {
  _wrap_BMXRTCRoom_setRoomSecret(self.swigCPtr, roomSecret);
}

- (NSString*)roomSecret {
  {
    return _wrap_BMXRTCRoom_roomSecret(self.swigCPtr);
  }
}

- (void)setPin:(NSString*)pin {
  _wrap_BMXRTCRoom_setPin(self.swigCPtr, pin);
}

- (NSString*)pin {
  {
    return _wrap_BMXRTCRoom_pin(self.swigCPtr);
  }
}

- (BOOL)permanent {
   return _wrap_BMXRTCRoom_permanent(self.swigCPtr);
}

- (BOOL)isPrivate {
   return _wrap_BMXRTCRoom_isPrivate(self.swigCPtr);
}

- (NSString*)roomDescription {
  {
    return _wrap_BMXRTCRoom_roomDescription(self.swigCPtr);
  }
}

- (long long)roomPrivateId {
   return _wrap_BMXRTCRoom_roomPrivateId(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCRoom((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end

#include "bmx_rtc_service_listener.h"

class RTCServiceListener: public floo::BMXRTCServiceListener {
public:

    /**
     * @brief 发送信令消息状态变化
     * @param msg 发生变化的信令消息
     * @param error
     **/
    virtual void onRTCMessageStatusChanged(floo::BMXMessagePtr msg, BMXErrorCode error);

    /**
     * @brief 接收到通话请求消息
     * @param msg
     **/
    virtual void onRTCCallMessageReceive(floo::BMXMessagePtr msg);

    /**
     * @brief 接收到接通消息
     * @param msg
     **/
    virtual void onRTCPickupMessageReceive(floo::BMXMessagePtr msg);

    /**
     * @brief 接收到挂断消息
     * @param msg
     **/
    virtual void onRTCHangupMessageReceive(floo::BMXMessagePtr msg);
    //delegate
    virtual void addDelegate(id<BMXRTCServiceProtocol> delegate, dispatch_queue_t queue);
    virtual void removeDelegate(id<BMXRTCServiceProtocol> delegate);
    BMXDelegatesContainer<BMXRTCServiceProtocol> *container;
    //
private:
    NSObject *containerLock;
};

void RTCServiceListener::onRTCMessageStatusChanged(floo::BMXMessagePtr msg, BMXErrorCode error){
    if (container && msg) {
        BMXMessage2Void(msg)
        BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
        [container onRTCMessageStatusChangedWithMsg:message error:error];
    }
}

void RTCServiceListener::onRTCCallMessageReceive(floo::BMXMessagePtr msg){
    if (container && msg) {
        BMXMessage2Void(msg)
        BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
        [container onRTCCallMessageReceiveWithMsg:message];
    }
}

void RTCServiceListener::onRTCPickupMessageReceive(floo::BMXMessagePtr msg){
    if (container && msg) {
        BMXMessage2Void(msg)
        BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
        [container onRTCPickupMessageReceiveWithMsg:message];
    }
}

void RTCServiceListener::onRTCHangupMessageReceive(floo::BMXMessagePtr msg){
    if (container && msg) {
        BMXMessage2Void(msg)
        BMXMessage *message = [[[BMXMessage alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
        [container onRTCHangupMessageReceiveWithMsg:message];
    }
}

void RTCServiceListener::addDelegate(id<BMXRTCServiceProtocol> delegate, dispatch_queue_t queue) {
    if (!container) {
        container = [(BMXDelegatesContainer<BMXRTCServiceProtocol> *)[BMXDelegatesContainer alloc] init];
    }
    
    if (!containerLock) {
        containerLock = [[NSObject alloc] init];
    }
    
    if (delegate) {
        if (!queue) {
            queue = dispatch_get_main_queue();
        }
        
        @synchronized (containerLock) {
            [container addDelegate:delegate delegateQueue:queue];
        }
    }
}

void RTCServiceListener::removeDelegate(id<BMXRTCServiceProtocol> delegate) {
    if (container && delegate) {
        if (!containerLock) {
            containerLock = [[NSObject alloc] init];
        }
        
        @synchronized (containerLock) {
            [container removeDelegate:delegate];
        }
        
    }
}



@implementation BMXRTCService
{
    RTCServiceListener *rtcListener;
}

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
    if (!rtcListener) {
      rtcListener = new RTCServiceListener();
    }
    if (rtcListener) {
      BMXRTCServiceListener * listener = [[[BMXRTCServiceListener alloc] init] initWithCptr:rtcListener swigOwnCObject:NO];
      [self addRTCServiceListenerWithListener: listener];
    }
  }
  return self;
}

- (void)setupRTCEngine:(BMXRTCEngine*)engine {
  _wrap_BMXRTCService_setupRTCEngine(self.swigCPtr, engine.swigCPtr);
}

- (BMXRTCEngine*)getRTCEngine {
     void* cPtr = _wrap_BMXRTCService_getRTCEngine(self.swigCPtr);
     BMXRTCEngine* ret = nil;
     if(cPtr) {
        ret = [[BMXRTCEngine alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
       [ret autorelease];
#endif
     }
    return ret;
}

- (BMXRTCSignalService*)getBMXRTCSignalService {
     void* cPtr = _wrap_BMXRTCService_getBMXRTCSignalService(self.swigCPtr);
     BMXRTCSignalService* ret = nil;
     if(cPtr) {
        ret = [[BMXRTCSignalService alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
       [ret autorelease];
#endif
     }
    return ret;
}

- (void)sendRTCMessageWithMsg:(BMXMessage*)msg {
  _wrap_BMXRTCService_sendRTCMessage(self.swigCPtr, msg.swigCPtr);
}

- (void)addRTCServiceListenerWithListener:(BMXRTCServiceListener*)listener {
  _wrap_BMXRTCService_addRTCServiceListener(self.swigCPtr, listener.swigCPtr);
}

- (void)removeRTCServiceListenerWithListener:(BMXRTCServiceListener*)listener {
  _wrap_BMXRTCService_removeRTCServiceListener(self.swigCPtr, listener.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCService((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

- (void)addDelegate:(id<BMXRTCServiceProtocol>)aDelegate {
    [self addDelegate:aDelegate delegateQueue:nil];
}

- (void)addDelegate:(id)aDelegate delegateQueue:(dispatch_queue_t)aQueue {
    if ([aDelegate conformsToProtocol:@protocol(BMXRTCServiceProtocol)]) {
        rtcListener->addDelegate(aDelegate, aQueue);
    }
}


- (void)removeDelegate:(id)aDelegate {
    if (aDelegate == nil) {
        return;
    }
    if ([aDelegate conformsToProtocol:@protocol(BMXRTCServiceProtocol)]) {
        rtcListener->removeDelegate(aDelegate);
    }
}

- (void)addRTCListener:(id<BMXRTCServiceProtocol>)listener {
    if (listener == nil) {
        return;
    }
    
    if ([listener conformsToProtocol:@protocol(BMXRTCServiceProtocol)]) {
        rtcListener->addDelegate(listener, nil);
    }
}

- (void)removeRTCListener:(id<BMXRTCServiceProtocol>)listener {
    if (listener == nil) {
        return;
    }
    rtcListener->removeDelegate(listener);
}

- (void)removeRTCListener {
    if (rtcListener) {
      BMXRTCServiceListener * listener = [[[BMXRTCServiceListener alloc] init] initWithCptr:rtcListener swigOwnCObject:NO];
      [self removeRTCServiceListenerWithListener: listener];
    }
}

- (void)sendRTCMessageWithMsg:(BMXMessage*)msg completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        _wrap_BMXRTCService_sendRTCMessage(self.swigCPtr, msg.swigCPtr);
        return BMXErrorCode_NoError;
    } completion:resBlock];
}

@end


@implementation BMXRTCServiceListener

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCServiceListener();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)onRTCMessageStatusChangedWithMsg:(BMXMessage*)msg error:(BMXErrorCode)error {
  _wrap_BMXRTCServiceListener_onRTCMessageStatusChanged(self.swigCPtr, msg.swigCPtr, (int)error);
}

- (void)onRTCCallMessageReceiveWithMsg:(BMXMessage*)msg {
  _wrap_BMXRTCServiceListener_onRTCCallMessageReceive(self.swigCPtr, msg.swigCPtr);
}

- (void)onRTCPickupMessageReceiveWithMsg:(BMXMessage*)msg {
  _wrap_BMXRTCServiceListener_onRTCPickupMessageReceive(self.swigCPtr, msg.swigCPtr);
}

- (void)onRTCHangupMessageReceiveWithMsg:(BMXMessage*)msg {
  _wrap_BMXRTCServiceListener_onRTCHangupMessageReceive(self.swigCPtr, msg.swigCPtr);
}

- (void)registerRTCServiceWithService:(BMXRTCService*)service {
  _wrap_BMXRTCServiceListener_registerRTCService(self.swigCPtr, service.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCServiceListener((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRTCSession

- (long long)sessionId {
   return _wrap_BMXRTCSession_sessionId(self.swigCPtr);
}

- (long long)pubHandlerId {
   return _wrap_BMXRTCSession_pubHandlerId(self.swigCPtr);
}

- (long long)subHandlerId {
   return _wrap_BMXRTCSession_subHandlerId(self.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCSession((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end

#include "bmx_rtc_signal_service_listener.h"

class RTCSignalServiceListener: public floo::BMXRTCSignalServiceListener {
public:
    virtual void onSessionCreate(floo::BMXRTCSessionPtr session, int error, const std::string reason) {
        if (container) {
            BMXRTCSession2Void(session)
            BMXRTCSession *s = [[[BMXRTCSession alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
            [container onSessionCreateWithSession:s error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief attachSession函数的执行回调函数
     * @param session 操作的session对象
     * @param type 操作的handler类型
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串.
     */
    virtual void onSessionAttach(floo::BMXRTCSessionPtr session, floo::BMXRTCSignalService::HandlerType type, int error, const std::string reason) {
        if (container) {
            BMXRTCSession2Void(session)
            BMXRTCSession *s = [[[BMXRTCSession alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
            [container onSessionAttachWithSession:s type:(BMXRTCSignalService_HandlerType)type error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message create信令执行回调函数。
     * @param session 操作的session对象
     * @param room 创建返回的room对象
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串.
     */
    virtual void onRoomCreate(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            [container onRoomCreateWithSession:sessionOC room:roomOC error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message destroy信令执行回调函数。
     * @param session 操作的session对象
     * @param roomId 销毁的room的Id
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串.
     */
    virtual void onRoomDestroy(floo::BMXRTCSessionPtr session, int64_t roomId, int error, const std::string& reason) {
        if (container) {
            BMXRTCSession2Void(session)
            BMXRTCSession *s = [[[BMXRTCSession alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
            [container onRoomDestroyWithSession:s roomId:roomId error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message edit信令执行回调函数。
     * @param session 操作的session对象
     * @param room 创建返回的room对象
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onRoomEdit(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            [container onRoomEditWithSession:sessionOC room:roomOC error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message exist信令执行回调函数。
     * @param session 操作的session对象
     * @param roomId 操作的room的Id
     * @param exist 是否存在
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onRoomExist(floo::BMXRTCSessionPtr session, int64_t roomId, bool exist, int error, const std::string& reason) {
        if (container) {
            BMXRTCSession2Void(session)
            BMXRTCSession *s = [[[BMXRTCSession alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
            [container onRoomExistWithSession:s roomId:roomId exist:exist error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message allowed信令执行回调函数。
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param tokens 返回的token列表
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onRoomAllowed(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, const std::vector<std::string>& tokens, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            TagList *t = [[TagList alloc] init];
            for (int i=0; i<tokens.size(); i++) {
                std::string token = tokens[i];
                [t addWithX:[BMXStringUtil stdToNSString:token]];
            }
            [container onRoomAllowedWithSession:sessionOC room:roomOC tokens:t error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message kick信令执行回调函数。
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param userId 操作的用户id
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onRoomKick(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, int64_t userId, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            [container onRoomKickWithSession:sessionOC room:roomOC userId:userId error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message moderate信令执行回调函数。
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param userId 操作的用户id
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onRoomModerate(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, int64_t userId, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            [container onRoomModerateWithSession:sessionOC room:roomOC userId:userId error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message list信令执行回调函数。
     * @param session 操作的session对象
     * @param rooms 操作返回的的room对象vector
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onRoomList(floo::BMXRTCSessionPtr session, const floo::BMXRTCRooms& rooms, int error, const std::string& reason) {
        if (container) {
            void *s;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            
            BMXRTCRooms *roomsOC = [[BMXRTCRooms alloc] init];
            {
                for (int i=0; i<rooms.size(); i++) {
                    floo::BMXRTCRoomPtr room = rooms[i];
                    BMXRTCRoom2Void(room)
                    BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
                    [roomsOC addWithX:roomOC];
                }
            }
            
            [container onRoomListWithSession:sessionOC rooms:roomsOC error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message listparticipants信令执行回调函数。
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param participants 返回的房间内成员列表
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onRoomListParticipants(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, const floo::BMXRTCRoomParticipants& participants, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];

            BMXRTCRoomParticipants *participantsOC = [[BMXRTCRoomParticipants alloc] init];
            {
                for (int i=0; i<participants.size(); i++) {
                    floo::BMXRoomParticipantPtr ptr = participants[i];
                    BMXRoomParticipant2Void(ptr)
                    BMXRoomParticipant *participantOC = [[[BMXRoomParticipant alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
                    [participantsOC addWithX:participantOC];
                }
            }
            
            [container onRoomListParticipantsWithSession:sessionOC room:roomOC participants:participantsOC error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief messgae join as publisher信令执行回调函数。
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param publishers 返回的发布者信息
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onPubJoinRoom(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, const floo::BMXRTCPublishers& publishers, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];

            BMXRTCPublishers *publishersOC = [[BMXRTCPublishers alloc] init];
            {
                for (int i=0; i<publishers.size(); i++) {
                    floo::BMXJanusPublisherPtr ptr = publishers[i];
                    BMXJanusPublisher2Void(ptr)
                    BMXJanusPublisher *publisherOC = [[[BMXJanusPublisher alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
                    [publishersOC addWithX:publisherOC];
                }
            }
            
            [container onPubJoinRoomWithSession:sessionOC room:roomOC publishers:publishersOC error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief 其它发布者加入到房间内触发回调。
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param publishers 返回的发布者信息
     */
    virtual void onOtherPubJoinRoom(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, const floo::BMXRTCPublishers& publishers) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];

            BMXRTCPublishers *publishersOC = [[BMXRTCPublishers alloc] init];
            {
                for (int i=0; i<publishers.size(); i++) {
                    floo::BMXJanusPublisherPtr ptr = publishers[i];
                    BMXJanusPublisher2Void(ptr)
                    BMXJanusPublisher *publisherOC = [[[BMXJanusPublisher alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
                    [publishersOC addWithX:publisherOC];
                }
            }
            
            [container onOtherPubJoinRoomWithSession:sessionOC room:roomOC publishers:publishersOC];
        }
    }

    /**
     * @brief message publisheh or configure as publisher信令执行回调函数。
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param sdp sdp信息对象
     * @param streams 返回的流对象
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onPubConfigure(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, floo::BMXRoomSDPInfoPtr sdp, const floo::BMXRTCStreams streams, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            void *pSdp;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            {
                BMXRoomSDPInfo2Void(sdp)
                pSdp = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            BMXRoomSDPInfo *sdpOC = [[[BMXRoomSDPInfo alloc] init] initWithCptr:(void*)pSdp swigOwnCObject:NO];

            BMXRTCStreams *streamsOC = [[BMXRTCStreams alloc] init];
            {
                for (int i=0; i<streams.size(); i++) {
                    floo::BMXJanusStreamInfoPtr ptr = streams[i];
                    BMXJanusStreamInfo2Void(ptr)
                    BMXJanusStreamInfo *streamOC = [[[BMXJanusStreamInfo alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
                    [streamsOC addWithX:streamOC];
                }
            }
            
            [container onPubConfigureWithSession:sessionOC room:roomOC sdp:sdpOC streams:streamsOC error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message publisher unpublish信令执行回调函数。
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param senderId unpublish操作的发起者，在不是当前用户的情况下为收到其他用户发起的通知。
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onPubUnPublish(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, int senderId, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            
            [container onPubUnPublishWithSession:sessionOC room:roomOC senderId:senderId error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief 当前session的发布流webrtc建立完毕(当ICE candidate操作成功，成功建立peerconnection链接时触发)
     * @param session 操作的用户id
     **/
    virtual void onPublishWebrtcUp(floo::BMXRTCSessionPtr session) {
        if (container) {
            void *s;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
           
            [container onPublishWebrtcUpWithSession:sessionOC];
        }
    }

    /**
     * @brief message subscriber join信令执行回调函数。
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param sdp sdp信息对象
     * @param senderId 操作发起者id
     * @param streams 返回的流对象
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onSubJoinRoomUpdate(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, floo::BMXRoomSDPInfoPtr sdp, int64_t senderId, const floo::BMXRTCStreams streams, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            void *pSdp;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            {
                BMXRoomSDPInfo2Void(sdp)
                pSdp = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            BMXRoomSDPInfo *sdpOC = [[[BMXRoomSDPInfo alloc] init] initWithCptr:(void*)pSdp swigOwnCObject:NO];

            BMXRTCStreams *streamsOC = [[BMXRTCStreams alloc] init];
            {
                for (int i=0; i<streams.size(); i++) {
                    floo::BMXJanusStreamInfoPtr ptr = streams[i];
                    BMXJanusStreamInfo2Void(ptr)
                    BMXJanusStreamInfo *streamOC = [[[BMXJanusStreamInfo alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
                    [streamsOC addWithX:streamOC];
                }
            }
            
            [container onSubJoinRoomUpdateWithSession:sessionOC room:roomOC sdp:sdpOC senderId:senderId streams:streamsOC error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message subscriber start信令执行回调函数
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onSubStart(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            
            [container onSubStartWithSession:sessionOC room:roomOC error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message subscriber pause信令执行回调函数
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onSubPause(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            
            [container onSubPauseWithSession:sessionOC room:roomOC error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief  message subscriber unsubscribe 信令执行回调函数
     *
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param streams 操作的streams对象列表
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onSubUnsubscribe(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, const floo::BMXRTCStreams streams, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];

            BMXRTCStreams *streamsOC = [[BMXRTCStreams alloc] init];
            {
                for (int i=0; i<streams.size(); i++) {
                    floo::BMXJanusStreamInfoPtr ptr = streams[i];
                    BMXJanusStreamInfo2Void(ptr)
                    BMXJanusStreamInfo *streamOC = [[[BMXJanusStreamInfo alloc] init] initWithCptr:(void*)lresult swigOwnCObject:NO];
                    [streamsOC addWithX:streamOC];
                }
            }
            
            [container onSubUnsubscribeWithSession:sessionOC room:roomOC streams:streamsOC error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message subscriber
     *
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onSubConfigure(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            
            [container onSubConfigureWithSession:sessionOC room:roomOC error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message subscriber switch 信令执行回调函数
     * @param session 操作的session对象
     * @param room 操作的room对象
     * @param publisher 新switch到的发布者id
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onSubSwitch(floo::BMXRTCSessionPtr session, floo::BMXRTCRoomPtr room, int64_t publisher, int error, const std::string& reason) {
        if (container) {
            void *s;
            void *r;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            {
                BMXRTCRoom2Void(room)
                r = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            BMXRTCRoom *roomOC = [[[BMXRTCRoom alloc] init] initWithCptr:(void*)r swigOwnCObject:NO];
            
            [container onSubSwitchWithSession:sessionOC room:roomOC publisher:publisher error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief message leave 信令执行回调函数
     * @param session 操作的session对象
     * @param roomId 退出的房间id
     * @param senderId 退出房间的成员id。
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     */
    virtual void onLeaveRoom(floo::BMXRTCSessionPtr session, int64_t roomId, int64_t senderId, int error, const std::string reason) {
        if (container) {
            void *s;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            
            [container onLeaveRoomWithSession:sessionOC roomId:roomId senderId:senderId error :error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief 订阅流的webrtc建立完毕(当ICE candidate操作成功，成功建立peerconnection链接时触发)
     * @param session 操作的session
     * @param senderId 订阅的发布者id
     **/
    virtual void onSubscribeWebrtcUp(floo::BMXRTCSessionPtr session, int64_t senderId) {
        if (container) {
            void *s;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            
            [container onSubscribeWebrtcUpWithSession:sessionOC senderId:senderId];
        }
    }

    /**
     * @brief webrtc媒体信息通知
     * @param session 操作的session
     * @param senderId 订阅的发布者id
     * @param type 媒体通知的类型
     * @param receiving 是否正在接收
     **/
    virtual void onMediaInfo(floo::BMXRTCSessionPtr session, int64_t senderId, BMXTrackType type, bool receiving, const std::string& mid) {
        if (container) {
            void *s;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            
            [container onMediaInfoWithSession:sessionOC senderId:senderId type:type receiving: receiving mid:[BMXStringUtil stdToNSString:mid]];
        }
    }

    /**
     * @brief webrtc错误报告通知
     * @param session 操作的session
     * @param senderId 订阅的发布者id
     * @param uplink 是否正在上传
     * @param nacks 上一秒钟的nacks数值
     **/
    virtual void onSlowlink(floo::BMXRTCSessionPtr session, int64_t senderId, bool uplink, int nacks) {
        if (container) {
            void *s;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            
            [container onSlowlinkWithSession:sessionOC senderId:senderId uplink:uplink nacks:nacks];
        }
    }

    /**
     * @brief webrtc被挂断通知(不是整个session的挂断通知，是unpublish类似操作的webrtc挂断通知)
     * @param session 操作的session
     * @param senderId 发起挂断的用户id
     * @param reason 挂断的原因（正常挂断reason为“DTLS alert”）
     **/
    virtual void onHangup(floo::BMXRTCSessionPtr session, int64_t senderId, const std::string& reason) {
        if (container) {
            void *s;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            
            [container onHangupWithSession:sessionOC senderId:senderId reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief webrtc挂断通知(SDK主动发起hangup请求之后接收到的hangup响应）
     * @param session 操作的session
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     **/
    virtual void onSessionHangup(floo::BMXRTCSessionPtr session, int64_t error, const std::string& reason) {
        if (container) {
            void *s;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            
            [container onSessionHangupWithSession:sessionOC error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief webrtc session销毁插件的回调通知
     * @param session 操作的session
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     **/
    virtual void onSessionDetach(floo::BMXRTCSessionPtr session, floo::BMXRTCSignalService::HandlerType type, int error, const std::string reason) {
        if (container) {
            void *s;
            {
                BMXRTCSession2Void(session)
                s = (void*)lresult;
            }
            
            BMXRTCSession *sessionOC = [[[BMXRTCSession alloc] init] initWithCptr:(void*)s swigOwnCObject:NO];
            
            [container onSessionDetachWithSession:sessionOC type:(BMXRTCSignalService_HandlerType)type error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    /**
     * @brief webrtc session销毁的回调通知
     * @param sessionId 操作的session
     * @param error 错误码详情，在失败的情况下返回详细的错误码
     * @param reason 服务器返回的错误失败的详细原因，失败下有效，正常为空字符串
     **/
    virtual void onSessionDestroy(int64_t sessionId, int error, const std::string reason) {
        if (container) {
            [container onSessionDestroyWithSessionId:sessionId error:error reason:[BMXStringUtil stdToNSString:reason]];
        }
    }

    //delegate
    virtual void addDelegate(id<BMXRTCSignalServiceProtocol> delegate, dispatch_queue_t queue){
        if (!container) {
            container = [(BMXDelegatesContainer<BMXRTCSignalServiceProtocol> *)[BMXDelegatesContainer alloc] init];
        }
        
        if (!containerLock) {
            containerLock = [[NSObject alloc] init];
        }
        
        if (delegate) {
            if (!queue) {
                queue = dispatch_get_main_queue();
            }
            
            @synchronized (containerLock) {
                [container addDelegate:delegate delegateQueue:queue];
            }
        }
    }
    virtual void removeDelegate(id<BMXRTCSignalServiceProtocol> delegate){
        if (container && delegate) {
            if (!containerLock) {
                containerLock = [[NSObject alloc] init];
            }
            
            @synchronized (containerLock) {
                [container removeDelegate:delegate];
            }
            
        }
    }
    BMXDelegatesContainer<BMXRTCSignalServiceProtocol> *container;
    //
private:
    NSObject *containerLock;
};

@implementation BMXRTCSignalService
{
    RTCSignalServiceListener *rtcSignalListener;
}

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
    if (!rtcSignalListener) {
      rtcSignalListener = new RTCSignalServiceListener();
    }
    if (rtcSignalListener) {
      BMXRTCSignalServiceListener * listener = [[[BMXRTCSignalServiceListener alloc] init] initWithCptr:rtcSignalListener swigOwnCObject:NO];
      [self addBMXRTCSignalServiceListenerWithListener: listener];
    }
  }
  return self;
}

- (void)createSession {
  _wrap_BMXRTCSignalService_createSession(self.swigCPtr);
}

- (void)attachSessionWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type {
  _wrap_BMXRTCSignalService_attachSession(self.swigCPtr, session.swigCPtr, (int)type);
}

- (void)createRoomWithSession:(BMXRTCSession*)session options:(BMXRoomCreateOptions*)options {
  _wrap_BMXRTCSignalService_createRoom(self.swigCPtr, session.swigCPtr, options.swigCPtr);
}

- (void)destroyRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room isPermanent:(BOOL)isPermanent {
  _wrap_BMXRTCSignalService_destroyRoom__SWIG_0(self.swigCPtr, session.swigCPtr, room.swigCPtr, isPermanent);
}

- (void)destroyRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room {
  _wrap_BMXRTCSignalService_destroyRoom__SWIG_1(self.swigCPtr, session.swigCPtr, room.swigCPtr);
}

- (void)editRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room options:(BMXRoomEditOptions*)options {
  _wrap_BMXRTCSignalService_editRoom(self.swigCPtr, session.swigCPtr, room.swigCPtr, options.swigCPtr);
}

- (void)isExistsRoomWithSession:(BMXRTCSession*)session roomId:(long long)roomId {
  _wrap_BMXRTCSignalService_isExistsRoom(self.swigCPtr, session.swigCPtr, roomId);
}

- (void)allowedWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room options:(BMXRoomAllowdOptions*)options {
  _wrap_BMXRTCSignalService_allowed(self.swigCPtr, session.swigCPtr, room.swigCPtr, options.swigCPtr);
}

- (void)kickParticipantsWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room userId:(long long)userId {
  _wrap_BMXRTCSignalService_kickParticipants(self.swigCPtr, session.swigCPtr, room.swigCPtr, userId);
}

- (void)moderateWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room options:(BMXRoomModerateOptions*)options {
  _wrap_BMXRTCSignalService_moderate(self.swigCPtr, session.swigCPtr, room.swigCPtr, options.swigCPtr);
}

- (void)listRoomWithSession:(BMXRTCSession*)session {
  _wrap_BMXRTCSignalService_listRoom(self.swigCPtr, session.swigCPtr);
}

- (void)listRoomparticipantsWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room {
  _wrap_BMXRTCSignalService_listRoomparticipants(self.swigCPtr, session.swigCPtr, room.swigCPtr);
}

- (void)trickleWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type sdpMid:(NSString*)sdpMid sdpMLineIndex:(int)sdpMLineIndex candidate:(NSString*)candidate {
  _wrap_BMXRTCSignalService_trickle(self.swigCPtr, session.swigCPtr, (int)type, sdpMid, sdpMLineIndex, candidate);
}

- (void)trickleCompletedWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type {
  _wrap_BMXRTCSignalService_trickleCompleted(self.swigCPtr, session.swigCPtr, (int)type);
}

- (void)pubJoinRoomWithSession:(BMXRTCSession*)session options:(BMXPubRoomJoinOptions*)options {
  _wrap_BMXRTCSignalService_pubJoinRoom(self.swigCPtr, session.swigCPtr, options.swigCPtr);
}

- (void)pubPublishWithSession:(BMXRTCSession*)session options:(BMXRoomPubConfigureOptions*)options sdp:(BMXRoomSDPInfo*)sdp {
  _wrap_BMXRTCSignalService_pubPublish(self.swigCPtr, session.swigCPtr, options.swigCPtr, sdp.swigCPtr);
}

- (void)pubUnPublishWithSession:(BMXRTCSession*)session {
  _wrap_BMXRTCSignalService_pubUnPublish(self.swigCPtr, session.swigCPtr);
}

- (void)pubConfigueWithSession:(BMXRTCSession*)session options:(BMXRoomPubConfigureOptions*)options sdp:(BMXRoomSDPInfo*)sdp {
  _wrap_BMXRTCSignalService_pubConfigue(self.swigCPtr, session.swigCPtr, options.swigCPtr, sdp.swigCPtr);
}

- (void)subJoinRoomWithSession:(BMXRTCSession*)session options:(BMXRoomSubJoinOptions*)options {
  _wrap_BMXRTCSignalService_subJoinRoom(self.swigCPtr, session.swigCPtr, options.swigCPtr);
}

- (void)subStartWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room sdp:(BMXRoomSDPInfo*)sdp {
  _wrap_BMXRTCSignalService_subStart(self.swigCPtr, session.swigCPtr, room.swigCPtr, sdp.swigCPtr);
}

- (void)subPauseWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room {
  _wrap_BMXRTCSignalService_subPause(self.swigCPtr, session.swigCPtr, room.swigCPtr);
}

- (void)subUnsubscribeWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room streams:(BMXRTCStreams*)streams {
  _wrap_BMXRTCSignalService_subUnsubscribe(self.swigCPtr, session.swigCPtr, room.swigCPtr, streams.swigCPtr);
}

- (void)subConfigureWithSession:(BMXRTCSession*)session options:(BMXRoomSubConfigureOptions*)options sdp:(BMXRoomSDPInfo*)sdp {
  _wrap_BMXRTCSignalService_subConfigure(self.swigCPtr, session.swigCPtr, options.swigCPtr, sdp.swigCPtr);
}

- (void)subSwitchWithSession:(BMXRTCSession*)session options:(BMXRoomSubSwitchOptions*)options {
  _wrap_BMXRTCSignalService_subSwitch(self.swigCPtr, session.swigCPtr, options.swigCPtr);
}

- (void)leaveRoomWithSession:(BMXRTCSession*)session {
  _wrap_BMXRTCSignalService_leaveRoom(self.swigCPtr, session.swigCPtr);
}

- (void)hangUpSessionWithSession:(BMXRTCSession*)session {
  _wrap_BMXRTCSignalService_hangUpSession(self.swigCPtr, session.swigCPtr);
}

- (void)detachSessionWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type {
  _wrap_BMXRTCSignalService_detachSession(self.swigCPtr, session.swigCPtr, (int)type);
}

- (void)destroySessionWithSession:(BMXRTCSession*)session {
  _wrap_BMXRTCSignalService_destroySession(self.swigCPtr, session.swigCPtr);
}

- (void)addBMXRTCSignalServiceListenerWithListener:(BMXRTCSignalServiceListener*)listener {
  _wrap_BMXRTCSignalService_addBMXRTCSignalServiceListener(self.swigCPtr, listener.swigCPtr);
}

- (void)removeBMXRTCSignalServiceListenerWithListener:(BMXRTCSignalServiceListener*)listener {
  _wrap_BMXRTCSignalService_removeBMXRTCSignalServiceListener(self.swigCPtr, listener.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCSignalService((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

- (void)addDelegate:(id<BMXRTCSignalServiceProtocol>)aDelegate {
    [self addDelegate:aDelegate delegateQueue:nil];
}

- (void)addDelegate:(id)aDelegate delegateQueue:(dispatch_queue_t)aQueue {
    if ([aDelegate conformsToProtocol:@protocol(BMXRTCSignalServiceProtocol)]) {
        rtcSignalListener->addDelegate(aDelegate, aQueue);
    }
}


- (void)removeDelegate:(id)aDelegate {
    if (aDelegate == nil) {
        return;
    }
    if ([aDelegate conformsToProtocol:@protocol(BMXRTCSignalServiceProtocol)]) {
        rtcSignalListener->removeDelegate(aDelegate);
    }
}

- (void)addRTCSignalListener:(id<BMXRTCSignalServiceProtocol>)listener {
    if (listener == nil) {
        return;
    }
    
    if ([listener conformsToProtocol:@protocol(BMXRTCSignalServiceProtocol)]) {
        rtcSignalListener->addDelegate(listener, nil);
    }
}

- (void)removeRTCSignalListener:(id<BMXRTCSignalServiceProtocol>)listener {
    if (listener == nil) {
        return;
    }
    rtcSignalListener->removeDelegate(listener);
}

- (void)removeRTCSignalListener {
    if (rtcSignalListener) {
      BMXRTCSignalServiceListener * listener = [[[BMXRTCSignalServiceListener alloc] init] initWithCptr:rtcSignalListener swigOwnCObject:NO];
      [self removeBMXRTCSignalServiceListenerWithListener: listener];
    }
}

@end


@implementation BMXRTCSignalServiceListener

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCSignalServiceListener();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)onSessionCreateWithSession:(BMXRTCSession*)session error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onSessionCreate(self.swigCPtr, session.swigCPtr, error, reason);
}

- (void)onSessionAttachWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onSessionAttach(self.swigCPtr, session.swigCPtr, (int)type, error, reason);
}

- (void)onRoomCreateWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onRoomCreate(self.swigCPtr, session.swigCPtr, room.swigCPtr, error, reason);
}

- (void)onRoomDestroyWithSession:(BMXRTCSession*)session roomId:(long long)roomId error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onRoomDestroy(self.swigCPtr, session.swigCPtr, roomId, error, reason);
}

- (void)onRoomEditWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onRoomEdit(self.swigCPtr, session.swigCPtr, room.swigCPtr, error, reason);
}

- (void)onRoomExistWithSession:(BMXRTCSession*)session roomId:(long long)roomId exist:(BOOL)exist error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onRoomExist(self.swigCPtr, session.swigCPtr, roomId, exist, error, reason);
}

- (void)onRoomAllowedWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room tokens:(TagList*)tokens error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onRoomAllowed(self.swigCPtr, session.swigCPtr, room.swigCPtr, tokens.swigCPtr, error, reason);
}

- (void)onRoomKickWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room userId:(long long)userId error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onRoomKick(self.swigCPtr, session.swigCPtr, room.swigCPtr, userId, error, reason);
}

- (void)onRoomModerateWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room userId:(long long)userId error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onRoomModerate(self.swigCPtr, session.swigCPtr, room.swigCPtr, userId, error, reason);
}

- (void)onRoomListWithSession:(BMXRTCSession*)session rooms:(BMXRTCRooms*)rooms error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onRoomList(self.swigCPtr, session.swigCPtr, rooms.swigCPtr, error, reason);
}

- (void)onRoomListParticipantsWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room participants:(BMXRTCRoomParticipants*)participants error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onRoomListParticipants(self.swigCPtr, session.swigCPtr, room.swigCPtr, participants.swigCPtr, error, reason);
}

- (void)onPubJoinRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room publishers:(BMXRTCPublishers*)publishers error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onPubJoinRoom(self.swigCPtr, session.swigCPtr, room.swigCPtr, publishers.swigCPtr, error, reason);
}

- (void)onOtherPubJoinRoomWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room publishers:(BMXRTCPublishers*)publishers {
  _wrap_BMXRTCSignalServiceListener_onOtherPubJoinRoom(self.swigCPtr, session.swigCPtr, room.swigCPtr, publishers.swigCPtr);
}

- (void)onPubConfigureWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room sdp:(BMXRoomSDPInfo*)sdp streams:(BMXRTCStreams*)streams error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onPubConfigure(self.swigCPtr, session.swigCPtr, room.swigCPtr, sdp.swigCPtr, streams.swigCPtr, error, reason);
}

- (void)onPubUnPublishWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room senderId:(int)senderId error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onPubUnPublish(self.swigCPtr, session.swigCPtr, room.swigCPtr, senderId, error, reason);
}

- (void)onPublishWebrtcUpWithSession:(BMXRTCSession*)session {
  _wrap_BMXRTCSignalServiceListener_onPublishWebrtcUp(self.swigCPtr, session.swigCPtr);
}

- (void)onSubJoinRoomUpdateWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room sdp:(BMXRoomSDPInfo*)sdp senderId:(long long)senderId streams:(BMXRTCStreams*)streams error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onSubJoinRoomUpdate(self.swigCPtr, session.swigCPtr, room.swigCPtr, sdp.swigCPtr, senderId, streams.swigCPtr, error, reason);
}

- (void)onSubStartWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onSubStart(self.swigCPtr, session.swigCPtr, room.swigCPtr, error, reason);
}

- (void)onSubPauseWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onSubPause(self.swigCPtr, session.swigCPtr, room.swigCPtr, error, reason);
}

- (void)onSubUnsubscribeWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room streams:(BMXRTCStreams*)streams error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onSubUnsubscribe(self.swigCPtr, session.swigCPtr, room.swigCPtr, streams.swigCPtr, error, reason);
}

- (void)onSubConfigureWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onSubConfigure(self.swigCPtr, session.swigCPtr, room.swigCPtr, error, reason);
}

- (void)onSubSwitchWithSession:(BMXRTCSession*)session room:(BMXRTCRoom*)room publisher:(long long)publisher error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onSubSwitch(self.swigCPtr, session.swigCPtr, room.swigCPtr, publisher, error, reason);
}

- (void)onLeaveRoomWithSession:(BMXRTCSession*)session roomId:(long long)roomId senderId:(long long)senderId error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onLeaveRoom(self.swigCPtr, session.swigCPtr, roomId, senderId, error, reason);
}

- (void)onSubscribeWebrtcUpWithSession:(BMXRTCSession*)session senderId:(long long)senderId {
  _wrap_BMXRTCSignalServiceListener_onSubscribeWebrtcUp(self.swigCPtr, session.swigCPtr, senderId);
}

- (void)onMediaInfoWithSession:(BMXRTCSession*)session senderId:(long long)senderId type:(BMXTrackType)type receiving:(BOOL)receiving mid:(NSString*)mid {
  _wrap_BMXRTCSignalServiceListener_onMediaInfo(self.swigCPtr, session.swigCPtr, senderId, (int)type, receiving, mid);
}

- (void)onSlowlinkWithSession:(BMXRTCSession*)session senderId:(long long)senderId uplink:(BOOL)uplink nacks:(int)nacks {
  _wrap_BMXRTCSignalServiceListener_onSlowlink(self.swigCPtr, session.swigCPtr, senderId, uplink, nacks);
}

- (void)onHangupWithSession:(BMXRTCSession*)session senderId:(long long)senderId reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onHangup(self.swigCPtr, session.swigCPtr, senderId, reason);
}

- (void)onSessionHangupWithSession:(BMXRTCSession*)session error:(long long)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onSessionHangup(self.swigCPtr, session.swigCPtr, error, reason);
}

- (void)onSessionDetachWithSession:(BMXRTCSession*)session type:(BMXRTCSignalService_HandlerType)type error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onSessionDetach(self.swigCPtr, session.swigCPtr, (int)type, error, reason);
}

- (void)onSessionDestroyWithSessionId:(long long)sessionId error:(int)error reason:(NSString*)reason {
  _wrap_BMXRTCSignalServiceListener_onSessionDestroy(self.swigCPtr, sessionId, error, reason);
}

- (void)registerRTCSignalServiceWithService:(BMXRTCSignalService*)service {
  _wrap_BMXRTCSignalServiceListener_registerRTCSignalService(self.swigCPtr, service.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCSignalServiceListener((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroup

- (long long)groupId {
   return _wrap_BMXGroup_groupId(self.swigCPtr); 
}

- (BMXGroup_GroupType)groupType {
   return (BMXGroup_GroupType)_wrap_BMXGroup_groupType(self.swigCPtr); 
}

- (NSString*)myNickname {
  {
    return _wrap_BMXGroup_myNickname(self.swigCPtr);
  }
}

- (NSString*)name {
  {
    return _wrap_BMXGroup_name(self.swigCPtr);
  }
}

- (NSString*)description {
  {
    return _wrap_BMXGroup_description(self.swigCPtr);
  }
}

- (NSString*)avatarRatelUrl {
  {
    return _wrap_BMXGroup_avatarRatelUrl(self.swigCPtr);
  }
}

- (NSString*)avatarUrl {
  {
    return _wrap_BMXGroup_avatarUrl(self.swigCPtr);
  }
}

- (NSString*)avatarPath {
  {
    return _wrap_BMXGroup_avatarPath(self.swigCPtr);
  }
}

- (NSString*)avatarThumbnailUrl {
  {
    return _wrap_BMXGroup_avatarThumbnailUrl(self.swigCPtr);
  }
}

- (NSString*)avatarThumbnailPath {
  {
    return _wrap_BMXGroup_avatarThumbnailPath(self.swigCPtr);
  }
}

- (long long)createTime {
   return _wrap_BMXGroup_createTime(self.swigCPtr); 
}

- (NSString*)extension {
  {
    return _wrap_BMXGroup_extension(self.swigCPtr);
  }
}

- (long long)ownerId {
   return _wrap_BMXGroup_ownerId(self.swigCPtr); 
}

- (int)capacity {
   return _wrap_BMXGroup_capacity(self.swigCPtr); 
}

- (int)membersCount {
   return _wrap_BMXGroup_membersCount(self.swigCPtr); 
}

- (int)adminsCount {
   return _wrap_BMXGroup_adminsCount(self.swigCPtr); 
}

- (int)blockListSize {
   return _wrap_BMXGroup_blockListSize(self.swigCPtr); 
}

- (int)bannedListSize {
   return _wrap_BMXGroup_bannedListSize(self.swigCPtr); 
}

- (int)sharedFilesCount {
   return _wrap_BMXGroup_sharedFilesCount(self.swigCPtr); 
}

- (long long)latestAnnouncementId {
   return _wrap_BMXGroup_latestAnnouncementId(self.swigCPtr); 
}

- (BMXGroup_MsgPushMode)msgPushMode {
   return (BMXGroup_MsgPushMode)_wrap_BMXGroup_msgPushMode(self.swigCPtr); 
}

- (BMXGroup_ModifyMode)modifyMode {
   return (BMXGroup_ModifyMode)_wrap_BMXGroup_modifyMode(self.swigCPtr); 
}

- (BMXGroup_JoinAuthMode)joinAuthMode {
   return (BMXGroup_JoinAuthMode)_wrap_BMXGroup_joinAuthMode(self.swigCPtr); 
}

- (BMXGroup_InviteMode)inviteMode {
   return (BMXGroup_InviteMode)_wrap_BMXGroup_inviteMode(self.swigCPtr); 
}

- (BMXGroup_MsgMuteMode)msgMuteMode {
   return (BMXGroup_MsgMuteMode)_wrap_BMXGroup_msgMuteMode(self.swigCPtr); 
}

- (BMXGroup_GroupStatus)groupStatus {
   return (BMXGroup_GroupStatus)_wrap_BMXGroup_groupStatus(self.swigCPtr); 
}

- (BOOL)isMember {
   return _wrap_BMXGroup_isMember(self.swigCPtr); 
}

- (BOOL)enableReadAck {
   return _wrap_BMXGroup_enableReadAck(self.swigCPtr); 
}

- (BOOL)historyVisible {
   return _wrap_BMXGroup_historyVisible(self.swigCPtr); 
}

- (BMXGroup_MemberRoleType)roleType {
   return (BMXGroup_MemberRoleType)_wrap_BMXGroup_roleType(self.swigCPtr); 
}

- (long long)banExpireTime {
   return _wrap_BMXGroup_banExpireTime(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroup((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupService
{
    GroupServiceListener *groupListener;
}

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
    if (!groupListener) {
      groupListener = new GroupServiceListener();
    }
    if (groupListener) {
      BMXGroupServiceListener * listener = [[[BMXGroupServiceListener alloc] init] initWithCptr:groupListener swigOwnCObject:NO];
      [self addGroupListenerWithListener: listener];
    }
  }
  return self;
}

- (BMXErrorCode)get:(BMXGroupList*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXGroupService_get(self.swigCPtr, list.swigCPtr, forceRefresh);
}

- (BMXErrorCode)searchWithList:(BMXGroupList*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXGroupService_search__SWIG_0(self.swigCPtr, list.swigCPtr, forceRefresh);
}

- (BMXErrorCode)fetchGroupsByIdListWithGroupIdList:(ListOfLongLong*)groupIdList list:(BMXGroupList*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXGroupService_fetchGroupsByIdList(self.swigCPtr, groupIdList.swigCPtr, list.swigCPtr, forceRefresh);
}

- (BMXErrorCode)searchWithGroupIdList:(ListOfLongLong*)groupIdList list:(BMXGroupList*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXGroupService_search__SWIG_1(self.swigCPtr, groupIdList.swigCPtr, list.swigCPtr, forceRefresh);
}

- (BMXErrorCode)fetchGroupByIdWithGroupId:(long long)groupId group:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh {
    void *tmp = nullptr;
    BMXErrorCode err = (BMXErrorCode)_wrap_BMXGroupService_fetchGroupById(self.swigCPtr, groupId, &tmp, forceRefresh);
    group.swigCPtr = tmp;
    return err;
}

- (BMXErrorCode)searchWithGroupId:(long long)groupId group:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh {
  void *tmp = nullptr;
  BMXErrorCode err = (BMXErrorCode)_wrap_BMXGroupService_search__SWIG_2(self.swigCPtr, groupId, &tmp, forceRefresh);
  group.swigCPtr = tmp;
  return err;
}

- (BMXErrorCode)fetchLocalGroupsByNameWithList:(BMXGroupList*)list name:(NSString*)name {
   return (BMXErrorCode)_wrap_BMXGroupService_fetchLocalGroupsByName(self.swigCPtr, list.swigCPtr, name);
}

- (BMXErrorCode)searchWithList:(BMXGroupList*)list name:(NSString*)name {
   return (BMXErrorCode)_wrap_BMXGroupService_search__SWIG_3(self.swigCPtr, list.swigCPtr, name);
}

- (BMXErrorCode)createWithOptions:(BMXGroupServiceCreateGroupOptions*)options group:(BMXGroup*)group {
    void *tmp = nullptr;
    BMXErrorCode err = (BMXErrorCode)_wrap_BMXGroupService_create(self.swigCPtr, options.swigCPtr, &tmp);
    group.swigCPtr = tmp;
    return err;
}

- (BMXErrorCode)destroyWithGroup:(BMXGroup*)group {
   return (BMXErrorCode)_wrap_BMXGroupService_destroy(self.swigCPtr, group.swigCPtr);
}

- (BMXErrorCode)joinWithGroup:(BMXGroup*)group message:(NSString*)message {
   return (BMXErrorCode)_wrap_BMXGroupService_join(self.swigCPtr, group.swigCPtr, message);
}

- (BMXErrorCode)leaveWithGroup:(BMXGroup*)group {
   return (BMXErrorCode)_wrap_BMXGroupService_leave(self.swigCPtr, group.swigCPtr);
}

- (BMXErrorCode)getInfo:(BMXGroup*)group {
   return (BMXErrorCode)_wrap_BMXGroupService_getInfo(self.swigCPtr, group.swigCPtr);
}

- (BMXErrorCode)getMembersNickname:(BMXGroup*)group members:(ListOfLongLong*)members list:(BMXGroupMemberList*)list {
   return (BMXErrorCode)_wrap_BMXGroupService_getMembersNickname(self.swigCPtr, group.swigCPtr, members.swigCPtr, list.swigCPtr);
}

- (BMXErrorCode)getInvitationList:(BMXGroupInvitationPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize {
   return (BMXErrorCode)_wrap_BMXGroupService_getInvitationList__SWIG_0(self.swigCPtr, result.swigCPtr, cursor, pageSize);
}

- (BMXErrorCode)getInvitationList:(BMXGroupInvitationPage*)result cursor:(NSString*)cursor {
   return (BMXErrorCode)_wrap_BMXGroupService_getInvitationList__SWIG_1(self.swigCPtr, result.swigCPtr, cursor);
}

- (BMXErrorCode)getInvitationList:(BMXGroupInvitationPage*)result {
   return (BMXErrorCode)_wrap_BMXGroupService_getInvitationList__SWIG_2(self.swigCPtr, result.swigCPtr);
}

- (BMXErrorCode)getApplicationList:(BMXGroupList*)list result:(BMXGroupApplicationPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize {
   return (BMXErrorCode)_wrap_BMXGroupService_getApplicationList__SWIG_0(self.swigCPtr, list.swigCPtr, result.swigCPtr, cursor, pageSize);
}

- (BMXErrorCode)getApplicationList:(BMXGroupList*)list result:(BMXGroupApplicationPage*)result cursor:(NSString*)cursor {
   return (BMXErrorCode)_wrap_BMXGroupService_getApplicationList__SWIG_1(self.swigCPtr, list.swigCPtr, result.swigCPtr, cursor);
}

- (BMXErrorCode)getApplicationList:(BMXGroupList*)list result:(BMXGroupApplicationPage*)result {
   return (BMXErrorCode)_wrap_BMXGroupService_getApplicationList__SWIG_2(self.swigCPtr, list.swigCPtr, result.swigCPtr);
}

- (BMXErrorCode)getMembers:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize {
   return (BMXErrorCode)_wrap_BMXGroupService_getMembers__SWIG_0(self.swigCPtr, group.swigCPtr, result.swigCPtr, cursor, pageSize);
}

- (BMXErrorCode)getMembers:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result cursor:(NSString*)cursor {
   return (BMXErrorCode)_wrap_BMXGroupService_getMembers__SWIG_1(self.swigCPtr, group.swigCPtr, result.swigCPtr, cursor);
}

- (BMXErrorCode)getMembers:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result {
   return (BMXErrorCode)_wrap_BMXGroupService_getMembers__SWIG_2(self.swigCPtr, group.swigCPtr, result.swigCPtr);
}

- (BMXErrorCode)getMembers:(BMXGroup*)group list:(BMXGroupMemberList*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXGroupService_getMembers__SWIG_3(self.swigCPtr, group.swigCPtr, list.swigCPtr, forceRefresh);
}

- (BMXErrorCode)addMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members message:(NSString*)message {
   return (BMXErrorCode)_wrap_BMXGroupService_addMembers(self.swigCPtr, group.swigCPtr, members.swigCPtr, message);
}

- (BMXErrorCode)removeMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members reason:(NSString*)reason {
   return (BMXErrorCode)_wrap_BMXGroupService_removeMembers(self.swigCPtr, group.swigCPtr, members.swigCPtr, reason);
}

- (BMXErrorCode)addAdminsWithGroup:(BMXGroup*)group admins:(ListOfLongLong*)admins message:(NSString*)message {
   return (BMXErrorCode)_wrap_BMXGroupService_addAdmins(self.swigCPtr, group.swigCPtr, admins.swigCPtr, message);
}

- (BMXErrorCode)removeAdminsWithGroup:(BMXGroup*)group admins:(ListOfLongLong*)admins reason:(NSString*)reason {
   return (BMXErrorCode)_wrap_BMXGroupService_removeAdmins(self.swigCPtr, group.swigCPtr, admins.swigCPtr, reason);
}

- (BMXErrorCode)getAdmins:(BMXGroup*)group list:(BMXGroupMemberList*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXGroupService_getAdmins(self.swigCPtr, group.swigCPtr, list.swigCPtr, forceRefresh);
}

- (BMXErrorCode)blockMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members {
   return (BMXErrorCode)_wrap_BMXGroupService_blockMembers(self.swigCPtr, group.swigCPtr, members.swigCPtr);
}

- (BMXErrorCode)unblockMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members {
   return (BMXErrorCode)_wrap_BMXGroupService_unblockMembers(self.swigCPtr, group.swigCPtr, members.swigCPtr);
}

- (BMXErrorCode)getBlockList:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize {
   return (BMXErrorCode)_wrap_BMXGroupService_getBlockList__SWIG_0(self.swigCPtr, group.swigCPtr, result.swigCPtr, cursor, pageSize);
}

- (BMXErrorCode)getBlockList:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result cursor:(NSString*)cursor {
   return (BMXErrorCode)_wrap_BMXGroupService_getBlockList__SWIG_1(self.swigCPtr, group.swigCPtr, result.swigCPtr, cursor);
}

- (BMXErrorCode)getBlockList:(BMXGroup*)group result:(BMXGroupMemberResultPage*)result {
   return (BMXErrorCode)_wrap_BMXGroupService_getBlockList__SWIG_2(self.swigCPtr, group.swigCPtr, result.swigCPtr);
}

- (BMXErrorCode)getBlockList:(BMXGroup*)group list:(BMXGroupMemberList*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXGroupService_getBlockList__SWIG_3(self.swigCPtr, group.swigCPtr, list.swigCPtr, forceRefresh);
}

- (BMXErrorCode)banMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members duration:(long long)duration reason:(NSString*)reason {
   return (BMXErrorCode)_wrap_BMXGroupService_banMembers__SWIG_0(self.swigCPtr, group.swigCPtr, members.swigCPtr, duration, reason);
}

- (BMXErrorCode)banMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members duration:(long long)duration {
   return (BMXErrorCode)_wrap_BMXGroupService_banMembers__SWIG_1(self.swigCPtr, group.swigCPtr, members.swigCPtr, duration);
}

- (BMXErrorCode)banGroupWithGroup:(BMXGroup*)group duration:(long long)duration {
   return (BMXErrorCode)_wrap_BMXGroupService_banGroup(self.swigCPtr, group.swigCPtr, duration);
}

- (BMXErrorCode)unbanMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members {
   return (BMXErrorCode)_wrap_BMXGroupService_unbanMembers(self.swigCPtr, group.swigCPtr, members.swigCPtr);
}

- (BMXErrorCode)unbanGroupWithGroup:(BMXGroup*)group {
   return (BMXErrorCode)_wrap_BMXGroupService_unbanGroup(self.swigCPtr, group.swigCPtr);
}

- (BMXErrorCode)getBannedMembers:(BMXGroup*)group result:(BMXGroupBannedMemberResultPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize {
   return (BMXErrorCode)_wrap_BMXGroupService_getBannedMembers__SWIG_0(self.swigCPtr, group.swigCPtr, result.swigCPtr, cursor, pageSize);
}

- (BMXErrorCode)getBannedMembers:(BMXGroup*)group result:(BMXGroupBannedMemberResultPage*)result cursor:(NSString*)cursor {
   return (BMXErrorCode)_wrap_BMXGroupService_getBannedMembers__SWIG_1(self.swigCPtr, group.swigCPtr, result.swigCPtr, cursor);
}

- (BMXErrorCode)getBannedMembers:(BMXGroup*)group result:(BMXGroupBannedMemberResultPage*)result {
   return (BMXErrorCode)_wrap_BMXGroupService_getBannedMembers__SWIG_2(self.swigCPtr, group.swigCPtr, result.swigCPtr);
}

- (BMXErrorCode)getBannedMembers:(BMXGroup*)group list:(BMXGroupBannedMemberList*)list {
   return (BMXErrorCode)_wrap_BMXGroupService_getBannedMembers__SWIG_3(self.swigCPtr, group.swigCPtr, list.swigCPtr);
}

- (BMXErrorCode)muteMessageWithGroup:(BMXGroup*)group mode:(BMXGroup_MsgMuteMode)mode {
   return (BMXErrorCode)_wrap_BMXGroupService_muteMessage(self.swigCPtr, group.swigCPtr, (int)mode);
}

- (BMXErrorCode)acceptApplicationWithGroup:(BMXGroup*)group applicantId:(long long)applicantId {
   return (BMXErrorCode)_wrap_BMXGroupService_acceptApplication(self.swigCPtr, group.swigCPtr, applicantId);
}

- (BMXErrorCode)declineApplicationWithGroup:(BMXGroup*)group applicantId:(long long)applicantId reason:(NSString*)reason {
   return (BMXErrorCode)_wrap_BMXGroupService_declineApplication__SWIG_0(self.swigCPtr, group.swigCPtr, applicantId, reason);
}

- (BMXErrorCode)declineApplicationWithGroup:(BMXGroup*)group applicantId:(long long)applicantId {
   return (BMXErrorCode)_wrap_BMXGroupService_declineApplication__SWIG_1(self.swigCPtr, group.swigCPtr, applicantId);
}

- (BMXErrorCode)acceptInvitationWithGroup:(BMXGroup*)group inviter:(long long)inviter {
   return (BMXErrorCode)_wrap_BMXGroupService_acceptInvitation(self.swigCPtr, group.swigCPtr, inviter);
}

- (BMXErrorCode)declineInvitationWithGroup:(BMXGroup*)group inviter:(long long)inviter reason:(NSString*)reason {
   return (BMXErrorCode)_wrap_BMXGroupService_declineInvitation__SWIG_0(self.swigCPtr, group.swigCPtr, inviter, reason);
}

- (BMXErrorCode)declineInvitationWithGroup:(BMXGroup*)group inviter:(long long)inviter {
   return (BMXErrorCode)_wrap_BMXGroupService_declineInvitation__SWIG_1(self.swigCPtr, group.swigCPtr, inviter);
}

- (BMXErrorCode)transferOwnerWithGroup:(BMXGroup*)group newOwnerId:(long long)newOwnerId {
   return (BMXErrorCode)_wrap_BMXGroupService_transferOwner(self.swigCPtr, group.swigCPtr, newOwnerId);
}

- (BMXErrorCode)uploadSharedFileWithGroup:(BMXGroup*)group filePath:(NSString*)filePath displayName:(NSString*)displayName extensionName:(NSString*)extensionName arg5:(void(^)(int progress))arg5 {
   return (BMXErrorCode)_wrap_BMXGroupService_uploadSharedFile(self.swigCPtr, group.swigCPtr, filePath, displayName, extensionName, (void *)arg5);
}

- (BMXErrorCode)cancelUploadSharedFileWithGroup:(BMXGroup*)group filePath:(NSString*)filePath {
   return (BMXErrorCode)_wrap_BMXGroupService_cancelUploadSharedFile(self.swigCPtr, group.swigCPtr, filePath);
}

- (BMXErrorCode)removeSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile {
   return (BMXErrorCode)_wrap_BMXGroupService_removeSharedFile(self.swigCPtr, group.swigCPtr, sharedFile.swigCPtr);
}

- (BMXErrorCode)downloadSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile arg3:(void(^)(int progress))arg3 {
   return (BMXErrorCode)_wrap_BMXGroupService_downloadSharedFile(self.swigCPtr, group.swigCPtr, sharedFile.swigCPtr, (void *)arg3);
}

- (BMXErrorCode)cancelDownloadSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile {
   return (BMXErrorCode)_wrap_BMXGroupService_cancelDownloadSharedFile(self.swigCPtr, group.swigCPtr, sharedFile.swigCPtr);
}

- (BMXErrorCode)getSharedFilesList:(BMXGroup*)group list:(BMXGroupSharedFileList*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXGroupService_getSharedFilesList(self.swigCPtr, group.swigCPtr, list.swigCPtr, forceRefresh);
}

- (BMXErrorCode)changeSharedFileNameWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile name:(NSString*)name {
   return (BMXErrorCode)_wrap_BMXGroupService_changeSharedFileName(self.swigCPtr, group.swigCPtr, sharedFile.swigCPtr, name);
}

- (BMXErrorCode)getLatestAnnouncement:(BMXGroup*)group announcement:(BMXGroupAnnouncement*)announcement forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXGroupService_getLatestAnnouncement(self.swigCPtr, group.swigCPtr, announcement.swigCPtr, forceRefresh);
}

- (BMXErrorCode)getAnnouncementList:(BMXGroup*)group list:(BMXGroupAnnouncementList*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXGroupService_getAnnouncementList(self.swigCPtr, group.swigCPtr, list.swigCPtr, forceRefresh);
}

- (BMXErrorCode)editAnnouncementWithGroup:(BMXGroup*)group title:(NSString*)title content:(NSString*)content {
   return (BMXErrorCode)_wrap_BMXGroupService_editAnnouncement(self.swigCPtr, group.swigCPtr, title, content);
}

- (BMXErrorCode)deleteAnnouncementWithGroup:(BMXGroup*)group announcementId:(long long)announcementId {
   return (BMXErrorCode)_wrap_BMXGroupService_deleteAnnouncement(self.swigCPtr, group.swigCPtr, announcementId);
}

- (BMXErrorCode)setName:(BMXGroup*)group name:(NSString*)name {
   return (BMXErrorCode)_wrap_BMXGroupService_setName(self.swigCPtr, group.swigCPtr, name);
}

- (BMXErrorCode)setDescription:(BMXGroup*)group description:(NSString*)description {
   return (BMXErrorCode)_wrap_BMXGroupService_setDescription(self.swigCPtr, group.swigCPtr, description);
}

- (BMXErrorCode)setExtension:(BMXGroup*)group extension:(NSString*)extension {
   return (BMXErrorCode)_wrap_BMXGroupService_setExtension(self.swigCPtr, group.swigCPtr, extension);
}

- (BMXErrorCode)setMyNickname:(BMXGroup*)group nickname:(NSString*)nickname {
   return (BMXErrorCode)_wrap_BMXGroupService_setMyNickname(self.swigCPtr, group.swigCPtr, nickname);
}

- (BMXErrorCode)setMsgPushMode:(BMXGroup*)group mode:(BMXGroup_MsgPushMode)mode {
   return (BMXErrorCode)_wrap_BMXGroupService_setMsgPushMode(self.swigCPtr, group.swigCPtr, (int)mode);
}

- (BMXErrorCode)setJoinAuthMode:(BMXGroup*)group mode:(BMXGroup_JoinAuthMode)mode {
   return (BMXErrorCode)_wrap_BMXGroupService_setJoinAuthMode(self.swigCPtr, group.swigCPtr, (int)mode);
}

- (BMXErrorCode)setInviteMode:(BMXGroup*)group mode:(BMXGroup_InviteMode)mode {
   return (BMXErrorCode)_wrap_BMXGroupService_setInviteMode(self.swigCPtr, group.swigCPtr, (int)mode);
}

- (BMXErrorCode)setAllowMemberModify:(BMXGroup*)group enable:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXGroupService_setAllowMemberModify(self.swigCPtr, group.swigCPtr, enable);
}

- (BMXErrorCode)setEnableReadAck:(BMXGroup*)group enable:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXGroupService_setEnableReadAck(self.swigCPtr, group.swigCPtr, enable);
}

- (BMXErrorCode)setHistoryVisible:(BMXGroup*)group enable:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXGroupService_setHistoryVisible(self.swigCPtr, group.swigCPtr, enable);
}

- (BMXErrorCode)setAvatar:(BMXGroup*)group avatarPath:(NSString*)avatarPath arg3:(void(^)(int progress))arg3 {
   return (BMXErrorCode)_wrap_BMXGroupService_setAvatar(self.swigCPtr, group.swigCPtr, avatarPath, (void *)arg3);
}

- (BMXErrorCode)downloadAvatarWithGroup:(BMXGroup*)group thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback {
   return (BMXErrorCode)_wrap_BMXGroupService_downloadAvatar(self.swigCPtr, group.swigCPtr, thumbnail, (void *)callback);
}

- (void)get:(BOOL)forceRefresh completion:(void (^)(BMXGroupList *res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupList:^BMXErrorCode(BMXGroupList *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_get(self.swigCPtr, res.swigCPtr, forceRefresh);
    } completion:resBlock];
}

- (void)fetchGroupsByIdListWithGroupIdList:(ListOfLongLong*)groupIdList forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupList *res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupList:^BMXErrorCode(BMXGroupList *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_fetchGroupsByIdList(self.swigCPtr, groupIdList.swigCPtr, res.swigCPtr, forceRefresh);
    } completion:resBlock];
}

- (void)fetchGroupByIdWithGroupId:(long long)groupId forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroup *res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroup:^BMXErrorCode(BMXGroup *res) {
        void *tmp = nullptr;
        BMXErrorCode err = (BMXErrorCode)_wrap_BMXGroupService_fetchGroupById(self.swigCPtr, groupId, &tmp, forceRefresh);
        res.swigCPtr = tmp;
        return err;
    } completion:resBlock];
}

- (void)searchWithGroupId:(long long)groupId forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroup *res, BMXError *aError)) resBlock  {
    [BMXAsync asyncWithBMXGroup:^BMXErrorCode(BMXGroup *res) {
        void *tmp = nullptr;
        BMXErrorCode err = (BMXErrorCode)_wrap_BMXGroupService_search__SWIG_2(self.swigCPtr, groupId, &tmp, forceRefresh);
        res.swigCPtr = tmp;
        return err;
    } completion:resBlock];
}

- (void)fetchLocalGroupsByName:(NSString*)name completion:(void (^)(BMXGroupList *res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupList:^BMXErrorCode(BMXGroupList *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_fetchLocalGroupsByName(self.swigCPtr, res.swigCPtr, name);
    } completion:resBlock];
}

- (void)createWithOptions:(BMXGroupServiceCreateGroupOptions*)options completion:(void (^)(BMXGroup* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroup:^BMXErrorCode(BMXGroup *res) {
        void *tmp = nullptr;
        BMXErrorCode err = (BMXErrorCode)_wrap_BMXGroupService_create(self.swigCPtr, options.swigCPtr, &tmp);
        res.swigCPtr = tmp;
        return err;
    } completion:resBlock];
}

- (void)destroyWithGroup:(BMXGroup*)group completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_destroy(self.swigCPtr, group.swigCPtr);
    } completion:resBlock];
}

- (void)joinWithGroup:(BMXGroup*)group message:(NSString*)message completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_join(self.swigCPtr, group.swigCPtr, message);
    } completion:resBlock];
}

- (void)leaveWithGroup:(BMXGroup*)group completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_leave(self.swigCPtr, group.swigCPtr);
    } completion:resBlock];
}

- (void)getInfo:(BMXGroup*)group completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_getInfo(self.swigCPtr, group.swigCPtr);
    } completion:resBlock];
}

- (void)getMembersNickname: (BMXGroup*)group members:(ListOfLongLong*)members completion:(void (^)(BMXGroupMemberList* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupMemberList:^BMXErrorCode(BMXGroupMemberList *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getMembersNickname(self.swigCPtr, group.swigCPtr, members.swigCPtr, res.swigCPtr);
    } completion:resBlock];
}

- (void)getInvitationList: (NSString*)cursor pageSize:(int)pageSize completion:(void (^)(BMXGroupInvitationPage* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupInvitationPage:^BMXErrorCode(BMXGroupInvitationPage *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getInvitationList__SWIG_0(self.swigCPtr, res.swigCPtr, cursor, pageSize);
    } completion:resBlock];
}

- (void)getApplicationList:(BMXGroupList*)list cursor:(NSString*)cursor pageSize:(int)pageSize completion:(void (^)(BMXGroupApplicationPage* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupApplicationPage:^BMXErrorCode(BMXGroupApplicationPage *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getApplicationList__SWIG_0(self.swigCPtr, list.swigCPtr, res.swigCPtr, cursor, pageSize);
    } completion:resBlock];
}

- (void)getMembers:(BMXGroup*)group cursor:(NSString*)cursor pageSize:(int)pageSize completion:(void (^)(BMXGroupMemberResultPage* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupMemberResultPage:^BMXErrorCode(BMXGroupMemberResultPage *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getMembers__SWIG_0(self.swigCPtr, group.swigCPtr, res.swigCPtr, cursor, pageSize);
    } completion:resBlock];
}

- (void)getMembers:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupMemberList* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupMemberList:^BMXErrorCode(BMXGroupMemberList *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getMembers__SWIG_3(self.swigCPtr, group.swigCPtr, res.swigCPtr, forceRefresh);
    } completion:resBlock];
}

- (void)addMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members message:(NSString*)message completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_addMembers(self.swigCPtr, group.swigCPtr, members.swigCPtr, message);
    } completion:resBlock];
}

- (void)removeMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members reason:(NSString*)reason completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_removeMembers(self.swigCPtr, group.swigCPtr, members.swigCPtr, reason);
    } completion:resBlock];
}

- (void)addAdminsWithGroup:(BMXGroup*)group admins:(ListOfLongLong*)admins message:(NSString*)message completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_addAdmins(self.swigCPtr, group.swigCPtr, admins.swigCPtr, message);
    } completion:resBlock];
}

- (void)removeAdminsWithGroup:(BMXGroup*)group admins:(ListOfLongLong*)admins reason:(NSString*)reason completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_removeAdmins(self.swigCPtr, group.swigCPtr, admins.swigCPtr, reason);
    } completion:resBlock];
}

- (void)getAdmins:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupMemberList *res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupMemberList:^BMXErrorCode(BMXGroupMemberList *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getAdmins(self.swigCPtr, group.swigCPtr, res.swigCPtr, forceRefresh);
    } completion:resBlock];
}

- (void)blockMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_blockMembers(self.swigCPtr, group.swigCPtr, members.swigCPtr);
    } completion:resBlock];
}

- (void)unblockMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_unblockMembers(self.swigCPtr, group.swigCPtr, members.swigCPtr);
    } completion:resBlock];
}

- (void)getBlockList:(BMXGroup*)group cursor:(NSString*)cursor pageSize:(int)pageSize completion:(void (^)(BMXGroupMemberResultPage* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupMemberResultPage:^BMXErrorCode(BMXGroupMemberResultPage *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getBlockList__SWIG_0(self.swigCPtr, group.swigCPtr, res.swigCPtr, cursor, pageSize);
    } completion:resBlock];
}

- (void)getBlockList:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupMemberList* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupMemberList:^BMXErrorCode(BMXGroupMemberList *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getBlockList__SWIG_3(self.swigCPtr, group.swigCPtr, res.swigCPtr, forceRefresh);
    } completion:resBlock];
}

- (void)banMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members duration:(long long)duration reason:(NSString*)reason completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_banMembers__SWIG_0(self.swigCPtr, group.swigCPtr, members.swigCPtr, duration, reason);
    } completion:resBlock];
}

- (void)banGroupWithGroup:(BMXGroup*)group duration:(long long)duration completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_banGroup(self.swigCPtr, group.swigCPtr, duration);
    } completion:resBlock];
}

- (void)unbanMembersWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_unbanMembers(self.swigCPtr, group.swigCPtr, members.swigCPtr);
    } completion:resBlock];
}

- (void)unbanGroupWithGroup:(BMXGroup*)group completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_unbanGroup(self.swigCPtr, group.swigCPtr);
    } completion:resBlock];
}

- (void)getBannedMembers:(BMXGroup*)group cursor:(NSString*)cursor pageSize:(int)pageSize completion:(void (^)(BMXGroupBannedMemberResultPage* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupBannedMemberResultPage:^BMXErrorCode(BMXGroupBannedMemberResultPage *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getBannedMembers__SWIG_0(self.swigCPtr, group.swigCPtr, res.swigCPtr, cursor, pageSize);
    } completion:resBlock];
}

- (void)getBannedMembers:(BMXGroup*)group completion:(void (^)(BMXGroupBannedMemberList* res, BMXError *aError)) resBlock{
    [BMXAsync asyncWithBMXGroupBannedMemberList:^BMXErrorCode(BMXGroupBannedMemberList *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getBannedMembers__SWIG_3(self.swigCPtr, group.swigCPtr, res.swigCPtr);
    } completion:resBlock];
}

- (void)muteMessageWithGroup:(BMXGroup*)group mode:(BMXGroup_MsgMuteMode)mode completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_muteMessage(self.swigCPtr, group.swigCPtr, (int)mode);
    } completion:resBlock];
}

- (void)acceptApplicationWithGroup:(BMXGroup*)group applicantId:(long long)applicantId completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_acceptApplication(self.swigCPtr, group.swigCPtr, applicantId);
    } completion:resBlock];
}

- (void)declineApplicationWithGroup:(BMXGroup*)group applicantId:(long long)applicantId reason:(NSString*)reason completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_declineApplication__SWIG_0(self.swigCPtr, group.swigCPtr, applicantId, reason);
    } completion:resBlock];
}

- (void)acceptInvitationWithGroup:(BMXGroup*)group inviter:(long long)inviter completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_acceptInvitation(self.swigCPtr, group.swigCPtr, inviter);
    } completion:resBlock];
}

- (void)declineInvitationWithGroup:(BMXGroup*)group inviter:(long long)inviter reason:(NSString*)reason completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_declineInvitation__SWIG_0(self.swigCPtr, group.swigCPtr, inviter, reason);
    } completion:resBlock];
}

- (void)transferOwnerWithGroup:(BMXGroup*)group newOwnerId:(long long)newOwnerId completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_transferOwner(self.swigCPtr, group.swigCPtr, newOwnerId);
    } completion:resBlock];
}

- (void)uploadSharedFileWithGroup:(BMXGroup*)group filePath:(NSString*)filePath displayName:(NSString*)displayName extensionName:(NSString*)extensionName arg5:(void(^)(int progress))arg5 completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_uploadSharedFile(self.swigCPtr, group.swigCPtr, filePath, displayName, extensionName, (void *)arg5);
    } completion:resBlock];
}

- (void)cancelUploadSharedFileWithGroup:(BMXGroup*)group filePath:(NSString*)filePath completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_cancelUploadSharedFile(self.swigCPtr, group.swigCPtr, filePath);
    } completion:resBlock];
}

- (void)removeSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_removeSharedFile(self.swigCPtr, group.swigCPtr, sharedFile.swigCPtr);
    } completion:resBlock];
}

- (void)downloadSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile arg3:(void(^)(int progress))arg3 completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_downloadSharedFile(self.swigCPtr, group.swigCPtr, sharedFile.swigCPtr, (void *)arg3);
    } completion:resBlock];
}

- (void)cancelDownloadSharedFileWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_cancelDownloadSharedFile(self.swigCPtr, group.swigCPtr, sharedFile.swigCPtr);
    } completion:resBlock];
}

- (void)getSharedFilesList:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupSharedFileList* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupSharedFileList:^BMXErrorCode(BMXGroupSharedFileList *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getSharedFilesList(self.swigCPtr, group.swigCPtr, res.swigCPtr, forceRefresh);
    } completion:resBlock];
}

- (void)changeSharedFileNameWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile name:(NSString*)name completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_changeSharedFileName(self.swigCPtr, group.swigCPtr, sharedFile.swigCPtr, name);
    } completion:resBlock];
}

- (void)getLatestAnnouncement:(BMXGroup*)group announcement:(BMXGroupAnnouncement*)announcement forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupAnnouncement* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupAnnouncement:^BMXErrorCode(BMXGroupAnnouncement *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getLatestAnnouncement(self.swigCPtr, group.swigCPtr, res.swigCPtr, forceRefresh);
    } completion:resBlock];
}

- (void)getAnnouncementList:(BMXGroup*)group forceRefresh:(BOOL)forceRefresh completion:(void (^)(BMXGroupAnnouncementList* res, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXGroupAnnouncementList:^BMXErrorCode(BMXGroupAnnouncementList *res) {
        return (BMXErrorCode)_wrap_BMXGroupService_getAnnouncementList(self.swigCPtr, group.swigCPtr, res.swigCPtr, forceRefresh);
    } completion:resBlock];
}

- (void)editAnnouncementWithGroup:(BMXGroup*)group title:(NSString*)title content:(NSString*)content completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_editAnnouncement(self.swigCPtr, group.swigCPtr, title, content);
    } completion:resBlock];
}

- (void)deleteAnnouncementWithGroup:(BMXGroup*)group announcementId:(long long)announcementId completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_deleteAnnouncement(self.swigCPtr, group.swigCPtr, announcementId);
    } completion:resBlock];
}

- (void)setName:(BMXGroup*)group name:(NSString*)name completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_setName(self.swigCPtr, group.swigCPtr, name);
    } completion:resBlock];
}

- (void)setDescription:(BMXGroup*)group description:(NSString*)description completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_setDescription(self.swigCPtr, group.swigCPtr, description);
    } completion:resBlock];
}

- (void)setExtension:(BMXGroup*)group extension:(NSString*)extension completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_setExtension(self.swigCPtr, group.swigCPtr, extension);
    } completion:resBlock];
}

- (void)setMyNickname:(BMXGroup*)group nickname:(NSString*)nickname completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_setMyNickname(self.swigCPtr, group.swigCPtr, nickname);
    } completion:resBlock];
}

- (void)setMsgPushMode:(BMXGroup*)group mode:(BMXGroup_MsgPushMode)mode completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_setMsgPushMode(self.swigCPtr, group.swigCPtr, (int)mode);
    } completion:resBlock];
}

- (void)setJoinAuthMode:(BMXGroup*)group mode:(BMXGroup_JoinAuthMode)mode completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_setJoinAuthMode(self.swigCPtr, group.swigCPtr, (int)mode);
    } completion:resBlock];
}

- (void)setInviteMode:(BMXGroup*)group mode:(BMXGroup_InviteMode)mode completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_setInviteMode(self.swigCPtr, group.swigCPtr, (int)mode);
    } completion:resBlock];
}

- (void)setAllowMemberModify:(BMXGroup*)group enable:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_setAllowMemberModify(self.swigCPtr, group.swigCPtr, enable);
    } completion:resBlock];
}

- (void)setEnableReadAck:(BMXGroup*)group enable:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_setEnableReadAck(self.swigCPtr, group.swigCPtr, enable);
    } completion:resBlock];
}

- (void)setHistoryVisible:(BMXGroup*)group enable:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_setHistoryVisible(self.swigCPtr, group.swigCPtr, enable);
    } completion:resBlock];
}

- (void)setAvatar:(BMXGroup*)group avatarPath:(NSString*)avatarPath arg3:(void(^)(int progress))arg3 completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_setAvatar(self.swigCPtr, group.swigCPtr, avatarPath, (void *)arg3);
    } completion:resBlock];
}

- (void)downloadAvatarWithGroup:(BMXGroup*)group thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXGroupService_downloadAvatar(self.swigCPtr, group.swigCPtr, thumbnail, (void *)callback);
    } completion:resBlock];
}

- (void)addGroupListenerWithListener:(BMXGroupServiceListener*)listener {
  _wrap_BMXGroupService_addGroupListener(self.swigCPtr, listener.swigCPtr);
}

- (void)removeGroupListenerWithListener:(BMXGroupServiceListener*)listener {
  _wrap_BMXGroupService_removeGroupListener(self.swigCPtr, listener.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupService((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}


- (void)addGroupListener:(id<BMXGroupServiceProtocol>)listener {
    if (listener == nil) {
        return;
    }
    if ([listener conformsToProtocol:@protocol(BMXGroupServiceProtocol)]) {
        groupListener->addDelegate(listener, nil);
    }
}

- (void)removeGroupListener:(id<BMXGroupServiceProtocol>)listener {
    if (listener == nil) {
        return;
    }
    
    if ([listener conformsToProtocol:@protocol(BMXGroupServiceProtocol)]) {
        groupListener->removeDelegate(listener);
    }
}

- (void)removeGroupListener {
    if (groupListener) {
        BMXGroupServiceListener * listener = [[[BMXGroupServiceListener alloc] init] initWithCptr:groupListener swigOwnCObject:NO];
        [self removeGroupListenerWithListener: listener];
    }
}

- (void)addDelegate:(id<BMXGroupServiceProtocol>)aDelegate {
    [self addDelegate:aDelegate delegateQueue:nil];
}

- (void)addDelegate:(id)aDelegate delegateQueue:(dispatch_queue_t)aQueue {
    if (aDelegate == nil) {
        return;
    }
    
    if ([aDelegate conformsToProtocol:@protocol(BMXGroupServiceProtocol) ]) {
        groupListener->addDelegate(aDelegate, aQueue);
    }
    
}

- (void)removeDelegate:(id)aDelegate {
    if (aDelegate == nil) {
        return;
    }
    if ([aDelegate conformsToProtocol:@protocol(BMXGroupServiceProtocol) ]) {
        groupListener->removeDelegate(aDelegate);
    }
}

@end


@implementation BMXImageAttachment

- (id)initWithData:(NSData *)aData
         thumbnailData:(NSData *)thumbnailData
         imageSize:(BMXMessageAttachmentSize *) size
         displayName:(NSString *)displayName
         conversationId:(long long)conversationId {
    NSString *localPath = [self getLocalPathWithConversationId:conversationId displayName:displayName data:aData];
    NSString *thumbnailPath = [self getLocalPathWithConversationId:conversationId displayName:[NSString stringWithFormat:@"thumb_%@",displayName] data:aData];
    if ([aData length]) {
        [aData writeToFile:localPath atomically:YES];
    }

    self = [self initWithPath:localPath size:[[BMXMessageAttachmentSize alloc] initWithWidth:size.getMWidth height:size.getMHeight] displayName:displayName];
    if (thumbnailData.length > 0) {
        [thumbnailData writeToFile:thumbnailPath atomically:YES];
        [self setThumbnail: thumbnailPath];
    }
    return self;
}

- (id)initWithPath:(NSString*)path size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXImageAttachment__SWIG_0(path, size.swigCPtr, displayName);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithPath:(NSString*)path size:(BMXMessageAttachmentSize*)size {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXImageAttachment__SWIG_1(path, size.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithRatelUrl:(NSString*)ratelUrl size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName fileLength:(long long)fileLength {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXImageAttachment__SWIG_2(ratelUrl, size.swigCPtr, displayName, fileLength);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (BMXMessageAttachment_Type)type {
   return (BMXMessageAttachment_Type)_wrap_BMXImageAttachment_type(self.swigCPtr); 
}

- (BMXMessageAttachment*)clone {
     void* cPtr = _wrap_BMXImageAttachment_clone(self.swigCPtr);
     BMXMessageAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXMessageAttachmentSize*)size {
     void* cPtr = _wrap_BMXImageAttachment_size(self.swigCPtr);
     BMXMessageAttachmentSize* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageAttachmentSize alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (NSString*)thumbnailUrl {
  {
    return _wrap_BMXImageAttachment_thumbnailUrl(self.swigCPtr);
  }
}

- (void)setThumbnail:(NSString*)path {
  _wrap_BMXImageAttachment_setThumbnail(self.swigCPtr, path);
}

- (NSString*)thumbnailPath {
  {
    NSString *path = _wrap_BMXImageAttachment_thumbnailPath(self.swigCPtr);
    if (![path containsString:sharedClient.getChatServiceImpl.attachmentDir]) {
        path = [sharedClient.getChatServiceImpl.attachmentDir stringByAppendingPathComponent:path];
    }
    return path;
  }
}

- (BMXMessageAttachment_DownloadStatus)thumbnailDownloadStatus {
   return (BMXMessageAttachment_DownloadStatus)_wrap_BMXImageAttachment_thumbnailDownloadStatus(self.swigCPtr); 
}

+ (BMXImageAttachment*)dynamicCastWithAttachment:(BMXMessageAttachment*)attachment {
     void* cPtr = _wrap_BMXImageAttachment_dynamic_cast(attachment.swigCPtr);
     BMXImageAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXImageAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXImageAttachment((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXLocationAttachment

- (id)initWithLatitude:(double)latitude longitude:(double)longitude address:(NSString*)address {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXLocationAttachment(latitude, longitude, address);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (BMXMessageAttachment_Type)type {
   return (BMXMessageAttachment_Type)_wrap_BMXLocationAttachment_type(self.swigCPtr); 
}

- (BMXMessageAttachment*)clone {
     void* cPtr = _wrap_BMXLocationAttachment_clone(self.swigCPtr);
     BMXMessageAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (double)latitude {
   return _wrap_BMXLocationAttachment_latitude(self.swigCPtr); 
}

- (double)longitude {
   return _wrap_BMXLocationAttachment_longitude(self.swigCPtr); 
}

- (NSString*)address {
  {
    return _wrap_BMXLocationAttachment_address(self.swigCPtr);
  }
}

+ (BMXLocationAttachment*)dynamicCastWithAttachment:(BMXMessageAttachment*)attachment {
     void* cPtr = _wrap_BMXLocationAttachment_dynamic_cast(attachment.swigCPtr);
     BMXLocationAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXLocationAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXLocationAttachment((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end

@implementation BMXAsync

+ (void)async:(BMXErrorCode(^)())exec
               completion:(void (^)(BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXErrorCode errorCode = exec();
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock([BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXGroup:(BMXErrorCode(^)(BMXGroup *res))exec
               completion:(void (^)(BMXGroup *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXGroup * res = [[BMXGroup alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXGroupMemberList:(BMXErrorCode(^)(BMXGroupMemberList *res))exec
               completion:(void (^)(BMXGroupMemberList *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXGroupMemberList * res = [[BMXGroupMemberList alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXGroupInvitationPage:(BMXErrorCode(^)(BMXGroupInvitationPage *res))exec
               completion:(void (^)(BMXGroupInvitationPage *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXGroupInvitationPage * res = [[BMXGroupInvitationPage alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXGroupApplicationPage:(BMXErrorCode(^)(BMXGroupApplicationPage *res))exec
               completion:(void (^)(BMXGroupApplicationPage *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXGroupApplicationPage * res = [[BMXGroupApplicationPage alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXGroupMemberResultPage:(BMXErrorCode(^)(BMXGroupMemberResultPage *res))exec
               completion:(void (^)(BMXGroupMemberResultPage *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXGroupMemberResultPage * res = [[BMXGroupMemberResultPage alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXGroupBannedMemberResultPage:(BMXErrorCode(^)(BMXGroupBannedMemberResultPage *res))exec
               completion:(void (^)(BMXGroupBannedMemberResultPage *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXGroupBannedMemberResultPage * res = [[BMXGroupBannedMemberResultPage alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXGroupBannedMemberList:(BMXErrorCode(^)(BMXGroupBannedMemberList *res))exec
               completion:(void (^)(BMXGroupBannedMemberList *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXGroupBannedMemberList * res = [[BMXGroupBannedMemberList alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXGroupSharedFileList:(BMXErrorCode(^)(BMXGroupSharedFileList *res))exec
               completion:(void (^)(BMXGroupSharedFileList *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXGroupSharedFileList * res = [[BMXGroupSharedFileList alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXGroupAnnouncement:(BMXErrorCode(^)(BMXGroupAnnouncement *res))exec
               completion:(void (^)(BMXGroupAnnouncement *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXGroupAnnouncement * res = [[BMXGroupAnnouncement alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXGroupAnnouncementList:(BMXErrorCode(^)(BMXGroupAnnouncementList *res))exec
               completion:(void (^)(BMXGroupAnnouncementList *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXGroupAnnouncementList * res = [[BMXGroupAnnouncementList alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXGroupList:(BMXErrorCode(^)(BMXGroupList *res))exec
               completion:(void (^)(BMXGroupList *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXGroupList * res = [[BMXGroupList alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXUserProfile:(BMXErrorCode(^)(BMXUserProfile *res))exec
               completion:(void (^)(BMXUserProfile *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXUserProfile * res = [[BMXUserProfile alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXDeviceList:(BMXErrorCode(^)(BMXDeviceList *res))exec
               completion:(void (^)(BMXDeviceList *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXDeviceList * res = [[BMXDeviceList alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXConversationList:(BMXErrorCode(^)(BMXConversationList *res))exec
               completion:(void (^)(BMXConversationList *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXConversationList * res = [[BMXConversationList alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXMessage:(BMXErrorCode(^)(BMXMessage *res))exec
               completion:(void (^)(BMXMessage *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXMessage * res = [[BMXMessage alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXMessageList:(BMXErrorCode(^)(BMXMessageList *res))exec
               completion:(void (^)(BMXMessageList *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXMessageList * res = [[BMXMessageList alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXMessageListList:(BMXErrorCode(^)(BMXMessageListList *res))exec
               completion:(void (^)(BMXMessageListList *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXMessageListList * res = [[BMXMessageListList alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXRosterItem:(BMXErrorCode(^)(BMXRosterItem *res))exec
               completion:(void (^)(BMXRosterItem *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXRosterItem * res = [[BMXRosterItem alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXRosterItemList:(BMXErrorCode(^)(BMXRosterItemList *res))exec
               completion:(void (^)(BMXRosterItemList *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXRosterItemList * res = [[BMXRosterItemList alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithListOfLongLong:(BMXErrorCode(^)(ListOfLongLong *res))exec
               completion:(void (^)(ListOfLongLong *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            ListOfLongLong * res = [[ListOfLongLong alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

+ (void)asyncWithBMXRosterApplicationResultPage:(BMXErrorCode(^)(BMXRosterApplicationResultPage *res))exec
               completion:(void (^)(BMXRosterApplicationResultPage *res, BMXError *aError)) resBlock {
    if (resBlock) {
        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
            BMXRosterApplicationResultPage * res = [[BMXRosterApplicationResultPage alloc] init];
            BMXErrorCode errorCode = exec(res);
            dispatch_async(dispatch_get_main_queue(), ^{
                resBlock(res, [BMXError errorCode: errorCode]);
            });
        });
    }
}

@end

@implementation BMXRosterService
{
    RosterServiceListener *rostelistener;
}

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
      if (!rostelistener) {
          rostelistener = new RosterServiceListener();
      }
      if (rostelistener) {
          BMXRosterServiceListener * listener = [[[BMXRosterServiceListener alloc] init] initWithCptr:rostelistener swigOwnCObject:NO];
          [self addRosterListenerWithListener: listener];
      }
  }
  return self;
}

- (BMXErrorCode)get:(ListOfLongLong*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXRosterService_get(self.swigCPtr, list.swigCPtr, forceRefresh); 
}

- (BMXErrorCode)fetchRosterByIdWithRosterId:(long long)rosterId forceRefresh:(BOOL)forceRefresh item:(BMXRosterItem*)item {
   return (BMXErrorCode)_wrap_BMXRosterService_fetchRosterById(self.swigCPtr, rosterId, forceRefresh, item.swigCPtr);
}

- (BMXErrorCode)searchWithRosterId:(long long)rosterId forceRefresh:(BOOL)forceRefresh item:(BMXRosterItem*)item {
   void *tmp = nullptr;
    BMXErrorCode err = (BMXErrorCode)_wrap_BMXRosterService_search__SWIG_0(self.swigCPtr, rosterId, forceRefresh, &tmp);
    item.swigCPtr = tmp;
   return err;
}

- (BMXErrorCode)fetchRosterByNameWithName:(NSString*)name forceRefresh:(BOOL)forceRefresh item:(BMXRosterItem*)item {
   return (BMXErrorCode)_wrap_BMXRosterService_fetchRosterByName(self.swigCPtr, name, forceRefresh, item.swigCPtr);
}

- (BMXErrorCode)searchWithName:(NSString*)name forceRefresh:(BOOL)forceRefresh item:(BMXRosterItem*)item {
    void *tmp = nullptr;
    BMXErrorCode err = (BMXErrorCode)_wrap_BMXRosterService_search__SWIG_1(self.swigCPtr, name, forceRefresh, &tmp);
    item.swigCPtr = tmp;
    return err;
}

- (BMXErrorCode)fetchRostersByIdListWithRosterIdList:(ListOfLongLong*)rosterIdList list:(BMXRosterItemList*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXRosterService_fetchRostersByIdList(self.swigCPtr, rosterIdList.swigCPtr, list.swigCPtr, forceRefresh);
}

- (BMXErrorCode)searchWithRosterIdList:(ListOfLongLong*)rosterIdList list:(BMXRosterItemList*)list forceRefresh:(BOOL)forceRefresh {
    void *tmp = nullptr;
    BMXErrorCode err = (BMXErrorCode)_wrap_BMXRosterService_search__SWIG_2(self.swigCPtr, rosterIdList.swigCPtr, &tmp, forceRefresh);
    list.swigCPtr = tmp;
    return err;
}

- (BMXErrorCode)setItemLocalExtension:(BMXRosterItem*)item extension:(NSString*)extension {
   return (BMXErrorCode)_wrap_BMXRosterService_setItemLocalExtension(self.swigCPtr, item.swigCPtr, extension); 
}

- (BMXErrorCode)setItemExtension:(BMXRosterItem*)item extension:(NSString*)extension {
   return (BMXErrorCode)_wrap_BMXRosterService_setItemExtension(self.swigCPtr, item.swigCPtr, extension); 
}

- (BMXErrorCode)setItemAlias:(BMXRosterItem*)item alias:(NSString*)alias {
   return (BMXErrorCode)_wrap_BMXRosterService_setItemAlias(self.swigCPtr, item.swigCPtr, alias); 
}

- (BMXErrorCode)setItemMuteNotification:(BMXRosterItem*)item status:(BOOL)status {
   return (BMXErrorCode)_wrap_BMXRosterService_setItemMuteNotification(self.swigCPtr, item.swigCPtr, status); 
}

- (BMXErrorCode)getApplicationList:(BMXRosterApplicationResultPage*)result cursor:(NSString*)cursor pageSize:(int)pageSize {
    void *tmp = nullptr;
    BMXErrorCode err = (BMXErrorCode)_wrap_BMXRosterService_getApplicationList__SWIG_0(self.swigCPtr, &tmp, cursor, pageSize);
    result.swigCPtr = tmp;
    return err;
}

- (BMXErrorCode)getApplicationList:(BMXRosterApplicationResultPage*)result cursor:(NSString*)cursor {
   return (BMXErrorCode)_wrap_BMXRosterService_getApplicationList__SWIG_1(self.swigCPtr, result.swigCPtr, cursor); 
}

- (BMXErrorCode)applyWithRosterId:(long long)rosterId message:(NSString*)message authAnswer:(NSString*)authAnswer {
   return (BMXErrorCode)_wrap_BMXRosterService_apply__SWIG_0(self.swigCPtr, rosterId, message, authAnswer); 
}

- (BMXErrorCode)applyWithRosterId:(long long)rosterId message:(NSString*)message {
   return (BMXErrorCode)_wrap_BMXRosterService_apply__SWIG_1(self.swigCPtr, rosterId, message); 
}

- (BMXErrorCode)removeWithRosterId:(long long)rosterId {
   return (BMXErrorCode)_wrap_BMXRosterService_remove(self.swigCPtr, rosterId); 
}

- (BMXErrorCode)acceptWithRosterId:(long long)rosterId {
   return (BMXErrorCode)_wrap_BMXRosterService_accept(self.swigCPtr, rosterId); 
}

- (BMXErrorCode)declineWithRosterId:(long long)rosterId reason:(NSString*)reason {
   return (BMXErrorCode)_wrap_BMXRosterService_decline(self.swigCPtr, rosterId, reason); 
}

- (BMXErrorCode)blockWithRosterId:(long long)rosterId {
   return (BMXErrorCode)_wrap_BMXRosterService_block(self.swigCPtr, rosterId); 
}

- (BMXErrorCode)unblockWithRosterId:(long long)rosterId {
   return (BMXErrorCode)_wrap_BMXRosterService_unblock(self.swigCPtr, rosterId); 
}

- (BMXErrorCode)getBlockList:(ListOfLongLong*)list forceRefresh:(BOOL)forceRefresh {
   return (BMXErrorCode)_wrap_BMXRosterService_getBlockList(self.swigCPtr, list.swigCPtr, forceRefresh); 
}

- (BMXErrorCode)downloadAvatarWithItem:(BMXRosterItem*)item thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback {
   return (BMXErrorCode)_wrap_BMXRosterService_downloadAvatar(self.swigCPtr, item.swigCPtr, thumbnail, (void *)callback); 
}

- (void)addRosterListenerWithListener:(BMXRosterServiceListener*)listener {
  _wrap_BMXRosterService_addRosterListener(self.swigCPtr, listener.swigCPtr);
}

- (void)removeRosterListenerWithListener:(BMXRosterServiceListener*)listener {
  _wrap_BMXRosterService_removeRosterListener(self.swigCPtr, listener.swigCPtr);
}

- (void)get: (BOOL)forceRefresh completion:(void(^)(ListOfLongLong *list, BMXError *error)) aCompletionBlock{
    [BMXAsync asyncWithListOfLongLong:^BMXErrorCode(ListOfLongLong *res) {
        return (BMXErrorCode)_wrap_BMXRosterService_get(self.swigCPtr, res.swigCPtr, forceRefresh);
    } completion:aCompletionBlock];
}

- (void)fetchRosterByIdWithRosterId:(long long)rosterId forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItem *item, BMXError *error)) aCompletionBlock {
    [BMXAsync asyncWithBMXRosterItem:^BMXErrorCode(BMXRosterItem *res) {
        return (BMXErrorCode)_wrap_BMXRosterService_fetchRosterById(self.swigCPtr, rosterId, forceRefresh, res.swigCPtr);
    } completion:aCompletionBlock];
}

- (void)searchWithRosterId:(long long)rosterId forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItem *item, BMXError *error)) aCompletionBlock {
    [BMXAsync asyncWithBMXRosterItem:^BMXErrorCode(BMXRosterItem *item) {
        void *tmp = nullptr;
        BMXErrorCode err = (BMXErrorCode)_wrap_BMXRosterService_search__SWIG_0(self.swigCPtr, rosterId, forceRefresh, &tmp);
        item.swigCPtr = tmp;
        return err;
    } completion:aCompletionBlock];
}

- (void)fetchRosterByNameWithName:(NSString*)name forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItem *item, BMXError *error)) aCompletionBlock {
    [BMXAsync asyncWithBMXRosterItem:^BMXErrorCode(BMXRosterItem *item) {
        return (BMXErrorCode)_wrap_BMXRosterService_fetchRosterByName(self.swigCPtr, name, forceRefresh, item.swigCPtr);
    } completion:aCompletionBlock];
}

- (void)searchWithName:(NSString*)name forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItem *item, BMXError *error)) aCompletionBlock {
    [BMXAsync asyncWithBMXRosterItem:^BMXErrorCode(BMXRosterItem *item) {
        void *tmp = nullptr;
        BMXErrorCode err = (BMXErrorCode)_wrap_BMXRosterService_search__SWIG_1(self.swigCPtr, name, forceRefresh, &tmp);
        item.swigCPtr = tmp;
        return err;
    } completion:aCompletionBlock];
}

- (void)fetchRostersByIdListWithRosterIdList:(ListOfLongLong*)rosterIdList forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItemList *list, BMXError *error)) aCompletionBlock {
    [BMXAsync asyncWithBMXRosterItemList:^BMXErrorCode(BMXRosterItemList *list) {
        return (BMXErrorCode)_wrap_BMXRosterService_fetchRostersByIdList(self.swigCPtr, rosterIdList.swigCPtr, list.swigCPtr, forceRefresh);
    } completion:aCompletionBlock];
}

- (void)searchWithRosterIdList:(ListOfLongLong*)rosterIdList forceRefresh:(BOOL)forceRefresh completion:(void(^)(BMXRosterItemList *list, BMXError *error)) aCompletionBlock {
    [BMXAsync asyncWithBMXRosterItemList:^BMXErrorCode(BMXRosterItemList *list) {
        void *tmp = nullptr;
        BMXErrorCode err = (BMXErrorCode)_wrap_BMXRosterService_search__SWIG_2(self.swigCPtr, rosterIdList.swigCPtr, &tmp, forceRefresh);
        list.swigCPtr = tmp;
        return err;
    } completion:aCompletionBlock];
}

- (void)setItemLocalExtension:(BMXRosterItem*)item extension:(NSString*)extension completion:(void(^)(BMXError *error)) aCompletionBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_setItemLocalExtension(self.swigCPtr, item.swigCPtr, extension);
    } completion:aCompletionBlock];
}

- (void)setItemExtension:(BMXRosterItem*)item extension:(NSString*)extension completion:(void(^)(BMXError *error)) aCompletionBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_setItemExtension(self.swigCPtr, item.swigCPtr, extension);
    } completion:aCompletionBlock];
}

- (void)setItemAlias:(BMXRosterItem*)item alias:(NSString*)alias completion:(void(^)(BMXError *error)) aCompletionBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_setItemAlias(self.swigCPtr, item.swigCPtr, alias);
    } completion:aCompletionBlock];
}

- (void)setItemMuteNotification:(BMXRosterItem*)item status:(BOOL)status completion:(void(^)(BMXError *error)) aCompletionBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_setItemMuteNotification(self.swigCPtr, item.swigCPtr, status);
    } completion:aCompletionBlock];
}

- (void)getApplicationList: (NSString*)cursor pageSize:(int)pageSize completion:(void(^)(BMXRosterApplicationResultPage *res, BMXError *error)) aCompletionBlock {
    [BMXAsync asyncWithBMXRosterApplicationResultPage:^BMXErrorCode(BMXRosterApplicationResultPage *res) {
        void *tmp = nullptr;
        BMXErrorCode err = (BMXErrorCode)_wrap_BMXRosterService_getApplicationList__SWIG_0(self.swigCPtr, &tmp, cursor, pageSize);
        res.swigCPtr = tmp;
        return err;
    } completion:aCompletionBlock];
}

- (void)getApplicationList: (NSString*)cursor completion:(void(^)(BMXRosterApplicationResultPage *res, BMXError *error)) aCompletionBlock {
    [BMXAsync asyncWithBMXRosterApplicationResultPage:^BMXErrorCode(BMXRosterApplicationResultPage *res) {
        return (BMXErrorCode)_wrap_BMXRosterService_getApplicationList__SWIG_1(self.swigCPtr, res.swigCPtr, cursor);
    } completion:aCompletionBlock];
}

- (void)applyWithRosterId:(long long)rosterId message:(NSString*)message authAnswer:(NSString*)authAnswer completion:(void(^)(BMXError *error)) aCompletionBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_apply__SWIG_0(self.swigCPtr, rosterId, message, authAnswer);
    } completion:aCompletionBlock];
}

- (void)applyWithRosterId:(long long)rosterId message:(NSString*)message completion:(void(^)(BMXError *error)) aCompletionBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_apply__SWIG_1(self.swigCPtr, rosterId, message);
    } completion:aCompletionBlock];
}

- (void)removeWithRosterId:(long long)rosterId completion:(void(^)(BMXError *error)) aCompletionBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_remove(self.swigCPtr, rosterId);
    } completion:aCompletionBlock];
}

- (void)acceptWithRosterId:(long long)rosterId completion:(void(^)(BMXError *error)) aCompletionBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_accept(self.swigCPtr, rosterId);
    } completion:aCompletionBlock];
}

- (void)declineWithRosterId:(long long)rosterId reason:(NSString*)reason completion:(void(^)(BMXError *error)) aCompletionBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_decline(self.swigCPtr, rosterId, reason);
    } completion:aCompletionBlock];
}

- (void)blockWithRosterId:(long long)rosterId completion:(void(^)(BMXError *error)) aCompletionBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_block(self.swigCPtr, rosterId);
    } completion:aCompletionBlock];
}

- (void)unblockWithRosterId:(long long)rosterId completion:(void(^)(BMXError *error)) aCompletionBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_unblock(self.swigCPtr, rosterId);
    } completion:aCompletionBlock];
}

- (void)getBlockList: (BOOL)forceRefresh completion:(void(^)(ListOfLongLong *list, BMXError *error)) aCompletionBlock{
    [BMXAsync asyncWithListOfLongLong:^BMXErrorCode(ListOfLongLong *res) {
        return (BMXErrorCode)_wrap_BMXRosterService_getBlockList(self.swigCPtr, res.swigCPtr, forceRefresh);
    } completion:aCompletionBlock];
}

- (void)downloadAvatarWithItem:(BMXRosterItem*)item thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback completion:(void(^)(BMXError *error)) aCompletionBlock{
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXRosterService_downloadAvatar(self.swigCPtr, item.swigCPtr, thumbnail, (void *)callback);
    } completion:aCompletionBlock];
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRosterService((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}
- (void)addRosterListener:(id<BMXRosterServiceProtocol>)listener {
    if (listener == nil) {
        return;
    }
    
    if ([listener conformsToProtocol:@protocol(BMXRosterServiceProtocol)]) {
        rostelistener->addDelegate(listener, nil);
    }
}

- (void)removeRosterListener:(id<BMXRosterServiceProtocol>)listener {
    if (listener == nil) {
        return;
    }
    rostelistener->removeDelegate(listener);
}

- (void)addDelegate:(id<BMXRosterServiceProtocol>)aDelegate delegateQueue:(dispatch_queue_t)aQueue {
    if (aDelegate == nil) {
        return;
    }
    if ([aDelegate conformsToProtocol:@protocol(BMXRosterServiceProtocol)]) {
        rostelistener->addDelegate(aDelegate, aQueue);
    }
}

- (void)addDelegate:(id<BMXRosterServiceProtocol>)aDelegate {
    [self addDelegate:aDelegate delegateQueue:nil];
}

- (void)removeDelegate:(id<BMXRosterServiceProtocol>)aDelegate{
    if (aDelegate == nil) {
        return;
    }
    if ([aDelegate conformsToProtocol:@protocol(BMXRosterServiceProtocol)]) {
        rostelistener-> removeDelegate(aDelegate);
    }
}

- (void)removeRosterListener {
    if (rostelistener) {
      BMXRosterServiceListener * listener = [[[BMXRosterServiceListener alloc] init] initWithCptr:rostelistener swigOwnCObject:NO];
      [self removeRosterListenerWithListener: listener];
    }
}

@end


@implementation BMXMessagePage

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessagePage__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXMessageList*)result offset:(long long)offset {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessagePage__SWIG_1(result.swigCPtr, offset);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXMessageList*)result cursor:(NSString*)cursor {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessagePage__SWIG_2(result.swigCPtr, cursor);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithFrom:(BMXMessagePage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessagePage__SWIG_3(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)_initWithFrom:(BMXMessagePage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessagePage__SWIG_4(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)count {
   return _wrap_BMXMessagePage_count(self.swigCPtr); 
}

- (long long)offset {
   return _wrap_BMXMessagePage_offset(self.swigCPtr); 
}

- (NSString*)cursor {
  {
    return _wrap_BMXMessagePage_cursor(self.swigCPtr);
  }
}

- (BMXMessageList*)result {
     void* cPtr = _wrap_BMXMessagePage_result(self.swigCPtr);
     BMXMessageList* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageList alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXMessagePage((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupMemberResultPage

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupMemberResultPage__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXGroupMemberList*)result offset:(long long)offset {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupMemberResultPage__SWIG_1(result.swigCPtr, offset);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXGroupMemberList*)result cursor:(NSString*)cursor {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupMemberResultPage__SWIG_2(result.swigCPtr, cursor);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithFrom:(BMXGroupMemberResultPage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupMemberResultPage__SWIG_3(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)_initWithFrom:(BMXGroupMemberResultPage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupMemberResultPage__SWIG_4(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)count {
   return _wrap_BMXGroupMemberResultPage_count(self.swigCPtr); 
}

- (long long)offset {
   return _wrap_BMXGroupMemberResultPage_offset(self.swigCPtr); 
}

- (NSString*)cursor {
  {
    return _wrap_BMXGroupMemberResultPage_cursor(self.swigCPtr);
  }
}

- (BMXGroupMemberList*)result {
     void* cPtr = _wrap_BMXGroupMemberResultPage_result(self.swigCPtr);
     BMXGroupMemberList* ret = nil;
     if(cPtr) {
        ret = [[BMXGroupMemberList alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupMemberResultPage((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupBannedMemberResultPage

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupBannedMemberResultPage__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXGroupBannedMemberList*)result offset:(long long)offset {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupBannedMemberResultPage__SWIG_1(result.swigCPtr, offset);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXGroupBannedMemberList*)result cursor:(NSString*)cursor {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupBannedMemberResultPage__SWIG_2(result.swigCPtr, cursor);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithFrom:(BMXGroupBannedMemberResultPage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupBannedMemberResultPage__SWIG_3(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)_initWithFrom:(BMXGroupBannedMemberResultPage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupBannedMemberResultPage__SWIG_4(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)count {
   return _wrap_BMXGroupBannedMemberResultPage_count(self.swigCPtr); 
}

- (long long)offset {
   return _wrap_BMXGroupBannedMemberResultPage_offset(self.swigCPtr); 
}

- (NSString*)cursor {
  {
    return _wrap_BMXGroupBannedMemberResultPage_cursor(self.swigCPtr);
  }
}

- (BMXGroupBannedMemberList*)result {
     void* cPtr = _wrap_BMXGroupBannedMemberResultPage_result(self.swigCPtr);
     BMXGroupBannedMemberList* ret = nil;
     if(cPtr) {
        ret = [[BMXGroupBannedMemberList alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupBannedMemberResultPage((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRosterApplicationResultPage

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRosterApplicationResultPage__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXRosterServiceApplicationList*)result offset:(long long)offset {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRosterApplicationResultPage__SWIG_1(result.swigCPtr, offset);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXRosterServiceApplicationList*)result cursor:(NSString*)cursor {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRosterApplicationResultPage__SWIG_2(result.swigCPtr, cursor);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithFrom:(BMXRosterApplicationResultPage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRosterApplicationResultPage__SWIG_3(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)_initWithFrom:(BMXRosterApplicationResultPage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRosterApplicationResultPage__SWIG_4(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)count {
   return _wrap_BMXRosterApplicationResultPage_count(self.swigCPtr); 
}

- (long long)offset {
   return _wrap_BMXRosterApplicationResultPage_offset(self.swigCPtr); 
}

- (NSString*)cursor {
  {
    return _wrap_BMXRosterApplicationResultPage_cursor(self.swigCPtr);
  }
}

- (BMXRosterServiceApplicationList*)result {
     void* cPtr = _wrap_BMXRosterApplicationResultPage_result(self.swigCPtr);
     BMXRosterServiceApplicationList* ret = nil;
     if(cPtr) {
        ret = [[BMXRosterServiceApplicationList alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRosterApplicationResultPage((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupApplicationPage

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupApplicationPage__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXGroupApplicationList*)result offset:(long long)offset {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupApplicationPage__SWIG_1(result.swigCPtr, offset);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXGroupApplicationList*)result cursor:(NSString*)cursor {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupApplicationPage__SWIG_2(result.swigCPtr, cursor);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithFrom:(BMXGroupApplicationPage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupApplicationPage__SWIG_3(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)_initWithFrom:(BMXGroupApplicationPage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupApplicationPage__SWIG_4(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)count {
   return _wrap_BMXGroupApplicationPage_count(self.swigCPtr);
}

- (long long)offset {
   return _wrap_BMXGroupApplicationPage_offset(self.swigCPtr);
}

- (NSString*)cursor {
  {
    return _wrap_BMXGroupApplicationPage_cursor(self.swigCPtr);
  }
}

- (BMXGroupApplicationList*)result {
     void* cPtr = _wrap_BMXGroupApplicationPage_result(self.swigCPtr);
     BMXGroupApplicationList* ret = nil;
     if(cPtr) {
        ret = [[BMXGroupApplicationList alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupApplicationPage((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupInvitationPage

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupInvitationPage__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXGroupInvitationList*)result offset:(long long)offset {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupInvitationPage__SWIG_1(result.swigCPtr, offset);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithResult:(BMXGroupInvitationList*)result cursor:(NSString*)cursor {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupInvitationPage__SWIG_2(result.swigCPtr, cursor);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithFrom:(BMXGroupInvitationPage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupInvitationPage__SWIG_3(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)_initWithFrom:(BMXGroupInvitationPage*)from {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupInvitationPage__SWIG_4(from.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)count {
   return _wrap_BMXGroupInvitationPage_count(self.swigCPtr);
}

- (long long)offset {
   return _wrap_BMXGroupInvitationPage_offset(self.swigCPtr);
}

- (NSString*)cursor {
  {
    return _wrap_BMXGroupInvitationPage_cursor(self.swigCPtr);
  }
}

- (BMXGroupInvitationList*)result {
     void* cPtr = _wrap_BMXGroupInvitationPage_result(self.swigCPtr);
     BMXGroupInvitationList* ret = nil;
     if(cPtr) {
        ret = [[BMXGroupInvitationList alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupInvitationPage((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXMessageListList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessageListList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXMessageListList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXMessageListList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXMessageListList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXMessageListList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXMessageListList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXMessageListList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXMessageList*)x {
  _wrap_BMXMessageListList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXMessageList*)get:(int)i {
     void* cPtr = _wrap_BMXMessageListList_get(self.swigCPtr, i);
     BMXMessageList* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageList alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXMessageList*)val {
  _wrap_BMXMessageListList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXMessageListList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRosterItem

- (long long)rosterId {
   return _wrap_BMXRosterItem_rosterId(self.swigCPtr); 
}

- (NSString*)username {
  {
    return _wrap_BMXRosterItem_username(self.swigCPtr);
  }
}

- (NSString*)nickname {
  {
    return _wrap_BMXRosterItem_nickname(self.swigCPtr);
  }
}

- (NSString*)avatarRatelUrl {
  {
    return _wrap_BMXRosterItem_avatarRatelUrl(self.swigCPtr);
  }
}

- (NSString*)avatarUrl {
  {
    return _wrap_BMXRosterItem_avatarUrl(self.swigCPtr);
  }
}

- (NSString*)avatarPath {
  {
    return _wrap_BMXRosterItem_avatarPath(self.swigCPtr);
  }
}

- (NSString*)avatarThumbnailUrl {
  {
    return _wrap_BMXRosterItem_avatarThumbnailUrl(self.swigCPtr);
  }
}

- (NSString*)avatarThumbnailPath {
  {
    return _wrap_BMXRosterItem_avatarThumbnailPath(self.swigCPtr);
  }
}

- (NSString*)publicInfo {
  {
    return _wrap_BMXRosterItem_publicInfo(self.swigCPtr);
  }
}

- (NSString*)alias {
  {
    return _wrap_BMXRosterItem_alias(self.swigCPtr);
  }
}

- (NSString*)ext {
  {
    return _wrap_BMXRosterItem_ext(self.swigCPtr);
  }
}

- (NSString*)localExt {
  {
    return _wrap_BMXRosterItem_localExt(self.swigCPtr);
  }
}

- (BMXRosterItem_RosterRelation)relation {
   return (BMXRosterItem_RosterRelation)_wrap_BMXRosterItem_relation(self.swigCPtr); 
}

- (BOOL)isMuteNotification {
   return _wrap_BMXRosterItem_isMuteNotification(self.swigCPtr); 
}

- (BMXRosterItem_AddFriendAuthMode)addFriendAuthMode {
   return (BMXRosterItem_AddFriendAuthMode)_wrap_BMXRosterItem_addFriendAuthMode(self.swigCPtr); 
}

- (NSString*)authQuestion {
  {
    return _wrap_BMXRosterItem_authQuestion(self.swigCPtr);
  }
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRosterItem((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRosterItemList

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRosterItemList__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRosterItemList__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXRosterItemList_size(self.swigCPtr); 
}

- (unsigned long)capacity {
   return _wrap_BMXRosterItemList_capacity(self.swigCPtr); 
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXRosterItemList_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXRosterItemList_isEmpty(self.swigCPtr); 
}

- (void)clear {
  _wrap_BMXRosterItemList_clear(self.swigCPtr);
}

- (void)addWithX:(BMXRosterItem*)x {
  _wrap_BMXRosterItemList_add(self.swigCPtr, x.swigCPtr);
}

- (BMXRosterItem*)get:(int)i {
     void* cPtr = _wrap_BMXRosterItemList_get(self.swigCPtr, i);
     BMXRosterItem* ret = nil;
     if(cPtr) {
        ret = [[BMXRosterItem alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)set:(int)i val:(BMXRosterItem*)val {
  _wrap_BMXRosterItemList_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRosterItemList((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRosterServiceListener

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRosterServiceListener();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)onFriendAddedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId {
  _wrap_BMXRosterServiceListener_onFriendAdded(self.swigCPtr, sponsorId, recipientId);
}

- (void)onFriendRemovedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId {
  _wrap_BMXRosterServiceListener_onFriendRemoved(self.swigCPtr, sponsorId, recipientId);
}

- (void)onAppliedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId message:(NSString*)message {
  _wrap_BMXRosterServiceListener_onApplied(self.swigCPtr, sponsorId, recipientId, message);
}

- (void)onApplicationAcceptedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId {
  _wrap_BMXRosterServiceListener_onApplicationAccepted(self.swigCPtr, sponsorId, recipientId);
}

- (void)onApplicationDeclinedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId reason:(NSString*)reason {
  _wrap_BMXRosterServiceListener_onApplicationDeclined(self.swigCPtr, sponsorId, recipientId, reason);
}

- (void)onBlockListAddedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId {
  _wrap_BMXRosterServiceListener_onBlockListAdded(self.swigCPtr, sponsorId, recipientId);
}

- (void)onBlockListRemovedWithSponsorId:(long long)sponsorId recipientId:(long long)recipientId {
  _wrap_BMXRosterServiceListener_onBlockListRemoved(self.swigCPtr, sponsorId, recipientId);
}

- (void)onRosterInfoUpdateWithItem:(BMXRosterItem*)item {
  _wrap_BMXRosterServiceListener_onRosterInfoUpdate(self.swigCPtr, item.swigCPtr);
}

- (void)onRosterListUpdate {
  _wrap_BMXRosterServiceListener_onRosterListUpdate(self.swigCPtr);
}

- (void)registerRosterServiceWithService:(BMXRosterService*)service {
  _wrap_BMXRosterServiceListener_registerRosterService(self.swigCPtr, service.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRosterServiceListener((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXUserProfile

- (long long)userId {
   return _wrap_BMXUserProfile_userId(self.swigCPtr); 
}

- (BMXUserProfile_UserCategory)category {
   return (BMXUserProfile_UserCategory)_wrap_BMXUserProfile_category(self.swigCPtr); 
}

- (NSString*)username {
  {
    return _wrap_BMXUserProfile_username(self.swigCPtr);
  }
}

- (NSString*)nickname {
  {
    return _wrap_BMXUserProfile_nickname(self.swigCPtr);
  }
}

- (NSString*)avatarRatelUrl {
  {
    return _wrap_BMXUserProfile_avatarRatelUrl(self.swigCPtr);
  }
}

- (NSString*)avatarUrl {
  {
    return _wrap_BMXUserProfile_avatarUrl(self.swigCPtr);
  }
}

- (NSString*)avatarPath {
  {
    return _wrap_BMXUserProfile_avatarPath(self.swigCPtr);
  }
}

- (NSString*)avatarThumbnailPath {
  {
    return _wrap_BMXUserProfile_avatarThumbnailPath(self.swigCPtr);
  }
}

- (NSString*)mobilePhone {
  {
    return _wrap_BMXUserProfile_mobilePhone(self.swigCPtr);
  }
}

- (NSString*)email {
  {
    return _wrap_BMXUserProfile_email(self.swigCPtr);
  }
}

- (NSString*)publicInfo {
  {
    return _wrap_BMXUserProfile_publicInfo(self.swigCPtr);
  }
}

- (NSString*)privateInfo {
  {
    return _wrap_BMXUserProfile_privateInfo(self.swigCPtr);
  }
}

- (BMXUserProfile_AddFriendAuthMode)addFriendAuthMode {
   return (BMXUserProfile_AddFriendAuthMode)_wrap_BMXUserProfile_addFriendAuthMode(self.swigCPtr); 
}

- (BMXUserProfileAuthQuestion*)authQuestion {
     void* cPtr = _wrap_BMXUserProfile_authQuestion(self.swigCPtr);
     BMXUserProfileAuthQuestion* ret = nil;
     if(cPtr) {
        ret = [[BMXUserProfileAuthQuestion alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXUserProfileMessageSetting*)messageSetting {
     void* cPtr = _wrap_BMXUserProfile_messageSetting(self.swigCPtr);
     BMXUserProfileMessageSetting* ret = nil;
     if(cPtr) {
        ret = [[BMXUserProfileMessageSetting alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BOOL)isAutoAcceptGroupInvite {
   return _wrap_BMXUserProfile_isAutoAcceptGroupInvite(self.swigCPtr); 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXUserProfile((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXUserService
{
    UserServiceListener *userServiceListener;
}

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
    if (!userServiceListener) {
      userServiceListener = new UserServiceListener();
    }
    if (userServiceListener) {
      BMXUserServiceListener * listener = [[[BMXUserServiceListener alloc] init] initWithCptr:userServiceListener swigOwnCObject:NO];
      [self addUserListenerWithListener: listener];
    }
  }
  return self;
}

- (BMXErrorCode)bindDeviceWithToken:(NSString*)token {
   return (BMXErrorCode)_wrap_BMXUserService_bindDevice(self.swigCPtr, token); 
}

- (BMXErrorCode)getDeviceList:(BMXDeviceList*)deviceList {
   return (BMXErrorCode)_wrap_BMXUserService_getDeviceList(self.swigCPtr, deviceList.swigCPtr); 
}

- (BMXErrorCode)deleteDeviceWithDeviceSn:(int)device_sn {
   return (BMXErrorCode)_wrap_BMXUserService_deleteDevice(self.swigCPtr, device_sn); 
}

- (BMXErrorCode)getProfile:(BMXUserProfile*)profile forceRefresh:(BOOL)forceRefresh {
  void *tmp = nullptr;
  BMXErrorCode err = (BMXErrorCode)_wrap_BMXUserService_getProfile(self.swigCPtr, &tmp, forceRefresh);
  profile.swigCPtr = tmp;
  return err;
}

- (BMXErrorCode)setNickname:(NSString*)nickname {
   return (BMXErrorCode)_wrap_BMXUserService_setNickname(self.swigCPtr, nickname); 
}

- (BMXErrorCode)uploadAvatarWithAvatarPath:(NSString*)avatarPath callback:(void(^)(int progress))callback {
   return (BMXErrorCode)_wrap_BMXUserService_uploadAvatar(self.swigCPtr, avatarPath, (void *)callback); 
}

- (BMXErrorCode)downloadAvatarWithProfile:(BMXUserProfile*)profile thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback {
   return (BMXErrorCode)_wrap_BMXUserService_downloadAvatar(self.swigCPtr, profile.swigCPtr, thumbnail, (void *)callback);
}

- (BMXErrorCode)setPublicInfo:(NSString*)publicInfo {
   return (BMXErrorCode)_wrap_BMXUserService_setPublicInfo(self.swigCPtr, publicInfo); 
}

- (BMXErrorCode)setPrivateInfo:(NSString*)privateInfo {
   return (BMXErrorCode)_wrap_BMXUserService_setPrivateInfo(self.swigCPtr, privateInfo); 
}

- (BMXErrorCode)setAddFriendAuthMode:(BMXUserProfile_AddFriendAuthMode)mode {
   return (BMXErrorCode)_wrap_BMXUserService_setAddFriendAuthMode(self.swigCPtr, (int)mode); 
}

- (BMXErrorCode)setAuthQuestion:(BMXUserProfileAuthQuestion*)authQuestion {
   return (BMXErrorCode)_wrap_BMXUserService_setAuthQuestion(self.swigCPtr, authQuestion.swigCPtr); 
}

- (BMXErrorCode)setEnablePush:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXUserService_setEnablePush(self.swigCPtr, enable); 
}

- (BMXErrorCode)setEnablePushDetaile:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXUserService_setEnablePushDetaile(self.swigCPtr, enable); 
}

- (BMXErrorCode)setPushNickname:(NSString*)nickname {
   return (BMXErrorCode)_wrap_BMXUserService_setPushNickname(self.swigCPtr, nickname); 
}

- (BMXErrorCode)setPushAlias:(NSString*)alias bmxPushToken:(NSString*)bmxPushToken {
   return (BMXErrorCode)_wrap_BMXUserService_setPushAlias(self.swigCPtr, alias, bmxPushToken); 
}

- (BMXErrorCode)setNotificationSound:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXUserService_setNotificationSound(self.swigCPtr, enable); 
}

- (BMXErrorCode)setNotificationVibrate:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXUserService_setNotificationVibrate(self.swigCPtr, enable); 
}

- (BMXErrorCode)setAutoDownloadAttachment:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXUserService_setAutoDownloadAttachment(self.swigCPtr, enable); 
}

- (BMXErrorCode)setAutoAcceptGroupInvite:(BOOL)enable {
   return (BMXErrorCode)_wrap_BMXUserService_setAutoAcceptGroupInvite(self.swigCPtr, enable); 
}

- (void)bindDeviceWithToken:(NSString*)token completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_bindDevice(self.swigCPtr, token);
    } completion:resBlock];
}

- (void)getDeviceListWithCompletion: (void (^)(BMXDeviceList *deviceList, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXDeviceList:^BMXErrorCode(BMXDeviceList *res) {
        return (BMXErrorCode)_wrap_BMXUserService_getDeviceList(self.swigCPtr, res.swigCPtr);
    } completion:resBlock];
}

- (void)deleteDeviceWithDeviceSn:(int)device_sn completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_deleteDevice(self.swigCPtr, device_sn);
    } completion:resBlock];
}

- (void)getProfile:(BOOL)forceRefresh completion:(void (^)(BMXUserProfile*profile, BMXError *aError)) resBlock {
    [BMXAsync asyncWithBMXUserProfile:^BMXErrorCode(BMXUserProfile *res) {
        void *tmp = nullptr;
        BMXErrorCode err = (BMXErrorCode)_wrap_BMXUserService_getProfile(self.swigCPtr, &tmp, forceRefresh);
        res.swigCPtr = tmp;
        return err;
    } completion:resBlock];
}

- (void)setNickname:(NSString*)nickname completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setNickname(self.swigCPtr, nickname);
    } completion:resBlock];
}

- (void)uploadAvatarWithAvatarPath:(NSString*)avatarPath callback:(void(^)(int progress))callback completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_uploadAvatar(self.swigCPtr, avatarPath, (void *)callback);
    } completion:resBlock];
}

- (void)downloadAvatarWithProfile:(BMXUserProfile*)profile thumbnail:(BOOL)thumbnail callback:(void(^)(int progress))callback completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_downloadAvatar(self.swigCPtr, profile.swigCPtr, thumbnail, (void *)callback);
    } completion:resBlock];
}

- (void)setPublicInfo:(NSString*)publicInfo completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setPublicInfo(self.swigCPtr, publicInfo);
    } completion:resBlock];
}

- (void)setPrivateInfo:(NSString*)privateInfo completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setPrivateInfo(self.swigCPtr, privateInfo);
    } completion:resBlock];
}

- (void)setAddFriendAuthMode:(BMXUserProfile_AddFriendAuthMode)mode completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setAddFriendAuthMode(self.swigCPtr, (int)mode);
    } completion:resBlock];
}

- (void)setAuthQuestion:(BMXUserProfileAuthQuestion*)authQuestion completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setAuthQuestion(self.swigCPtr, authQuestion.swigCPtr);
    } completion:resBlock];
}

- (void)setEnablePush:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setEnablePush(self.swigCPtr, enable);
    } completion:resBlock];
}

- (void)setEnablePushDetaile:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setEnablePushDetaile(self.swigCPtr, enable);
    } completion:resBlock];
}

- (void)setPushNickname:(NSString*)nickname completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setPushNickname(self.swigCPtr, nickname);
    } completion:resBlock];
}

- (void)setPushAlias:(NSString*)alias bmxPushToken:(NSString*)bmxPushToken completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setPushAlias(self.swigCPtr, alias, bmxPushToken);
    } completion:resBlock];
}

- (void)setNotificationSound:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setNotificationSound(self.swigCPtr, enable);
    } completion:resBlock];
}

- (void)setNotificationVibrate:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setNotificationVibrate(self.swigCPtr, enable);
    } completion:resBlock];
}

- (void)setAutoDownloadAttachment:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setAutoDownloadAttachment(self.swigCPtr, enable);
    } completion:resBlock];
}

- (void)setAutoAcceptGroupInvite:(BOOL)enable completion:(void (^)(BMXError *aError)) resBlock {
    [BMXAsync async:^BMXErrorCode{
        return (BMXErrorCode)_wrap_BMXUserService_setAutoAcceptGroupInvite(self.swigCPtr, enable);
    } completion:resBlock];
}

- (void)addUserListenerWithListener:(BMXUserServiceListener*)listener {
  _wrap_BMXUserService_addUserListener(self.swigCPtr, listener.swigCPtr);
}

- (void)removeUserListenerWithListener:(BMXUserServiceListener*)listener {
  _wrap_BMXUserService_removeUserListener(self.swigCPtr, listener.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXUserService((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

- (void)addDelegate:(id<BMXUserServiceProtocol>)aDelegate {
    [self addDelegate:aDelegate delegateQueue:nil];
}

- (void)addDelegate:(id)aDelegate delegateQueue:(dispatch_queue_t)aQueue {
    if (aDelegate == nil) {
        return;
    }
    if ([aDelegate conformsToProtocol:@protocol(BMXUserServiceProtocol)]) {
        userServiceListener->addDelegate(aDelegate, aQueue);
    }
}

- (void)removeDelegate:(id<BMXUserServiceProtocol>)aDelegate {
    if (aDelegate == nil) {
        return;
    }
    if ([aDelegate conformsToProtocol:@protocol(BMXUserServiceProtocol)]) {
        userServiceListener-> removeDelegate(aDelegate);
    }
}

- (void)removeRosterListener {
    if (userServiceListener) {
        BMXUserServiceListener * listener = [[[BMXUserServiceListener alloc] init] initWithCptr:userServiceListener swigOwnCObject:NO];
        [self removeUserListenerWithListener: listener];
    }
}

@end


@implementation BMXUserServiceListener

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXUserServiceListener();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)onConnectStatusChangedWithStatus:(BMXConnectStatus)status {
  _wrap_BMXUserServiceListener_onConnectStatusChanged(self.swigCPtr, (int)status);
}

- (void)onUserSignInWithProfile:(BMXUserProfile*)profile {
  _wrap_BMXUserServiceListener_onUserSignIn(self.swigCPtr, profile.swigCPtr);
}

- (void)onUserSignOutWithError:(BMXErrorCode)error userId:(long long)userId {
  _wrap_BMXUserServiceListener_onUserSignOut(self.swigCPtr, (int)error, userId);
}

- (void)onInfoUpdatedWithProfile:(BMXUserProfile*)profile {
  _wrap_BMXUserServiceListener_onInfoUpdated(self.swigCPtr, profile.swigCPtr);
}

- (void)onOtherDeviceSingInWithDeviceSN:(int)deviceSN {
  _wrap_BMXUserServiceListener_onOtherDeviceSingIn(self.swigCPtr, deviceSN);
}

- (void)onOtherDeviceSingOutWithDeviceSN:(int)deviceSN {
  _wrap_BMXUserServiceListener_onOtherDeviceSingOut(self.swigCPtr, deviceSN);
}

- (void)onTrafficLimitExceeded {
  _wrap_BMXUserServiceListener_onTrafficLimitExceeded(self.swigCPtr);
}
- (void)registerUserServiceWithService:(BMXUserService*)service {
  _wrap_BMXUserServiceListener_registerUserService(self.swigCPtr, service.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXUserServiceListener((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXVideoAttachment

- (id)initWithData:(NSData *)aData
         thumbnailData:(NSData *)thumbnailData
         duration:(int)duration
         size:(BMXMessageAttachmentSize *) size
         displayName:(NSString *)displayName
         conversationId:(long long)conversationId {
    NSString *localPath = [self getLocalPathWithConversationId:conversationId displayName:displayName data:aData];
    NSString *thumbnailPath = [self getLocalPathWithConversationId:conversationId displayName:[NSString stringWithFormat:@"thumb_%@",displayName] data:aData];
    if ([aData length]) {
        [aData writeToFile:localPath atomically:YES];
    }
    
    self = [self initWithPath:localPath duration:duration size:[[BMXMessageAttachmentSize alloc] initWithWidth:size.getMWidth height:size.getMHeight] displayName:displayName];
    if (thumbnailData.length > 0) {
        [thumbnailData writeToFile:thumbnailPath atomically:YES];
        [self setThumbnail: thumbnailPath];
    }
    return self;
}


- (id)initWithPath:(NSString*)path duration:(int)duration size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXVideoAttachment__SWIG_0(path, duration, size.swigCPtr, displayName);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithPath:(NSString*)path duration:(int)duration size:(BMXMessageAttachmentSize*)size {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXVideoAttachment__SWIG_1(path, duration, size.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithPath:(NSString*)path thumbnailPath:(NSString*)thumbnailPath duration:(int)duration size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXVideoAttachment__SWIG_2(path, thumbnailPath, duration, size.swigCPtr, displayName);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithPath:(NSString*)path thumbnailPath:(NSString*)thumbnailPath duration:(int)duration size:(BMXMessageAttachmentSize*)size {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXVideoAttachment__SWIG_3(path, thumbnailPath, duration, size.swigCPtr);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithRatelUrl:(NSString*)ratelUrl duration:(int)duration size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName fileLength:(long long)fileLength {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXVideoAttachment__SWIG_4(ratelUrl, duration, size.swigCPtr, displayName, fileLength);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithRatelUrl:(NSString*)ratelUrl thumbnailRatelUrl:(NSString*)thumbnailRatelUrl duration:(int)duration size:(BMXMessageAttachmentSize*)size displayName:(NSString*)displayName fileLength:(long long)fileLength {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXVideoAttachment__SWIG_5(ratelUrl, thumbnailRatelUrl, duration, size.swigCPtr, displayName, fileLength);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (BMXMessageAttachment_Type)type {
   return (BMXMessageAttachment_Type)_wrap_BMXVideoAttachment_type(self.swigCPtr); 
}

- (BMXMessageAttachment*)clone {
     void* cPtr = _wrap_BMXVideoAttachment_clone(self.swigCPtr);
     BMXMessageAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (BMXMessageAttachmentSize*)size {
     void* cPtr = _wrap_BMXVideoAttachment_size(self.swigCPtr);
     BMXMessageAttachmentSize* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageAttachmentSize alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (int)duration {
   return _wrap_BMXVideoAttachment_duration(self.swigCPtr); 
}

- (void)setThumbnail:(NSString*)path {
  _wrap_BMXVideoAttachment_setThumbnail(self.swigCPtr, path);
}

- (NSString*)thumbnailPath {
  {
      NSString *path = _wrap_BMXVideoAttachment_thumbnailPath(self.swigCPtr);
      if (![path containsString:sharedClient.getChatServiceImpl.attachmentDir]) {
          path = [sharedClient.getChatServiceImpl.attachmentDir stringByAppendingPathComponent:path];
      }
      return path;
  }
}

- (NSString*)thumbnailUrl {
  {
    return _wrap_BMXVideoAttachment_thumbnailUrl(self.swigCPtr);
  }
}

- (void)setThumbnailRatelUrl:(NSString*)thumbnailRatelUrl {
  _wrap_BMXVideoAttachment_setThumbnailRatelUrl(self.swigCPtr, thumbnailRatelUrl);
}

- (NSString*)thumbnailRatelUrl {
  {
    return _wrap_BMXVideoAttachment_thumbnailRatelUrl(self.swigCPtr);
  }
}

- (BMXMessageAttachment_DownloadStatus)thumbnailDownloadStatus {
   return (BMXMessageAttachment_DownloadStatus)_wrap_BMXVideoAttachment_thumbnailDownloadStatus(self.swigCPtr); 
}

+ (BMXVideoAttachment*)dynamicCastWithAttachment:(BMXMessageAttachment*)attachment {
     void* cPtr = _wrap_BMXVideoAttachment_dynamic_cast(attachment.swigCPtr);
     BMXVideoAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXVideoAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXVideoAttachment((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXVoiceAttachment

- (id)initWithPath:(NSString*)path duration:(int)duration displayName:(NSString*)displayName {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXVoiceAttachment__SWIG_0(path, duration, displayName);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithPath:(NSString*)path duration:(int)duration {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXVoiceAttachment__SWIG_1(path, duration);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithRatelUrl:(NSString*)ratelUrl duration:(int)duration displayName:(NSString*)displayName fileLength:(long long)fileLength {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXVoiceAttachment__SWIG_2(ratelUrl, duration, displayName, fileLength);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (BMXMessageAttachment_Type)type {
   return (BMXMessageAttachment_Type)_wrap_BMXVoiceAttachment_type(self.swigCPtr); 
}

- (BMXMessageAttachment*)clone {
     void* cPtr = _wrap_BMXVoiceAttachment_clone(self.swigCPtr);
     BMXMessageAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXMessageAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (int)duration {
   return _wrap_BMXVoiceAttachment_duration(self.swigCPtr); 
}

+ (BMXVoiceAttachment*)dynamicCastWithAttachment:(BMXMessageAttachment*)attachment {
     void* cPtr = _wrap_BMXVoiceAttachment_dynamic_cast(attachment.swigCPtr);
     BMXVoiceAttachment* ret = nil;
     if(cPtr) {
        ret = [[BMXVoiceAttachment alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXVoiceAttachment((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXGroupServiceListener

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXGroupServiceListener();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (void)onGroupCreateWithGroup:(BMXGroup*)group {
  _wrap_BMXGroupServiceListener_onGroupCreate(self.swigCPtr, group.swigCPtr);
}

- (void)onGroupListUpdateWithList:(BMXGroupList*)list {
  _wrap_BMXGroupServiceListener_onGroupListUpdate__SWIG_0(self.swigCPtr, list.swigCPtr);
}

- (void)onGroupJoinedWithGroup:(BMXGroup*)group {
  _wrap_BMXGroupServiceListener_onGroupJoined(self.swigCPtr, group.swigCPtr);
}

- (void)onGroupLeftWithGroup:(BMXGroup*)group reason:(NSString*)reason {
  _wrap_BMXGroupServiceListener_onGroupLeft(self.swigCPtr, group.swigCPtr, reason);
}

- (void)onInvitatedWithGroupId:(long long)groupId inviter:(long long)inviter message:(NSString*)message {
  _wrap_BMXGroupServiceListener_onInvitated(self.swigCPtr, groupId, inviter, message);
}

- (void)onInvitationAcceptedWithGroup:(BMXGroup*)group inviteeId:(long long)inviteeId {
  _wrap_BMXGroupServiceListener_onInvitationAccepted(self.swigCPtr, group.swigCPtr, inviteeId);
}

- (void)onInvitationDeclinedWithGroup:(BMXGroup*)group inviteeId:(long long)inviteeId reason:(NSString*)reason {
  _wrap_BMXGroupServiceListener_onInvitationDeclined(self.swigCPtr, group.swigCPtr, inviteeId, reason);
}

- (void)onAppliedWithGroup:(BMXGroup*)group applicantId:(long long)applicantId message:(NSString*)message {
  _wrap_BMXGroupServiceListener_onApplied(self.swigCPtr, group.swigCPtr, applicantId, message);
}

- (void)onApplicationAcceptedWithGroup:(BMXGroup*)group approver:(long long)approver {
  _wrap_BMXGroupServiceListener_onApplicationAccepted(self.swigCPtr, group.swigCPtr, approver);
}

- (void)onApplicationDeclinedWithGroup:(BMXGroup*)group approver:(long long)approver reason:(NSString*)reason {
  _wrap_BMXGroupServiceListener_onApplicationDeclined(self.swigCPtr, group.swigCPtr, approver, reason);
}

- (void)onMembersBannedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members duration:(long long)duration {
  _wrap_BMXGroupServiceListener_onMembersBanned(self.swigCPtr, group.swigCPtr, members.swigCPtr, duration);
}

- (void)onMembersUnbannedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members {
  _wrap_BMXGroupServiceListener_onMembersUnbanned(self.swigCPtr, group.swigCPtr, members.swigCPtr);
}

- (void)onMemberJoinedWithGroup:(BMXGroup*)group memberId:(long long)memberId inviter:(long long)inviter {
  _wrap_BMXGroupServiceListener_onMemberJoined(self.swigCPtr, group.swigCPtr, memberId, inviter);
}

- (void)onMemberLeftWithGroup:(BMXGroup*)group memberId:(long long)memberId reason:(NSString*)reason {
  _wrap_BMXGroupServiceListener_onMemberLeft(self.swigCPtr, group.swigCPtr, memberId, reason);
}

- (void)onAdminsAddedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members {
  _wrap_BMXGroupServiceListener_onAdminsAdded(self.swigCPtr, group.swigCPtr, members.swigCPtr);
}

- (void)onAdminsRemovedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members reason:(NSString*)reason {
  _wrap_BMXGroupServiceListener_onAdminsRemoved(self.swigCPtr, group.swigCPtr, members.swigCPtr, reason);
}

- (void)onOwnerAssignedWithGroup:(BMXGroup*)group {
  _wrap_BMXGroupServiceListener_onOwnerAssigned(self.swigCPtr, group.swigCPtr);
}

- (void)onGroupInfoUpdateWithGroup:(BMXGroup*)group type:(BMXGroup_UpdateInfoType)type {
  _wrap_BMXGroupServiceListener_onGroupInfoUpdate(self.swigCPtr, group.swigCPtr, (int)type);
}

- (void)onMemberChangeNickNameWithGroup:(BMXGroup*)group memberId:(long long)memberId nickName:(NSString*)nickName {
  _wrap_BMXGroupServiceListener_onMemberChangeNickName(self.swigCPtr, group.swigCPtr, memberId, nickName);
}

- (void)onAnnouncementUpdateWithGroup:(BMXGroup*)group announcement:(BMXGroupAnnouncement*)announcement {
  _wrap_BMXGroupServiceListener_onAnnouncementUpdate(self.swigCPtr, group.swigCPtr, announcement.swigCPtr);
}

- (void)onSharedFileUploadedWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile {
  _wrap_BMXGroupServiceListener_onSharedFileUploaded(self.swigCPtr, group.swigCPtr, sharedFile.swigCPtr);
}

- (void)onSharedFileDeletedWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile {
  _wrap_BMXGroupServiceListener_onSharedFileDeleted(self.swigCPtr, group.swigCPtr, sharedFile.swigCPtr);
}

- (void)onSharedFileUpdatedWithGroup:(BMXGroup*)group sharedFile:(BMXGroupSharedFile*)sharedFile {
  _wrap_BMXGroupServiceListener_onSharedFileUpdated(self.swigCPtr, group.swigCPtr, sharedFile.swigCPtr);
}

- (void)onBlockListAddedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members {
  _wrap_BMXGroupServiceListener_onBlockListAdded(self.swigCPtr, group.swigCPtr, members.swigCPtr);
}

- (void)onBlockListRemovedWithGroup:(BMXGroup*)group members:(ListOfLongLong*)members {
  _wrap_BMXGroupServiceListener_onBlockListRemoved(self.swigCPtr, group.swigCPtr, members.swigCPtr);
}

- (void)onGroupListUpdate {
  _wrap_BMXGroupServiceListener_onGroupListUpdate__SWIG_1(self.swigCPtr);
}

- (void)registerGroupServiceWithService:(BMXGroupService*)service {
  _wrap_BMXGroupServiceListener_registerGroupService(self.swigCPtr, service.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXGroupServiceListener((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXPushUserProfile

- (long long)userId {
   return _wrap_BMXPushUserProfile_userId(self.swigCPtr); 
}

- (NSString*)pushAlias {
  {
    return _wrap_BMXPushUserProfile_pushAlias(self.swigCPtr);
  }
}

- (NSString*)pushToken {
  {
    return _wrap_BMXPushUserProfile_pushToken(self.swigCPtr);
  }
}

- (BMXPushUserProfileMessagePushSetting*)messagePushSetting {
     void* cPtr = _wrap_BMXPushUserProfile_messagePushSetting(self.swigCPtr);
     BMXPushUserProfileMessagePushSetting* ret = nil;
     if(cPtr) {
        ret = [[BMXPushUserProfileMessagePushSetting alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
	   [ret autorelease];
#endif
     }
    return ret; 
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXPushUserProfile((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end

@implementation BMXRTCStreams

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCStreams__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCStreams__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXRTCStreams_size(self.swigCPtr);
}

- (unsigned long)capacity {
   return _wrap_BMXRTCStreams_capacity(self.swigCPtr);
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXRTCStreams_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXRTCStreams_isEmpty(self.swigCPtr);
}

- (void)clear {
  _wrap_BMXRTCStreams_clear(self.swigCPtr);
}

- (void)addWithX:(BMXJanusStreamInfo*)x {
  _wrap_BMXRTCStreams_add(self.swigCPtr, x.swigCPtr);
}

- (BMXJanusStreamInfo*)get:(int)i {
     void* cPtr = _wrap_BMXRTCStreams_get(self.swigCPtr, i);
     BMXJanusStreamInfo* ret = nil;
     if(cPtr) {
        ret = [[BMXJanusStreamInfo alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
       [ret autorelease];
#endif
     }
    return ret;
}

- (void)set:(int)i val:(BMXJanusStreamInfo*)val {
  _wrap_BMXRTCStreams_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCStreams((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRTCRoomParticipants

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCRoomParticipants__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCRoomParticipants__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXRTCRoomParticipants_size(self.swigCPtr);
}

- (unsigned long)capacity {
   return _wrap_BMXRTCRoomParticipants_capacity(self.swigCPtr);
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXRTCRoomParticipants_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXRTCRoomParticipants_isEmpty(self.swigCPtr);
}

- (void)clear {
  _wrap_BMXRTCRoomParticipants_clear(self.swigCPtr);
}

- (void)addWithX:(BMXRoomParticipant*)x {
  _wrap_BMXRTCRoomParticipants_add(self.swigCPtr, x.swigCPtr);
}

- (BMXRoomParticipant*)get:(int)i {
     void* cPtr = _wrap_BMXRTCRoomParticipants_get(self.swigCPtr, i);
     BMXRoomParticipant* ret = nil;
     if(cPtr) {
        ret = [[BMXRoomParticipant alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
       [ret autorelease];
#endif
     }
    return ret;
}

- (void)set:(int)i val:(BMXRoomParticipant*)val {
  _wrap_BMXRTCRoomParticipants_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCRoomParticipants((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRTCPublishers

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCPublishers__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCPublishers__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXRTCPublishers_size(self.swigCPtr);
}

- (unsigned long)capacity {
   return _wrap_BMXRTCPublishers_capacity(self.swigCPtr);
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXRTCPublishers_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXRTCPublishers_isEmpty(self.swigCPtr);
}

- (void)clear {
  _wrap_BMXRTCPublishers_clear(self.swigCPtr);
}

- (void)addWithX:(BMXJanusPublisher*)x {
  _wrap_BMXRTCPublishers_add(self.swigCPtr, x.swigCPtr);
}

- (BMXJanusPublisher*)get:(int)i {
     void* cPtr = _wrap_BMXRTCPublishers_get(self.swigCPtr, i);
     BMXJanusPublisher* ret = nil;
     if(cPtr) {
        ret = [[BMXJanusPublisher alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
       [ret autorelease];
#endif
     }
    return ret;
}

- (void)set:(int)i val:(BMXJanusPublisher*)val {
  _wrap_BMXRTCPublishers_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCPublishers((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end


@implementation BMXRTCRooms

-(id)initWithCptr:(void *)cptr swigOwnCObject:(BOOL)ownCObject {
  if((self = [super init])) {
    self.swigCPtr = cptr;
    self.swigCMemOwn = ownCObject;
  }
  return self;
}

- (id)init {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCRooms__SWIG_0();
    self.swigCMemOwn = YES;
  }
  return self;
}

- (id)initWithN:(unsigned long)n {
 
  if((self = [super init])) {
    self.swigCPtr = _wrap_new_BMXRTCRooms__SWIG_1(n);
    self.swigCMemOwn = YES;
  }
  return self;
}

- (unsigned long)size {
   return _wrap_BMXRTCRooms_size(self.swigCPtr);
}

- (unsigned long)capacity {
   return _wrap_BMXRTCRooms_capacity(self.swigCPtr);
}

- (void)reserveWithN:(unsigned long)n {
  _wrap_BMXRTCRooms_reserve(self.swigCPtr, n);
}

- (BOOL)isEmpty {
   return _wrap_BMXRTCRooms_isEmpty(self.swigCPtr);
}

- (void)clear {
  _wrap_BMXRTCRooms_clear(self.swigCPtr);
}

- (void)addWithX:(BMXRTCRoom*)x {
  _wrap_BMXRTCRooms_add(self.swigCPtr, x.swigCPtr);
}

- (BMXRTCRoom*)get:(int)i {
     void* cPtr = _wrap_BMXRTCRooms_get(self.swigCPtr, i);
     BMXRTCRoom* ret = nil;
     if(cPtr) {
        ret = [[BMXRTCRoom alloc] initWithCptr:cPtr swigOwnCObject:NO];
#if !__has_feature(objc_arc)
       [ret autorelease];
#endif
     }
    return ret;
}

- (void)set:(int)i val:(BMXRTCRoom*)val {
  _wrap_BMXRTCRooms_set(self.swigCPtr, i, val.swigCPtr);
}

- (void)dealloc {
  if (self.swigCPtr != NULL) {
    if (self.swigCMemOwn) {
      _wrap_delete_BMXRTCRooms((void*)self.swigCPtr);
      self.swigCMemOwn = NO;
    }
    self.swigCPtr = NULL;
  }
#if !__has_feature(objc_arc)
  [super dealloc];
#endif
}

@end

